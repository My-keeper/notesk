[{"C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\index.js":"1","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\serviceWorker.js":"2","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\App.js":"3","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\API\\Weather.js":"4","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\Calendar.js":"5","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Notes\\Notes.js":"6","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Signup\\Signup.js":"7","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Login\\Login.js":"8","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\API\\API.js":"9","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\UI\\Footer.js":"10","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\UI\\UserInput.js":"11","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Notes\\Note\\Note.js":"12","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\CalendarCollection1.js":"13","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Notes\\CreateNote\\CreateNote.js":"14","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\UI\\NavBar.js":"15","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Signup\\SignupForm.js":"16","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\UI\\BlurDiv.js":"17","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Login\\LoginForm.js":"18","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\UI\\TextArea.js":"19","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\UI\\Modal.js":"20","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\UI\\UserIcon.js":"21","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\UI\\Switch.js":"22","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\UI\\Button.js":"23","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\ScheduleForm\\Schedule1.js":"24","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\CalendarForm1.js":"25","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\EditForm\\EvenForm.js":"26","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\event-utils.js":"27","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\ScheduleForm\\Containers\\InputContainer.js":"28","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\ScheduleForm\\Containers\\DaysContainer.js":"29","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\ScheduleForm\\Containers\\DropDownContainer.js":"30","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\ScheduleForm\\Containers\\SubmitButton1.js":"31","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\EditForm\\DeleteButton.js":"32","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\EditForm\\EditButton.js":"33","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\ScheduleForm\\Containers\\DataCollection\\TimeSelected.js":"34","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\ScheduleForm\\Containers\\DataCollection\\RepeatedDaysSelected.js":"35","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\UI\\Select.js":"36","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\ScheduleForm\\Containers\\DataCollection\\OptionsForm.js":"37"},{"size":497,"mtime":1612966679861,"results":"38","hashOfConfig":"39"},{"size":5227,"mtime":1612966679862,"results":"40","hashOfConfig":"39"},{"size":2589,"mtime":1613739104625,"results":"41","hashOfConfig":"39"},{"size":1136,"mtime":1612967108994,"results":"42","hashOfConfig":"39"},{"size":548,"mtime":1613739295115,"results":"43","hashOfConfig":"39"},{"size":2053,"mtime":1612967109020,"results":"44","hashOfConfig":"39"},{"size":507,"mtime":1613582987539,"results":"45","hashOfConfig":"39"},{"size":502,"mtime":1613582987537,"results":"46","hashOfConfig":"39"},{"size":327,"mtime":1612966679834,"results":"47","hashOfConfig":"39"},{"size":521,"mtime":1612966679854,"results":"48","hashOfConfig":"39"},{"size":4385,"mtime":1613049471649,"results":"49","hashOfConfig":"39"},{"size":6058,"mtime":1612967109018,"results":"50","hashOfConfig":"39"},{"size":2673,"mtime":1613655311450,"results":"51","hashOfConfig":"39"},{"size":6099,"mtime":1612966679845,"results":"52","hashOfConfig":"39"},{"size":3549,"mtime":1613739201076,"results":"53","hashOfConfig":"39"},{"size":8915,"mtime":1612967109021,"results":"54","hashOfConfig":"39"},{"size":543,"mtime":1612966679850,"results":"55","hashOfConfig":"39"},{"size":3822,"mtime":1612966679843,"results":"56","hashOfConfig":"39"},{"size":3062,"mtime":1612966679858,"results":"57","hashOfConfig":"39"},{"size":3512,"mtime":1612967109023,"results":"58","hashOfConfig":"39"},{"size":965,"mtime":1612966679859,"results":"59","hashOfConfig":"39"},{"size":4700,"mtime":1612967109026,"results":"60","hashOfConfig":"39"},{"size":2970,"mtime":1612967109022,"results":"61","hashOfConfig":"39"},{"size":6391,"mtime":1613479444372,"results":"62","hashOfConfig":"39"},{"size":4325,"mtime":1613655311458,"results":"63","hashOfConfig":"39"},{"size":4353,"mtime":1613655311475,"results":"64","hashOfConfig":"39"},{"size":398,"mtime":1612966679840,"results":"65","hashOfConfig":"39"},{"size":4731,"mtime":1612967109011,"results":"66","hashOfConfig":"39"},{"size":1193,"mtime":1613133000624,"results":"67","hashOfConfig":"39"},{"size":6428,"mtime":1613479444370,"results":"68","hashOfConfig":"39"},{"size":1558,"mtime":1613655311482,"results":"69","hashOfConfig":"39"},{"size":1169,"mtime":1613655311466,"results":"70","hashOfConfig":"39"},{"size":1095,"mtime":1613655311470,"results":"71","hashOfConfig":"39"},{"size":4482,"mtime":1613049471626,"results":"72","hashOfConfig":"39"},{"size":3470,"mtime":1613133000611,"results":"73","hashOfConfig":"39"},{"size":3210,"mtime":1612967109025,"results":"74","hashOfConfig":"39"},{"size":3235,"mtime":1613049471619,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"1u0q2q7",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"78"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"78"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"78"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"78"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"78"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"78"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"78"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"78"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"78"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"78"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"78"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"78"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"78"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"78"},"C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\index.js",[],["165","166"],"C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\serviceWorker.js",[],"C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\App.js",[],"C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\API\\Weather.js",[],"C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\Calendar.js",[],"C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Notes\\Notes.js",[],"C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Signup\\Signup.js",["167"],"import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Nav from \"../../UI/NavBar\";\r\nimport SignupForm from \"./SignupForm\";\r\nimport BlurDiv from \"../../UI/BlurDiv\";\r\n\r\nconst Signup = (props) => {\r\n  return (\r\n    <div>\r\n      <BlurDiv blurDegree={\"1.4px\"}/>\r\n      <Nav ColorChanged={props.colorchanged} RecieveColor={props.Color} CallingPage={\"Signin\"}/>\r\n      <SignupForm ColorChanged={props.colorchanged} RecieveColor={props.Color}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Login\\Login.js",["168"],"import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Nav from \"../../UI/NavBar\";\r\nimport LoginForm from \"./LoginForm\";\r\nimport BlurDiv from \"../../UI/BlurDiv\";\r\n\r\nconst Login = (props) => {\r\n  return (\r\n    <div>\r\n      <BlurDiv blurDegree={\"1.4px\"}/>\r\n      <Nav ColorChanged={props.colorchanged} RecieveColor={props.Color} CallingPage={\"Signup\"}/>\r\n      <LoginForm ColorChanged={props.colorchanged} RecieveColor={props.Color}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\API\\API.js",[],"C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\UI\\Footer.js",[],"C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\UI\\UserInput.js",[],"C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Notes\\Note\\Note.js",[],"C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\CalendarCollection1.js",["169","170","171"],"import React, { useState } from \"react\"; \r\nimport CalendarForm from \"./CalendarForm1\";\r\nimport ScheduleForm from \"./ScheduleForm/Schedule1\";\r\nimport styled from \"styled-components\";\r\nimport EventForm from \"./EditForm/EvenForm\"\r\n\r\nconst CalenderContainer = styled.div`\r\n    margin: 10px;\r\n    font-family: Arial, Helvetica Neue, Helvetica, sans-serif;\r\n    font-size: 16px;\r\n    color: cornflowerblue;   \r\n`;\r\nconst CalendarCollection = (props) => {\r\n  //Collection of Events\r\n  const [currentEvents, ChangeEventList] = useState([\r\n    {\r\n      id: \"1\",\r\n      title: \"Testoing for more \",\r\n      start: \"2021-02-13T12:30:00Z\",\r\n      end: \"2021-02-14T13:30:00Z\",\r\n      textColor: \"pink\",\r\n      description: \"lets play some game s\",\r\n      display: \"list-item\",\r\n      backgroundColor: \"black\",\r\n    },\r\n    {\r\n      id: \"3\",\r\n      title: \"Doc appoinmnet \",\r\n      start: \"2021-02-13\",\r\n      end: \"2021-02-14\",\r\n      startTime: \"10:45:00\",\r\n      endTime: \"12:45:00\",\r\n      textColor: \"pink\",\r\n      daysOfWeek: [\"1\"], //https://fullcalendar.io/docs/recurring-events \r\n      display: \"list-item\",\r\n      textColor: \"black\",\r\n    },\r\n  ]); \r\n  console.log(\"Calendar\")\r\n  console.log(currentEvents)\r\n  const [showSchedule, ChangeShowSchedule ] =useState(false) // to show the shedule model \r\n  const [SelectedStartedData, ChangeStartedData] = useState() //started selected data \r\n  const [SelectedEndedData, ChangeEndedData] = useState(); // ended slected data  \r\n  //the calendar form \r\n  const calendarForm = (<div style={{zIndex:\"1\"}}>\r\n    <CalendarForm\r\n      CalendarColor={props.RecieveColor} //send color form App\r\n      SendingEvents={currentEvents} //Pass down the list of eventsRecieveColor\r\n      CallingSchedule={(value) => ChangeShowSchedule(value)} //to call schedule\r\n      GetStartDate={(value) => ChangeStartedData(value)} //getting started clicked data\r\n      GetEndDate={(value) => ChangeEndedData(value)} //getting ended clicked data \r\n      ChangeEvents={(value) => ChangeEventList(value)}\r\n    />\r\n    </div>\r\n  );\r\n  //scheduling event is called \r\n  const scheduleForm = (\r\n    <ScheduleForm\r\n      submitEventValues={(value) => ChangeEventList(value)}\r\n      ScheduleColor={props.RecieveColor} //send color form App\r\n      CallingCalendar={(value) => ChangeShowSchedule(value)} //to call calendar back \r\n      SendSelectedSD={SelectedStartedData} //Selected Start Data\r\n      // SendSelectedED={ClickedEvent} //Selected End Data\r\n    />\r\n  ); \r\n  return (\r\n    <CalenderContainer >\r\n      {showSchedule ? scheduleForm : null}  \r\n      {showSchedule? null : calendarForm} \r\n    </CalenderContainer>\r\n  );\r\n};\r\nexport default CalendarCollection;\r\n","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Notes\\CreateNote\\CreateNote.js",[],"C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\UI\\NavBar.js",["172","173","174"],"C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Signup\\SignupForm.js",[],"C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\UI\\BlurDiv.js",["175"],"import React from \"react\";\r\nimport styled from \"styled-components\";\r\n{/* <BlurDiv style={{ height: \"100%\" }} blurDegree={\"3px\"}>\r\n<StyledImage src={backgroundImage} alt=\"oops\" />\r\n</BlurDiv> */}\r\n\r\n\r\nconst StyledBlurDiv = styled.div`\r\nbackdrop-filter: blur(${(props) => props.blurDegree});\r\nposition: absolute;\r\nheight: 100%;\r\nwidth: 100%;\r\n`;\r\n\r\nconst BlurDiv = (props) => {\r\n  return (\r\n    <StyledBlurDiv style={props.style} blurDegree={props.blurDegree}>\r\n      {props.children}\r\n    </StyledBlurDiv>\r\n  );\r\n};\r\n\r\nexport default BlurDiv;\r\n","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Login\\LoginForm.js",["176"],"import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { MailOutlined, KeyOutlined, LoginOutlined, UserAddOutlined} from \"@ant-design/icons\";\r\nimport UserInput from \"../../UI/UserInput\";\r\nimport NoteContainer from '../../UI/Modal';\r\nimport Button from \"../../UI/Button\";\r\nimport FadeIn  from \"react-fade-in\";\r\n\r\n\r\nconst InfoContainer = styled.div`\r\n    width: 440px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: flex-start;\r\n    margin: 4px;\r\n    margin-bottom: 10px;\r\n`\r\n\r\nconst SignupForm = (props) => {\r\n    const IconColor = { \r\n        color : props.RecieveColor.IconC, \r\n        fontSize:\"25px\", \r\n        marginRight:\"9px\", \r\n        marginTop:\"4px\" }\r\n    \r\n    const ButtonIconColor = { \r\n        color : props.RecieveColor.IconC, \r\n        fontSize:\"20px\", \r\n        marginRight:\"9px\", \r\n        marginTop:\"4px\" }\r\n\r\n    const Email = <InfoContainer>\r\n            <FadeIn><MailOutlined style={IconColor}/></FadeIn>\r\n            <FadeIn><UserInput \r\n            inputType={\"text\"}\r\n            name=\"title\"\r\n            PlaceholderValue={\"E-mail\"}\r\n            widthValue={\"380px\"}\r\n            paddingVale={\"4px\"}\r\n            outlineValue={\"none\"}\r\n            fontSizeValue={\"1.2em\"}\r\n            fontFamilyValue={\"inherit\"}\r\n            IsCalledValue={\"FOCUS\"} \r\n            borderRadiusValue= {\"7px\"}\r\n            backGroundColorValue={props.RecieveColor.UserInputBGC}\r\n            FontColorValue={props.RecieveColor.UserInputFC}\r\n            PlaceHolderColorValue={props.RecieveColor.UserInputPHC}\r\n            borderColorValue={props.RecieveColor.BorderColor}\r\n            BorderValue={\"solid\"}\r\n            borderWidthValue=\"thin\"\r\n            marginRightValue={\"10px\"}\r\n            /></FadeIn>\r\n        </InfoContainer>\r\n    \r\n    const PassWord = <InfoContainer>\r\n            <FadeIn><KeyOutlined style={IconColor}/></FadeIn>\r\n            <FadeIn><UserInput \r\n            inputType={\"text\"}\r\n            name=\"title\"\r\n            PlaceholderValue={\"Password\"}\r\n            widthValue={\"380px\"}\r\n            paddingVale={\"4px\"}\r\n            outlineValue={\"none\"}\r\n            fontSizeValue={\"1.2em\"}\r\n            fontFamilyValue={\"inherit\"}\r\n            IsCalledValue={\"FOCUS\"} \r\n            borderRadiusValue= {\"7px\"}\r\n            backGroundColorValue={props.RecieveColor.UserInputBGC}\r\n            FontColorValue={props.RecieveColor.UserInputFC}\r\n            PlaceHolderColorValue={props.RecieveColor.UserInputPHC}\r\n            borderColorValue={props.RecieveColor.BorderColor}\r\n            BorderValue={\"solid\"}\r\n            borderWidthValue=\"thin\"\r\n            marginRightValue={\"10px\"}\r\n            /></FadeIn>\r\n        </InfoContainer>\r\n   \r\n   const LoginButton = <FadeIn>\r\n            <Button\r\n            width={\"120px\"}\r\n            marginBottomValue={\"10px\"}\r\n            marginLeftValue={\"35%\"}\r\n            fontSizeValue={\"20px\"}\r\n            borderRadiusValue={\"15px\"}\r\n            backGroundColorValue={props.RecieveColor.LogSignColor}\r\n            FontColorValue={props.RecieveColor.IconC}\r\n            borderColorValue={props.RecieveColor.BorderColor}\r\n            BorderValue=\"solid\"\r\n            borderWidthValue=\"thin\"\r\n            paddingInputValue=\"2px\"\r\n            text = {\"Login\"} \r\n            icon = {<LoginOutlined style={ButtonIconColor}/>}\r\n            />\r\n        </FadeIn>\r\n\r\nreturn (\r\n    <FadeIn><NoteContainer\r\n    position= {\"relative\"}\r\n    width= {\"450px\"}\r\n    margin= {\"300px auto 20px auto\"}\r\n    padding= {\"15px\"}\r\n    boxShadowValue= {\"0 1px 5px rgb(138, 137, 137)\"}\r\n    borderRadiusValue= {\"20px\"}\r\n    resizeValue={\"both\"}\r\n    backGroundColorValue={props.RecieveColor.NotekBGC}\r\n    >\r\n        {Email}\r\n        {PassWord}\r\n        {LoginButton}\r\n    </NoteContainer></FadeIn>\r\n)\r\n};\r\n\r\nexport default SignupForm; ","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\UI\\TextArea.js",[],"C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\UI\\Modal.js",[],"C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\UI\\UserIcon.js",[],"C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\UI\\Switch.js",[],"C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\UI\\Button.js",[],"C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\ScheduleForm\\Schedule1.js",["177","178"],"import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport NoteContainer from \"../../../UI/Modal\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport {TitleContainer,DescriptionContainer,URLContainer} from \"./Containers/InputContainer\";\r\nimport {CalenderContianer,TimerContainer} from \"./Containers/DropDownContainer\";\r\nimport RDContainer from \"./Containers/DaysContainer\";\r\nimport SubmitButton from \"./Containers/SubmitButton1\";\r\nimport { CloseCircleOutlined } from \"@ant-design/icons\";\r\nconst InfoContainer = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    position: fixed;\r\n    z-index: 5;\r\n    left: 0;\r\n    top: 0'\r\n    background-color: rgba(0,0,0, 0.5)\r\n`;\r\n\r\nconst Schedule = (props) => {\r\n    \r\n    //Close ICion Area\r\n    const CloseIcon = \r\n    (<CloseCircleOutlined\r\n        onClick={()=> props.CallingCalendar(false)} \r\n        style={{marginRight: \"4px\", marginLeft: \"95%\", marginBottom: \"15px\",\r\n            fontSize: \"26px\", color: props.ScheduleColor.IconC}} // send the color list from the parent App file \r\n    />)\r\n\r\n    //Title Area\r\n    const [getTitle, ChangeTitle] = useState(\"\");\r\n    const [TitlePH, ChangeTitlePH] = useState(\"Title ...\");\r\n    const Title = <TitleContainer\r\n            SubmitTitle={(value) => ChangeTitle(value)} //this is to return input value of the title and then send it to submit model\r\n            SubmitTitlePlaceHolder={TitlePH} //this is to send the placeholder for the title area\r\n            ScheduleColor={props.ScheduleColor}  // send the color list from the parent App file \r\n        />  \r\n    \r\n    //Description Area\r\n    const [getDescription, ChangeDescription] = useState(\"\");\r\n    const [DescriptionPH, ChangeDescriptionPH] = useState(\"Description ...\");\r\n    const Description = (\r\n        <DescriptionContainer\r\n        SubmitDescription={(value) => ChangeDescription(value)}\r\n        SubmitDescriptionPlaceHolder={DescriptionPH}\r\n        ScheduleColor={props.ScheduleColor}\r\n        />\r\n    );\r\n\r\n    //URL Area\r\n    const [getURL, ChangeURL] = useState();\r\n    const [URLPH, ChangeURLPH] = useState(\"Optional Attached Link For Description ...\");\r\n    const URL = (\r\n        <URLContainer\r\n        URLOption={(value) => ChangeURL(value)}\r\n        SubmitURLPH={URLPH}\r\n        ScheduleColor={props.ScheduleColor}\r\n        />\r\n    );\r\n    \r\n    // Data From and To\r\n    const [getFormDate, ChangeFormDate] = useState(); //this is the data that will be send to submit model to be added to the event list \r\n    const [getToDate, ChangeToDate] = useState();  //this is the data that will be send to submit model to be added to the event list \r\n    const StartDate= props.SendSelectedSD //This is the selected data in calendar\r\n    const EndDate= props.SendSelectedED//This is the selected data in calendar  \r\n    const Data = (\r\n        <CalenderContianer\r\n        SendSD={StartDate} //This is to send back the selected started data\r\n        SendED={EndDate} //This is to send back the selected ended data\r\n        GetFromDate={(value) => ChangeFormDate(value)} //Returning the selected data that the user chose \r\n        GetToDate={(value) => ChangeToDate(value)} //Returning the selected data that the user chose \r\n        ScheduleColor={props.ScheduleColor} // send the color list from the parent App file  \r\n        />\r\n    );\r\n\r\n    //This is for the time\r\n    const [StartHours, ChangeStartHour] = useState(); //have returned starting hour if time is needed\r\n    const [StartMinuts, ChangeStartMinuts] = useState(); //have returned starting minut if time is needed \r\n    const [TimeClicked, ChangeTimeClicked] = useState() //this to make sure that time is included or not \r\n    const Time = (\r\n        <TimerContainer\r\n        FromHourSelected={(value) => ChangeStartHour(value)} // return starting hour if time is needed\r\n        FromMinutsSelected={(value) => ChangeStartMinuts(value)} // return starting minut if time is needed \r\n        ScheduleColor={props.ScheduleColor} // send the color list from the parent App file  \r\n        isTime={(value) => ChangeTimeClicked(value)}\r\n        />\r\n    );\r\n\r\n    //this is for number of rebeated days \r\n    const [GetRepeatedDays, ChangeRepeatedDays] = useState()\r\n    const RepeatedDays =(<RDContainer\r\n        ScheduleColor={props.ScheduleColor} // send the color list from the parent App file  \r\n        SubmitNumberOfRP={(value) => ChangeRepeatedDays(value)} //returning the value of repeated days \r\n        />\r\n    );\r\n    //Submit Buton \r\n    const Submit = (\r\n        <SubmitButton \r\n            isCallingCalendar={value=> props.CallingCalendar(value)} //return the close value to return to calender from the submit model \r\n            isTitle={getTitle} //the Title value \r\n            CheckTitlePH={value => ChangeTitlePH(value)} //this is to change the title place holder if there is no title \r\n            isDescription={getDescription} //the Description value\r\n            CheckDescriptionPH={value => ChangeDescriptionPH(value)} //this is to change the description placeholder if there is no placeholder\r\n            isURL={getURL} //the URL value\r\n            isStartingDate={TimeClicked ? (getFormDate+'T12:00:00') : (getFormDate+\"T\"+StartHours+\":\"+StartMinuts+\"00\")} //the value of the Starting data\r\n            isEndingData={getToDate } //the value of Ending data\r\n            isRepeatedDays={GetRepeatedDays} //Values of Repeated Days\r\n            isEvent={props.submitEventValues}\r\n        />\r\n    );\r\n    const ScheduleForm = (\r\n        <FadeIn>\r\n            <NoteContainer\r\n                position={\"relative\"}\r\n                width={\"520px\"}\r\n                margin={\"30px auto 20px auto\"}\r\n                padding={\"15px\"}\r\n                boxShadowValue={\"0 1px 5px rgb(138, 137, 137)\"}\r\n                borderRadiusValue={\"7px\"}\r\n                resizeValue={\"both\"}\r\n                backGroundColorValue={props.ScheduleColor.NotekBGC} //// send the color list from the parent App file \r\n                FontColorValue={props.ScheduleColor.NoteFC} //// send the color list from the parent App file \r\n                >\r\n            {CloseIcon}\r\n            {Title} \r\n            {Description}\r\n            {URL}\r\n            {Data}\r\n            {Time}\r\n            {RepeatedDays}\r\n            {Submit}\r\n            </NoteContainer> \r\n        </FadeIn>\r\n    );\r\n\r\n  return ScheduleForm;\r\n};\r\n\r\nexport default Schedule;\r\n","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\CalendarForm1.js",["179"],"import React, { useState } from \"react\";\r\nimport FullCalendar, { formatDate } from \"@fullcalendar/react\";\r\nimport listPlugin from \"@fullcalendar/list\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport { INITIAL_EVENTS } from \"./event-utils\";\r\nimport EventForm from \"./EditForm/EvenForm\";\r\n\r\nconst CalendarForm1 = (props) => {\r\n  const weekendsVisible = true;\r\n  const getEvent = props.SendingEvents; \r\n  const [StartDate ,ChangeStartData ]=useState(\"\")  // Save Selected Start Data\r\n  const [EndDate ,ChangeEndData ]=useState(\"\") // Save Selected End Data\r\n  props.GetStartDate(StartDate); // Send Selected Start Data\r\n  props.GetEndDate(EndDate); // Send Selected End Data\r\n  const [ShowEventClicked, ChangeShowEventClicekd ] = useState(true) //to show event clicked\r\n  //Returning the values of the event that is clicked to be showed \r\n  const [ClickedEvent, ChangeClickedEvent] = useState({\r\n    Id: \"\",\r\n    title: \"\",\r\n    description: \"\",\r\n    url: \"\",\r\n    Start: \"\",\r\n    End: \"\",\r\n    Display: \"\"\r\n  }); \r\n  //Data Selected function\r\n  const handleDateSelect = (selectInfo) => {\r\n    ChangeStartData(selectInfo.startStr); // Selected Start Data \r\n    ChangeEndData(selectInfo.endStr); // Selected End Data\r\n    props.CallingSchedule(true);\r\n  };\r\n  //Event clicked handler \r\n  const handleEventClick = (clickInfo) => {\r\n      ChangeShowEventClicekd(false)\r\n      ChangeClickedEvent({\r\n        Id: clickInfo.event._def.publicId,\r\n        title: clickInfo.event._def.title,\r\n        description: clickInfo.event._def.extendedProps.description,\r\n        url: clickInfo.event._def.extendedProps.Url,\r\n        Start: clickInfo.event._instance.range.start,\r\n        End: clickInfo.event._instance.range.end,\r\n        Display: clickInfo.event._def.ui.display,\r\n      });\r\n  }\r\n  const FullCalendarForm = <FullCalendar\r\n    plugins= {[dayGridPlugin, timeGridPlugin, interactionPlugin, listPlugin]}\r\n    headerToolbar= {{\r\n      left: \"prev,next today\",\r\n      center: \"title\",\r\n      right: \"dayGridMonth,timeGridWeek,timeGridDay,list\",\r\n    }}\r\n    initialView=\"dayGridMonth\"\r\n    titleFormat={{ month: \"short\", year: \"numeric\", day: \"numeric\" }} //this is for the tile what should be there for the user\r\n    height=\"850px\" //get fixed height for the calendar\r\n    contentHeight=\"800px\" //get the content height for the calendar \r\n    handleWindowResize=\"true\"\r\n    locale=\"En\" //this is for the languages option\r\n    timeZone=\"canada/nl\" //to get the time zone of your location that is why we will be using the location in the sigup or make the browser detecte it\r\n    editable={true} //to edit the info\r\n    selectable={true} //to enable selection\r\n    selectMirror={true}\r\n    dayMaxEvents={true}\r\n    weekends={weekendsVisible}\r\n    eventDisplay=\"block\" //this is used to high light the event that are created\r\n    eventTextColor=\"black\" //this is for the styling of the text for each event\r\n    eventBackgroundColor=\"cornflowerblue\" //This is for the background of each event\r\n    eventBorderColor=\"pink\" //The border color\r\n    initialEvents={INITIAL_EVENTS} // alternatively, use the `events` setting to fetch from a feed\r\n    select={handleDateSelect}\r\n    events={getEvent}\r\n    eventClick={handleEventClick}\r\n    eventRemove={value=> console.log(value)} // custom render function\r\n    // eventContent={value=> console.log(value)} // custom render function\r\n    // eventsSet={handleEvents} // called after events are initialized/added/changed/removed\r\n  /> \r\n    //Event Form that is clicked \r\n  const eventform = (\r\n    <div style={{ zIndex: \"3\", position: \"absolute\", left: \"35%\", top: \"10%\" }}>\r\n      <EventForm\r\n        ScheduleColor={props.CalendarColor} //send color form App\r\n        closedEventForm={(value) => ChangeShowEventClicekd(value)}\r\n        EventClickedInfo={ShowEventClicked ? null : ClickedEvent} //pass downt the info about the clicked data\r\n        PassedAllEvent={props.SendingEvents} //copy of the event so we can compare the id and delete it \r\n        ChangeAllEvents={(value) => props.ChangeEvents(value)} //Delete the selected event\r\n      />\r\n    </div>\r\n  );\r\n\r\n\r\n  return (ShowEventClicked ? FullCalendarForm : eventform)\r\n};\r\n\r\nexport default CalendarForm1;","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\EditForm\\EvenForm.js",["180","181"],"import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport NoteContainer from \"../../../UI/Modal\";\r\nimport FadeIn from \"react-fade-in\"; \r\nimport { CloseCircleOutlined } from \"@ant-design/icons\";\r\nimport EditButton from \"./EditButton\";\r\nimport DeleteButton from \"./DeleteButton\";\r\n\r\n// import { SubmissionContainer } from \"../ScheduleForm/Containers/SubmitButton1\" ;\r\nconst EachateContainer = styled.div`\r\n    width: 460px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: ${props => props.JustifyContentCalue};\r\n    margin: 4px;\r\n`\r\nconst DateContainer = styled.div`\r\n    width: 400px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n` \r\nconst TitleStyle = styled.span`\r\n  padding: 4px ;\r\n  fontSize: 1.2em;\r\n  marginRight: 4px;\r\n  color: ${props => props.Coloring};\r\n`\r\nconst ContentStyle = styled.span`\r\n  padding: 4px ;\r\n  fontSize: 1.2em;\r\n  marginLeft: 20px;\r\n  `\r\nconst EventForm = (props) => { \r\n\r\n  // The Event information \r\n  const Header=<EachateContainer>\r\n    <span style={{ \r\n      padding: \"1px\" ,paddingTop: \"1px\" , \r\n      fontSize: \"1.2em\", marginLeft: \"150px\",\r\n      color: `${props.ScheduleColor.IconC}`}}>\r\n        Event Info\r\n    </span> \r\n    <CloseCircleOutlined\r\n      onClick={()=> props.closedEventForm(true)} \r\n      style={{marginRight: \"4px\", marginLeft: \"180px\", marginBottom: \"15px\",\r\n          fontSize: \"26px\", color: props.ScheduleColor.IconC}} // send the color list from the parent App file \r\n    />\r\n  </EachateContainer>  \r\n  //TItle Area props.ScheduleColor.IconC\r\n  const isTitle =<EachateContainer JustifyContentCalue={\"\"}>\r\n    <TitleStyle Coloring={props.ScheduleColor.IconC}>Title : </TitleStyle> \r\n    <ContentStyle >{props.EventClickedInfo.title}</ContentStyle> \r\n  </EachateContainer>\r\n  //Description Area props.ScheduleColor.IconC\r\n  const isDescription =<EachateContainer JustifyContentCalue={ \"\"}>\r\n    <TitleStyle Coloring={props.ScheduleColor.IconC}>Description : </TitleStyle> \r\n    <ContentStyle >{props.EventClickedInfo.description}</ContentStyle> \r\n  </EachateContainer>\r\n  //Url Area props.ScheduleColor.IconC\r\n  const isUrl =<EachateContainer JustifyContentCalue={ \"\"}>\r\n    <TitleStyle Coloring={props.ScheduleColor.IconC}>Url : </TitleStyle> \r\n    <ContentStyle >{ !props.EventClickedInfo.url == \"\" ? props.EventClickedInfo.url : \"......\"  }</ContentStyle> \r\n  </EachateContainer>\r\n  //Start Area props.ScheduleColor.IconC\r\n  const isStart =<EachateContainer JustifyContentCalue={ \"\"}>\r\n    <TitleStyle Coloring={props.ScheduleColor.IconC}>Start : </TitleStyle> \r\n    {/* <ContentStyle >{props.EventClickedInfo.Start}</ContentStyle>  */}\r\n  </EachateContainer>\r\n  //End Area props.ScheduleColor.IconC\r\n  const isEnd =<EachateContainer JustifyContentCalue={ \"\"}>\r\n    <TitleStyle Coloring={props.ScheduleColor.IconC}>End : </TitleStyle> \r\n    {/* <ContentStyle >{props.EventClickedInfo.End}</ContentStyle>  */}\r\n  </EachateContainer>\r\n  \r\n  // The content Area\r\n  const Content = <DateContainer>\r\n    {isTitle}\r\n    {isDescription}\r\n    {isUrl}\r\n    {isStart}\r\n    {isEnd}\r\n  </DateContainer>\r\n  \r\n  //The edit button\r\n  const isEditButton=\r\n  <EachateContainer JustifyContentCalue={ \"\"}>\r\n    <EditButton ColorChange={props.ScheduleColor}/>\r\n    <DeleteButton\r\n      EventsInfoList={props.PassedAllEvent} //list of all the Events created \r\n      IDofClickedEvent={props.EventClickedInfo.Id} //the clicked event ID \r\n      ReturnNewEvents={(value) => props.ChangeAllEvents(value)} //Delete selected event from all event and close model\r\n      CloseModel={(value) => props.closedEventForm(value)} //to return true if clicked\r\n      ColorChange={props.ScheduleColor} //Color list\r\n      />  \r\n  </EachateContainer>\r\n\r\n  const EventInfo= <NoteContainer\r\n        position={\"relative\"}\r\n        width={\"480px\"}\r\n        margin={\"30px auto 20px auto\"}\r\n        padding={\"15px\"}\r\n        boxShadowValue={\"0 1px 5px rgb(138, 137, 137)\"}\r\n        borderRadiusValue={\"7px\"}\r\n        resizeValue={\"both\"}\r\n        backGroundColorValue={props.ScheduleColor.NotekBGC}\r\n        FontColorValue={props.ScheduleColor.NoteFC}\r\n      > \r\n        {Header}\r\n        {Content}\r\n        {isEditButton}\r\n      </NoteContainer>\r\n\r\n  return (\r\n    <FadeIn>\r\n      {EventInfo}\r\n    </FadeIn>\r\n  );\r\n};\r\n\r\nexport default EventForm;\r\n","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\event-utils.js",[],"C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\ScheduleForm\\Containers\\InputContainer.js",["182"],"import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport UserInput from '../../../../UI/UserInput'\r\nimport TextArea from '../../../../UI/TextArea';\r\nimport FadeIn  from 'react-fade-in';\r\nimport { LinkOutlined} from \"@ant-design/icons\";\r\nimport { Title } from '@material-ui/icons';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nconst InfoContainer = styled.div`\r\n    width: 440px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: flex-start;\r\n    margin: 4px;\r\n    margin-bottom: 10px;\r\n`\r\n\r\nconst TitleContainer = (props) => {\r\n    const IconColor = { \r\n        color : props.ScheduleColor.IconC, \r\n        fontSize:\"25px\", \r\n        marginRight:\"15px\", \r\n        marginTop:\"4px\" \r\n    } \r\n    const title = <InfoContainer>\r\n        <FadeIn><Title style={IconColor}/></FadeIn>\r\n        <FadeIn><UserInput \r\n        key={`title` + 1}\r\n        // This is to change the Value of Title based on the input coming from schedule\r\n        onchangeValue={(event)=>props.SubmitTitle(event.target.value)}\r\n        //This is the Props that is coming from Schedule From once I click on submit\r\n        PlaceholderValue={props.SubmitTitlePlaceHolder}\r\n        name=\"title\"\r\n        inputType={\"text\"} \r\n        widthValue={\"425px\"}\r\n        paddingVale={\"4px\"}\r\n        outlineValue={\"none\"}\r\n        fontSizeValue={\"1.2em\"}\r\n        fontFamilyValue={\"inherit\"}\r\n        IsCalledValue={\"FOCUS\"} \r\n        borderRadiusValue= {\"7px\"}\r\n        backGroundColorValue={props.ScheduleColor.UserInputBGC}\r\n        FontColorValue={props.ScheduleColor.UserInputFC}\r\n        PlaceHolderColorValue={props.ScheduleColor.UserInputPHC}\r\n        borderColorValue={props.ScheduleColor.BorderColor}  \r\n        BorderValue={\"solid\"}\r\n        borderWidthValue=\"thin\"\r\n        marginRightValue={\"10px\"}\r\n        /></FadeIn>\r\n    </InfoContainer>\r\n\r\n    return(title)\r\n}\r\n\r\nconst DescriptionContainer = (props) => {\r\n    const IconColor = { \r\n        color : props.ScheduleColor.IconC, \r\n        fontSize:\"25px\", \r\n        marginRight:\"15px\", \r\n        marginTop:\"4px\" \r\n    }\r\n    const Description = <InfoContainer>\r\n        <FadeIn><DescriptionIcon style={IconColor}/></FadeIn>\r\n        <FadeIn><TextArea\r\n        key={`Description`+1} \r\n        // This is to change the Value of Title based on the input \r\n        onchangeValue={(event)=>props.SubmitDescription(event.target.value)}\r\n        //This is the Props that is coming from Schedule From once I click on submit\r\n        PlaceholderValue={props.SubmitDescriptionPlaceHolder}\r\n        rows={3}\r\n        name=\"Description\"\r\n        inputType={\"text\"} \r\n        widthValue={\"425px\"}\r\n        paddingVale={\"4px\"}\r\n        outlineValue={\"none\"}\r\n        fontSizeValue={\"1.2em\"}\r\n        fontFamilyValue={\"inherit\"}\r\n        IsCalledValue={\"FOCUS\"} \r\n        borderRadiusValue= {\"7px\"}\r\n        backGroundColorValue={props.ScheduleColor.UserInputBGC}\r\n        FontColorValue={props.ScheduleColor.UserInputFC}\r\n        PlaceHolderColorValue={props.ScheduleColor.UserInputPHC}\r\n        borderColorValue={props.ScheduleColor.BorderColor}  \r\n        BorderValue={\"solid\"}\r\n        resizeValue={\"vertical\"}\r\n        borderWidthValue=\"thin\"\r\n        marginRightValue={\"10px\"}\r\n        /></FadeIn>\r\n    </InfoContainer>\r\n\r\n\r\n    return (Description)\r\n}\r\n\r\nconst URLContainer = (props) => {\r\n    const IconColor = { \r\n        color : props.ScheduleColor.IconC, \r\n        fontSize:\"25px\", \r\n        marginRight:\"15px\", \r\n        marginTop:\"4px\" \r\n    }\r\n    const URL = <InfoContainer>\r\n        <FadeIn><LinkOutlined style={IconColor}/></FadeIn>\r\n        <FadeIn><UserInput \r\n        key={`AttachedLinkDescription` }\r\n        // This is to change the Value of Title based on the input \r\n        onchangeValue={(event)=>props.URLOption(event.target.value)}\r\n        //This is the Props that is coming from Schedule From once I click on submit\r\n        PlaceholderValue={props.SubmitURLPH}\r\n        name=\"Url\"\r\n        inputType={\"text\"} \r\n        widthValue={\"425px\"}\r\n        paddingVale={\"4px\"}\r\n        outlineValue={\"none\"}\r\n        fontSizeValue={\"1.2em\"}\r\n        fontFamilyValue={\"inherit\"}\r\n        IsCalledValue={\"FOCUS\"} \r\n        borderRadiusValue= {\"7px\"}\r\n        backGroundColorValue={props.ScheduleColor.UserInputBGC}\r\n        FontColorValue={props.ScheduleColor.UserInputFC}\r\n        PlaceHolderColorValue={props.ScheduleColor.UserInputPHC}\r\n        borderColorValue={props.ScheduleColor.BorderColor}    \r\n        BorderValue={\"solid\"}\r\n        borderWidthValue=\"thin\"\r\n        marginRightValue={\"10px\"}\r\n        /></FadeIn>\r\n    </InfoContainer>\r\n\r\n\r\n    return (URL)\r\n}\r\n\r\nexport  {TitleContainer, DescriptionContainer, URLContainer};","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\ScheduleForm\\Containers\\DaysContainer.js",[],"C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\ScheduleForm\\Containers\\DropDownContainer.js",[],"C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\ScheduleForm\\Containers\\SubmitButton1.js",["183","184","185","186"],"import React, { useState, useEffect } from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport { LoginOutlined } from \"@ant-design/icons\";\r\nimport Button from \"../../../../UI/Button\";\r\nimport { createEventId } from \"../../event-utils\";\r\nimport { Title } from \"@material-ui/icons\";\r\nlet todayStr = new Date().toISOString().replace(/T.*$/, '') // YYYY-MM-DD of today\r\n\r\nconst SubmitButton = (props) => {\r\n  const ButtonIconColor = {\r\n    fontSize: \"20px\",\r\n    marginRight: \"9px\",\r\n    marginTop: \"4px\",\r\n  };  \r\n  const CreateEvent = { \r\n      id: createEventId(),  \r\n      title:  props.isTitle ,\r\n      description:  props.isDescription ,\r\n      Url:  props.isURL ,\r\n      start:  props.isStartingDate ,\r\n      end: props.isEndingData, \r\n      daysOfWeek: props.isRepeatedDays,\r\n      display: \"list-item\",\r\n      textColor: \"red\",\r\n    };\r\n\r\n  const SubmitEvent = () => { \r\n    return(\r\n      props.isEvent((oldarr) => [...oldarr, CreateEvent]),\r\n      props.isCallingCalendar(false)\r\n    )\r\n  };\r\n\r\n  const SubmitButton = (\r\n    <FadeIn>\r\n      <Button\r\n        width={\"120px\"}\r\n        marginBottomValue={\"10px\"}\r\n        marginLeftValue={\"35%\"}\r\n        fontSizeValue={\"20px\"}\r\n        borderRadiusValue={\"15px\"}\r\n        IsCalledValue={\"hover\"}\r\n        BorderValue=\"solid\"\r\n        borderWidthValue=\"thin\"\r\n        paddingInputValue=\"2px\"\r\n        onClick={SubmitEvent}\r\n        text={\"Submit\"}\r\n        icon={<LoginOutlined style={ButtonIconColor} />}\r\n      />\r\n    </FadeIn>\r\n  );\r\n\r\n\r\n  return SubmitButton;\r\n};\r\n\r\nexport default SubmitButton;\r\n","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\EditForm\\DeleteButton.js",["187"],"import React, { useState } from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport { DeleteFilled } from \"@ant-design/icons\";\r\nimport Button from \"../../../UI/Button\";  \r\n\r\nconst DeleteButton = (props) => {\r\n  const ButtonIconColor = {\r\n    color: props.ColorChange.IconC,\r\n    fontSize: \"20px\",\r\n    marginRight: \"9px\",\r\n    marginTop: \"4px\",\r\n  };   \r\n  \r\nconst DeleteButton = () => { \r\n    const id = props.IDofClickedEvent //the Event id\r\n    const Delete = props.EventsInfoList  //copy the Events list\r\n    props.ReturnNewEvents(Delete.filter(Event => Event.id !== id))\r\n    props.CloseModel(true)\r\n  };\r\n\r\n  const SubmitButton = (\r\n    <FadeIn>\r\n      <Button\r\n        width={\"120px\"}\r\n        marginBottomValue={\"10px\"}\r\n        marginLeftValue={\"10%\"}\r\n        fontSizeValue={\"20px\"}\r\n        borderRadiusValue={\"15px\"}\r\n        IsCalledValue={\"hover\"}\r\n        BorderValue=\"solid\"\r\n        borderWidthValue=\"thin\"\r\n        paddingInputValue=\"2px\"\r\n        onClick={DeleteButton}\r\n        text={\"Delete\"}\r\n        icon={<DeleteFilled style={ButtonIconColor} />}\r\n      />\r\n    </FadeIn>\r\n  );\r\n\r\n\r\n  return SubmitButton;\r\n};\r\n\r\nexport default DeleteButton;\r\n","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\EditForm\\EditButton.js",["188"],"import React, { useState } from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport { LoginOutlined } from \"@ant-design/icons\";\r\nimport Button from \"../../../UI/Button\";  \r\n\r\nconst EditButton = (props) => {\r\n  const ButtonIconColor = {\r\n    color: props.ColorChange.IconC,\r\n    fontSize: \"20px\",\r\n    marginRight: \"9px\",\r\n    marginTop: \"4px\",\r\n  };   \r\n\r\n//   const SubmitEvent = () => { \r\n//     return(\r\n//     //   props.isEvent((oldarr) => [...oldarr, CreateEvent]),\r\n//     //   props.isCallingCalendar(false)\r\n//     )\r\n//   };\r\n\r\n  const SubmitButton = (\r\n    <FadeIn>\r\n      <Button\r\n        width={\"120px\"}\r\n        marginBottomValue={\"10px\"}\r\n        marginLeftValue={\"100px\"}\r\n        fontSizeValue={\"20px\"}\r\n        borderRadiusValue={\"15px\"}\r\n        IsCalledValue={\"hover\"}\r\n        BorderValue=\"solid\"\r\n        borderWidthValue=\"thin\"\r\n        paddingInputValue=\"2px\"\r\n        // onClick={SubmitEvent}\r\n        text={\"Edit\"}\r\n        icon={<LoginOutlined style={ButtonIconColor} />}\r\n      />\r\n    </FadeIn>\r\n  );\r\n\r\n\r\n  return SubmitButton;\r\n};\r\n\r\nexport default EditButton;\r\n","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\ScheduleForm\\Containers\\DataCollection\\TimeSelected.js",[],"C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\ScheduleForm\\Containers\\DataCollection\\RepeatedDaysSelected.js",["189"],"import React, { useState } from \"react\";\r\nimport FadeIn  from 'react-fade-in';\r\nimport Inputdata from '../../../../../UI/UserInput';\r\nimport { createEventId } from \"../../../event-utils\";\r\n\r\n\r\nconst RepeatDaySelected = (props) => {\r\n    const [NumberOfRepeatedDays,ChangeNumberOfRepeatedDays] = useState([]) \r\n    const [Days,changeDays] = useState({\r\n        Sunday: {id: \"0\", value: false},\r\n        Monday: {id: \"1\", value: false},\r\n        Tuesday: {id: \"1\", value: false},\r\n        Wednesday: {id: \"3\", value: false},\r\n        Thursday: {id: \"4\", value: false},\r\n        Friday: {id: \"5\", value: false},\r\n        Saturday: {id: \"6\", value: false}\r\n    })\r\n    const ChoosenDay = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'] \r\n    const handleRepeatedDays = (e) => {\r\n        const newDays = {...Days}\r\n        const onchangeValue = e.target.value\r\n        newDays[onchangeValue].value = !newDays[onchangeValue].value\r\n        changeDays(newDays)\r\n        //Returning the value of id of each day if it is clicked \r\n        ChangeNumberOfRepeatedDays(Object.values(Days).map(item => {\r\n            if (item.value) return item.id\r\n        }).filter(item => item))\r\n    }\r\n    \r\n    const RepeatedDayContainer = (DayValue,OnChangeInputValue) => {\r\n        return [<Inputdata \r\n            key={NumberOfRepeatedDays.id + createEventId()}\r\n            inputType={\"checkbox\"}\r\n            name=\"title\"\r\n            widthValue={\"20px\"}\r\n            paddingVale={\"2px\"}\r\n            outlineValue={\"none\"}\r\n            fontSizeValue={\"1.2em\"}\r\n            fontFamilyValue={\"inherit\"}\r\n            IsCalledValue={\"FOCUS\"} \r\n            borderRadiusValue= {\"7px\"}\r\n            backGroundColorValue={ props.RecievedColor.UserInputBGC}\r\n            FontColorValue={props.RecievedColor.UserInputFC}\r\n            PlaceHolderColorValue={props.RecievedColor.UserInputPHC}\r\n            borderColorValue={props.RecievedColor.BorderColor} \r\n            BorderValue={\"solid\"}\r\n            borderWidthValue={\"thin\"}\r\n            marginRightValue={\"5px\"}\r\n            marginTopValue={\"4px\"}\r\n            checked={Days[DayValue].value}\r\n            onchangeValue = {OnChangeInputValue}\r\n            InputValue = {DayValue}\r\n            ></Inputdata>,\r\n            <label key={NumberOfRepeatedDays.id} style={{marginRight: \"10px\"}}>{DayValue}</label>]\r\n        }\r\n        \r\n    const LineOne = [RepeatedDayContainer(ChoosenDay[0],handleRepeatedDays),\r\n                     RepeatedDayContainer(ChoosenDay[1],handleRepeatedDays),\r\n                     RepeatedDayContainer(ChoosenDay[2],handleRepeatedDays),\r\n                     RepeatedDayContainer(ChoosenDay[3],handleRepeatedDays)]\r\n    const LineTwo = [RepeatedDayContainer(ChoosenDay[4],handleRepeatedDays),\r\n                     RepeatedDayContainer(ChoosenDay[5],handleRepeatedDays),\r\n                     RepeatedDayContainer(ChoosenDay[6],handleRepeatedDays)]\r\n    \r\n    props.ValueOfRepeatedDays(NumberOfRepeatedDays);\r\n    return (  \r\n    <FadeIn>\r\n        <div style={{display: \"flex\",width: \"50px\", flexDirection: \"row\"}}>\r\n             {LineOne} \r\n        </div>\r\n        <div style={{\r\n            display: \"flex\",\r\n            width: \"50px\", \r\n            flexDirection: \"row\", \r\n            marginTop: \"10px\", \r\n            marginLeft: \"70px\", \r\n            marginBottom: \"8px\"}}\r\n        >\r\n             {LineTwo} \r\n        </div>\r\n    </FadeIn>\r\n       )\r\n}\r\n\r\nexport default RepeatDaySelected;","C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\UI\\Select.js",[],"C:\\Users\\amohamed\\Desktop\\project\\notesk\\src\\Routes\\Calendar\\ScheduleForm\\Containers\\DataCollection\\OptionsForm.js",["190"],"import React, { useState } from \"react\";\r\nimport { createEventId } from \"../../../event-utils\";\r\n\r\n//this is for the hour input \r\nconst HourValue = (props) => {\r\n\r\n    const Hours = ['01','02','03','04','05','06','07','08','09','10','11','12']\r\n    const DailyHours = (\r\n        [Hours.map((Hour, index) => \r\n            <option disabled={props.DisabledHour}  key={index.id + createEventId()} value={Hour}>{Hour}</option>)]\r\n        )\r\n    return(DailyHours)\r\n}\r\nconst MinutsValue = (props) => {\r\n\r\n    //this is for the hour input \r\n    const Minuts = ['05','10','15','20','25','30','35','40','45','50','55']\r\n    const DailyMinut =(\r\n        [Minuts.map((Minut, index) => \r\n            <option disabled={props.DisabledMinuts} key={index.id + createEventId()} value={Minut}>{Minut}</option>)]\r\n        )\r\n    return(DailyMinut)\r\n}\r\nconst TwelveHourSystemValue = (props) => {\r\n\r\n    //this for either AM or PM\r\n    const TwelveHourSystem = ['AM','PM']\r\n    const DayDivided =(\r\n        [TwelveHourSystem.map((DayTime, index) => \r\n            <option disabled={props.DisabledHourSystem} key={index.id + createEventId()} value={DayTime}>{DayTime}</option>)]\r\n        )\r\n    return(DayDivided)\r\n}\r\nconst NumberOfYearsValue = (props) => { \r\n    //this is for the years from this year \r\n    const NumberOfYears = [ '2020','2021', '2022', '2023', '2024','2025', '2026', \r\n                            '2027', '2028', '2029', '2030', '2031', '2032','2033', \r\n                            '2034','2035', '2036', '2037', '2038', '2039','2040']\r\n    const YearContainer = (\r\n        [NumberOfYears.map((year, index) => <option    key={index.id + createEventId()} value={year}>{year}</option>)]\r\n    )\r\n    \r\n    return(\r\n        YearContainer\r\n        )\r\n}\r\nconst NumberOfMonthsValue = (props) => { \r\n    //this is for the months in a year \r\n    const NumberOfMonths = ['01','02','03','04','05','06','07','08','09','10','11','12']\r\n    const MonthContainer = (\r\n        [NumberOfMonths.map((month, index) => <option  key={index.id + createEventId()}  value={month}>{month}</option>)]\r\n        )\r\n    return(MonthContainer)\r\n}\r\nconst NumberOfDaysValue = (props) => { \r\n    //this is for the days in a Month \r\n    const NumberOfDays = ['01','02','03','04','05','06','07','08','09','10',\r\n                        '11','12','13','14','15','16','17','18','19','20',\r\n                        '21','22','23','24','25','26','27','28','29','30','31']\r\n    const DayContainer = (\r\n        [NumberOfDays.map((days,index ) => <option  key={index.id + createEventId()} value={days}>{days}</option>)]\r\n        )\r\n    return(DayContainer)\r\n}\r\nconst ColorOptionsValue = () => {\r\n\r\n    //this is for the days in a Month \r\n    const ColorChoose = ['Choose Color','BlueViolet','Black','CornflowerBlue','DarkMagenta','DimGrey',\r\n                            'DodgerBlue','Fuchsia','MidnightBlue','Purple','Salmon']\r\n    const ColorContainer = (\r\n        [ColorChoose.map((Colors,index ) => <option  key={index.id + createEventId()} value={Colors}>{Colors}</option>)]\r\n        )\r\n    return(ColorContainer)\r\n}\r\n\r\nexport {HourValue, MinutsValue, TwelveHourSystemValue, \r\n        NumberOfYearsValue, NumberOfMonthsValue, NumberOfDaysValue, \r\n        ColorOptionsValue};\r\n",{"ruleId":"191","replacedBy":"192"},{"ruleId":"193","replacedBy":"194"},{"ruleId":"195","severity":1,"message":"196","line":2,"column":8,"nodeType":"197","messageId":"198","endLine":2,"endColumn":14},{"ruleId":"195","severity":1,"message":"196","line":2,"column":8,"nodeType":"197","messageId":"198","endLine":2,"endColumn":14},{"ruleId":"195","severity":1,"message":"199","line":5,"column":8,"nodeType":"197","messageId":"198","endLine":5,"endColumn":17},{"ruleId":"200","severity":1,"message":"201","line":36,"column":7,"nodeType":"202","messageId":"203","endLine":36,"endColumn":16},{"ruleId":"195","severity":1,"message":"204","line":43,"column":10,"nodeType":"197","messageId":"198","endLine":43,"endColumn":27},{"ruleId":"195","severity":1,"message":"205","line":7,"column":8,"nodeType":"197","messageId":"198","endLine":7,"endColumn":17},{"ruleId":"206","severity":1,"message":"207","line":78,"column":48,"nodeType":"208","messageId":"203","endLine":78,"endColumn":50},{"ruleId":"206","severity":1,"message":"207","line":79,"column":24,"nodeType":"208","messageId":"203","endLine":79,"endColumn":26},{"ruleId":"209","severity":1,"message":"210","line":3,"column":1,"nodeType":"211","messageId":"212","endLine":5,"endColumn":15},{"ruleId":"195","severity":1,"message":"213","line":3,"column":52,"nodeType":"197","messageId":"198","endLine":3,"endColumn":67},{"ruleId":"195","severity":1,"message":"214","line":10,"column":7,"nodeType":"197","messageId":"198","endLine":10,"endColumn":20},{"ruleId":"195","severity":1,"message":"215","line":52,"column":19,"nodeType":"197","messageId":"198","endLine":52,"endColumn":30},{"ruleId":"195","severity":1,"message":"216","line":2,"column":24,"nodeType":"197","messageId":"198","endLine":2,"endColumn":34},{"ruleId":"195","severity":1,"message":"217","line":1,"column":17,"nodeType":"197","messageId":"198","endLine":1,"endColumn":25},{"ruleId":"206","severity":1,"message":"207","line":63,"column":50,"nodeType":"208","messageId":"203","endLine":63,"endColumn":52},{"ruleId":"195","severity":1,"message":"217","line":1,"column":17,"nodeType":"197","messageId":"198","endLine":1,"endColumn":25},{"ruleId":"195","severity":1,"message":"217","line":1,"column":17,"nodeType":"197","messageId":"198","endLine":1,"endColumn":25},{"ruleId":"195","severity":1,"message":"218","line":1,"column":27,"nodeType":"197","messageId":"198","endLine":1,"endColumn":36},{"ruleId":"195","severity":1,"message":"219","line":6,"column":10,"nodeType":"197","messageId":"198","endLine":6,"endColumn":15},{"ruleId":"195","severity":1,"message":"220","line":7,"column":5,"nodeType":"197","messageId":"198","endLine":7,"endColumn":13},{"ruleId":"195","severity":1,"message":"217","line":1,"column":17,"nodeType":"197","messageId":"198","endLine":1,"endColumn":25},{"ruleId":"195","severity":1,"message":"217","line":1,"column":17,"nodeType":"197","messageId":"198","endLine":1,"endColumn":25},{"ruleId":"221","severity":1,"message":"222","line":25,"column":65,"nodeType":"223","messageId":"224","endLine":25,"endColumn":67},{"ruleId":"195","severity":1,"message":"217","line":1,"column":17,"nodeType":"197","messageId":"198","endLine":1,"endColumn":25},"no-native-reassign",["225"],"no-negated-in-lhs",["226"],"no-unused-vars","'styled' is defined but never used.","Identifier","unusedVar","'EventForm' is defined but never used.","no-dupe-keys","Duplicate key 'textColor'.","ObjectExpression","unexpected","'SelectedEndedData' is assigned a value but never used.","'AppButton' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'UserAddOutlined' is defined but never used.","'InfoContainer' is assigned a value but never used.","'ChangeURLPH' is assigned a value but never used.","'formatDate' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'Title' is defined but never used.","'todayStr' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]