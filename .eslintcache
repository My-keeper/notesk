[{"C:\\Users\\amohamed\\project\\notesk\\src\\index.js":"1","C:\\Users\\amohamed\\project\\notesk\\src\\App.js":"2","C:\\Users\\amohamed\\project\\notesk\\src\\serviceWorker.js":"3","C:\\Users\\amohamed\\project\\notesk\\src\\API\\Weather.js":"4","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\Calendar.js":"5","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Notes\\Notes.js":"6","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Signup\\Signup.js":"7","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Login\\Login.js":"8","C:\\Users\\amohamed\\project\\notesk\\src\\API\\API.js":"9","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\CalendarCollection.js":"10","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Signup\\SignupForm.js":"11","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Login\\LoginForm.js":"12","C:\\Users\\amohamed\\project\\notesk\\src\\UI\\NavBar.js":"13","C:\\Users\\amohamed\\project\\notesk\\src\\UI\\Imag.js":"14","C:\\Users\\amohamed\\project\\notesk\\src\\UI\\UserInput.js":"15","C:\\Users\\amohamed\\project\\notesk\\src\\UI\\Footer.js":"16","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Notes\\Note\\Note.js":"17","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Notes\\CreateNote\\CreateNote.js":"18","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\CalendarForm.js":"19","C:\\Users\\amohamed\\project\\notesk\\src\\UI\\Switch.js":"20","C:\\Users\\amohamed\\project\\notesk\\src\\UI\\Button.js":"21","C:\\Users\\amohamed\\project\\notesk\\src\\UI\\UserIcon.js":"22","C:\\Users\\amohamed\\project\\notesk\\src\\UI\\Modal.js":"23","C:\\Users\\amohamed\\project\\notesk\\src\\UI\\TextArea.js":"24","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\ScheduleForm\\Schedule.js":"25","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\EditForm\\EvenForm.js":"26","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\event-utils.js":"27","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\EditForm\\EditButton.js":"28","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\EditForm\\EditEventForm.js":"29","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\EditForm\\DeleteButton.js":"30","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\ScheduleForm\\Containers\\SubmitButton.js":"31","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\ScheduleForm\\Containers\\TextInputContainer.js":"32","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\ScheduleForm\\Containers\\Date-TimeContainer.js":"33","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\ScheduleForm\\Containers\\DaysContainer.js":"34","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\EditForm\\Date-TimeContainer.js":"35","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\EditForm\\TextInputContainer.js":"36","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\DataCollection\\RepeatedDaysSelected.js":"37","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\DataCollection\\TimeSelected.js":"38","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\DataCollection\\DateSelected.js":"39","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\DataCollection\\OptionsForm.js":"40","C:\\Users\\amohamed\\project\\notesk\\src\\UI\\Select.js":"41","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\EditForm\\submitChanges.js":"42"},{"size":497,"mtime":1614689641640,"results":"43","hashOfConfig":"44"},{"size":2650,"mtime":1614863453962,"results":"45","hashOfConfig":"44"},{"size":5227,"mtime":1614689641642,"results":"46","hashOfConfig":"44"},{"size":1136,"mtime":1614690126547,"results":"47","hashOfConfig":"44"},{"size":559,"mtime":1614862770628,"results":"48","hashOfConfig":"44"},{"size":2053,"mtime":1614690126615,"results":"49","hashOfConfig":"44"},{"size":489,"mtime":1614860571753,"results":"50","hashOfConfig":"44"},{"size":434,"mtime":1614690126607,"results":"51","hashOfConfig":"44"},{"size":327,"mtime":1614689641597,"results":"52","hashOfConfig":"44"},{"size":2965,"mtime":1614862131217,"results":"53","hashOfConfig":"44"},{"size":10998,"mtime":1614861749632,"results":"54","hashOfConfig":"44"},{"size":4261,"mtime":1614861792272,"results":"55","hashOfConfig":"44"},{"size":3514,"mtime":1614860571756,"results":"56","hashOfConfig":"44"},{"size":458,"mtime":1614690126626,"results":"57","hashOfConfig":"44"},{"size":4385,"mtime":1614690126633,"results":"58","hashOfConfig":"44"},{"size":521,"mtime":1614689641630,"results":"59","hashOfConfig":"44"},{"size":6058,"mtime":1614690126613,"results":"60","hashOfConfig":"44"},{"size":6099,"mtime":1614689641616,"results":"61","hashOfConfig":"44"},{"size":5615,"mtime":1614863545895,"results":"62","hashOfConfig":"44"},{"size":4943,"mtime":1614863476019,"results":"63","hashOfConfig":"44"},{"size":2970,"mtime":1614690126621,"results":"64","hashOfConfig":"44"},{"size":965,"mtime":1614689641637,"results":"65","hashOfConfig":"44"},{"size":3512,"mtime":1614690126629,"results":"66","hashOfConfig":"44"},{"size":3062,"mtime":1614689641636,"results":"67","hashOfConfig":"44"},{"size":9337,"mtime":1614860571750,"results":"68","hashOfConfig":"44"},{"size":5594,"mtime":1614866036679,"results":"69","hashOfConfig":"44"},{"size":398,"mtime":1614689641609,"results":"70","hashOfConfig":"44"},{"size":1112,"mtime":1614860571733,"results":"71","hashOfConfig":"44"},{"size":8971,"mtime":1614866036677,"results":"72","hashOfConfig":"44"},{"size":1169,"mtime":1614690126578,"results":"73","hashOfConfig":"44"},{"size":1608,"mtime":1614862770628,"results":"74","hashOfConfig":"44"},{"size":4738,"mtime":1614860571748,"results":"75","hashOfConfig":"44"},{"size":9273,"mtime":1614860571739,"results":"76","hashOfConfig":"44"},{"size":1170,"mtime":1614860571740,"results":"77","hashOfConfig":"44"},{"size":11900,"mtime":1614860571729,"results":"78","hashOfConfig":"44"},{"size":5004,"mtime":1614860571737,"results":"79","hashOfConfig":"44"},{"size":3458,"mtime":1614860571726,"results":"80","hashOfConfig":"44"},{"size":4175,"mtime":1614860571727,"results":"81","hashOfConfig":"44"},{"size":5600,"mtime":1614860571723,"results":"82","hashOfConfig":"44"},{"size":3150,"mtime":1614860571724,"results":"83","hashOfConfig":"44"},{"size":3210,"mtime":1614690126630,"results":"84","hashOfConfig":"44"},{"size":1233,"mtime":1614866067443,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"wpzadv",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"88"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"88"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"88"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"88"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"88"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"88"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"88"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"88"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"88"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"88"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"88"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"88"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"88"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"88"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\amohamed\\project\\notesk\\src\\index.js",[],["185","186"],"C:\\Users\\amohamed\\project\\notesk\\src\\App.js",[],"C:\\Users\\amohamed\\project\\notesk\\src\\serviceWorker.js",[],"C:\\Users\\amohamed\\project\\notesk\\src\\API\\Weather.js",[],"C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\Calendar.js",[],"C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Notes\\Notes.js",[],"C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Signup\\Signup.js",[],"C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Login\\Login.js",[],"C:\\Users\\amohamed\\project\\notesk\\src\\API\\API.js",[],"C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\CalendarCollection.js",["187","188","189"],"import React, { useState } from \"react\"; \r\nimport CalendarForm from \"./CalendarForm\";\r\nimport ScheduleForm from \"./ScheduleForm/Schedule\";\r\nimport styled from \"styled-components\";\r\nimport EventForm from \"./EditForm/EvenForm\"\r\n\r\nconst CalenderContainer = styled.div`\r\n    margin: 10px;\r\n    font-family: Arial, Helvetica Neue, Helvetica, sans-serif;\r\n    font-size: 16px;\r\n    color: cornflowerblue;   \r\n`;\r\nconst CalendarCollection = (props) => {\r\n  //Collection of Events\r\n  const [currentEvents, ChangeEventList] = useState([\r\n    {\r\n      id: \"1\",\r\n      title: \"Testoing for more \",\r\n      start: \"2021-03-13T12:30:00\",\r\n      end: \"2021-03-14T13:30:00\",\r\n      textColor: \"pink\",\r\n      description: \"lets play some game s\",\r\n      display: \"list-item\",\r\n      backgroundColor: \"black\",\r\n      Url: \"http://localhost:3000/calendar\",\r\n      description: \"lets see if it will work\"\r\n    },\r\n    {\r\n      id: \"3\",\r\n      title: \"Doc appoinmnet \",\r\n      start: \"2021-03-13\",\r\n      end: \"2021-03-13\",\r\n      startTime: \"10:45:00\",\r\n      endTime: \"12:45:00\",\r\n      textColor: \"pink\",\r\n      daysOfWeek: [\"1\"], //https://fullcalendar.io/docs/recurring-events \r\n      display: \"list-item\",\r\n      textColor: \"black\",\r\n    },\r\n  ]); \r\n  const [showSchedule, ChangeShowSchedule ] =useState(false) // to show the shedule model \r\n  const [SelectedStartedData, ChangeStartedData] = useState() //started selected data \r\n  const [SelectedEndedData, ChangeEndedData] = useState(); // ended slected data  \r\n  //the calendar form \r\n  const calendarForm = \r\n    (<div style={{zIndex:\"1\", filter: !showSchedule ? null : \"blur(4px)\",\r\n          pointerEvents:!showSchedule ? null : \"none\"}}>\r\n        <CalendarForm\r\n          CalendarColor={props.RecieveColor} //send color form App\r\n          SendingEvents={currentEvents} //Pass down the list of eventsRecieveColor\r\n          CallingSchedule={(value) => ChangeShowSchedule(value)} //to call schedule\r\n          GetStartDate={(value) => ChangeStartedData(value)} //getting started clicked data\r\n          GetEndDate={(value) => ChangeEndedData(value)} //getting ended clicked data \r\n          ChangeEvents={(value) => ChangeEventList(value)}\r\n        />\r\n    </div>\r\n    );\r\n  //scheduling event is called \r\n  const scheduleForm = (\r\n    <div style={{ zIndex: \"3\", position: \"absolute\", left: \"35%\", top: \"10%\" }}>\r\n      <ScheduleForm\r\n        submitEventValues={(value) => ChangeEventList(value)}\r\n        ScheduleColor={props.RecieveColor} //send color form App\r\n        CallingCalendar={(value) => ChangeShowSchedule(value)} //to call calendar back \r\n        SendSelectedSD={SelectedStartedData} //Selected Start Data\r\n        SendSelectedED={SelectedEndedData} //Selected End Data\r\n        />\r\n    </div>\r\n  ); \r\n  return (\r\n    <CalenderContainer >\r\n      {showSchedule ? scheduleForm : null}  \r\n      {showSchedule? calendarForm : calendarForm} \r\n    </CalenderContainer>\r\n  );\r\n};\r\nexport default CalendarCollection;\r\n","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Signup\\SignupForm.js",[],"C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Login\\LoginForm.js",[],"C:\\Users\\amohamed\\project\\notesk\\src\\UI\\NavBar.js",["190","191"],"import React, {useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport SwitchIcon from './Switch'\r\nimport FadeIn from 'react-fade-in';\r\nimport UserIcon from \"./UserIcon\";\r\nimport { LoginOutlined, LogoutOutlined,AlipayOutlined } from \"@ant-design/icons\";\r\nimport NotesIcon from '@material-ui/icons/Notes';\r\nimport CalendarTodayIcon from '@material-ui/icons/CalendarToday';\r\nimport EventAvailableIcon from '@material-ui/icons/EventAvailable';\r\nimport NoteAddOutlinedIcon from '@material-ui/icons/NoteAddOutlined';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst StyledNavBar = styled(FadeIn)` \r\n    align-items: center; \r\n    justify-content: space-between;\r\n    height: 50px;\r\n    background-color: #f5ba13;\r\n    margin: auto -16px;\r\n    padding: 16px 32px;\r\n    box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.3);\r\n    display: flex;\r\n`;\r\nconst DisplayedUsername = styled.span`\r\n  align-items: center;\r\n  transform: translate(0, 30%);\r\n  color: ${(props) => ( props.TextColorInput ? props.TextColorInput : \"\")};\r\n  margin-top: 1px;\r\n`;\r\nconst RightNavBarItems = styled.div`\r\n  display: flex;\r\n  width: 500px;\r\n  justify-content: flex-end;\r\n`;\r\nconst LeftNavBarItems = styled.div`\r\n  display: flex;\r\n  width: 450px;\r\n  justify-content: flex-start;\r\n`;\r\nconst NavBar = (props) => {\r\n  const IconStyle = {\r\n    marginLeft: \"5px\",\r\n    fontSize: \"28px\" ,\r\n    color: props.RecieveColor.NavIconColor\r\n  }\r\n  //Close is not hovered on color style\r\n  const VisibilityStle1 = {\r\n    marginTop: \"13px\",\r\n    marginRight: \"8px\",\r\n    fontSize: \"28px\",\r\n    color: props.RecieveColor.NavIconColor\r\n };\r\n  //Close is hovered on color style\r\n  const VisibilityStle2 = {\r\n      marginTop: \"13px\",\r\n      marginRight: \"4px\",\r\n      fontSize: \"34px\",\r\n      color: props.RecieveColor.NavIconColor\r\n  };\r\n  //This is for change to calendar link\r\n  const [isCalendar, ChangeIsCalendar] = useState(true);\r\n  const GoToCalendar = isCalendar ? \r\n      (<CalendarTodayIcon onMouseEnter={() => ChangeIsCalendar(false)} style={VisibilityStle1} />)  \r\n      : \r\n      (<Link to={\"/calendar\"}> \r\n        <EventAvailableIcon  onMouseLeave={() => ChangeIsCalendar(true)} style={VisibilityStle2} />\r\n        </Link>)\r\n    \r\n  //This is for change to Notes link\r\n  const [isNote, ChangeIsNote] = useState(true);\r\n  const GoToNote = isNote ? \r\n      (<NoteAddOutlinedIcon onMouseEnter={() => ChangeIsNote(false)} style={VisibilityStle1} />)  \r\n      : \r\n      (<Link to={\"/\"} >\r\n      <NotesIcon   onMouseLeave={() => ChangeIsNote(true)} style={VisibilityStle2} />\r\n      </Link>)\r\n  //This is for the Login\r\n  const GoToLogin =<Link to={props.CallingPage == \"Signin\" ? \"/login\" : \"/signup\"} >\r\n    {props.CallingPage == \"Signin\" ?\r\n        <LoginOutlined  style={VisibilityStle1} />\r\n    :\r\n        <LogoutOutlined style={VisibilityStle1} />\r\n      }\r\n    </Link>\r\n\r\n  return(\r\n    <StyledNavBar>\r\n      <LeftNavBarItems>\r\n        <FadeIn><AlipayOutlined style={IconStyle}/></FadeIn>\r\n      </LeftNavBarItems>\r\n\r\n      <RightNavBarItems>\r\n        {GoToCalendar}\r\n        {GoToNote}\r\n        <SwitchIcon OnChangedColor={props.ColorChanged}/>\r\n        {GoToLogin}\r\n        <UserIcon username={\"Amr R. Mohamed\"} OnChangedColor={props.RecieveColor}/>\r\n        <DisplayedUsername \r\n          TextColorInput={props.RecieveColor.UserIconTextColor}>\r\n          <span style={{ fontWeight: \"bold\"}}>{\"Amr R. Mohamed\"}</span>\r\n        </DisplayedUsername>\r\n      </RightNavBarItems>\r\n    </StyledNavBar>\r\n  ) \r\n}\r\n\r\n\r\n\r\n\r\nexport default NavBar;","C:\\Users\\amohamed\\project\\notesk\\src\\UI\\Imag.js",[],"C:\\Users\\amohamed\\project\\notesk\\src\\UI\\UserInput.js",[],"C:\\Users\\amohamed\\project\\notesk\\src\\UI\\Footer.js",[],"C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Notes\\Note\\Note.js",[],"C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Notes\\CreateNote\\CreateNote.js",[],"C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\CalendarForm.js",[],"C:\\Users\\amohamed\\project\\notesk\\src\\UI\\Switch.js",[],"C:\\Users\\amohamed\\project\\notesk\\src\\UI\\Button.js",[],"C:\\Users\\amohamed\\project\\notesk\\src\\UI\\UserIcon.js",[],"C:\\Users\\amohamed\\project\\notesk\\src\\UI\\Modal.js",[],"C:\\Users\\amohamed\\project\\notesk\\src\\UI\\TextArea.js",[],"C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\ScheduleForm\\Schedule.js",["192","193"],"import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport NoteContainer from \"../../../UI/Modal\"; \r\nimport FadeIn from \"react-fade-in\";\r\nimport {TitleContainer,DescriptionContainer,URLContainer} from \"./Containers/TextInputContainer\";\r\nimport {CalenderContianer,TimerContainer} from \"./Containers/Date-TimeContainer\";\r\nimport RDContainer from \"./Containers/DaysContainer\";\r\nimport SubmitButton from \"./Containers/SubmitButton\";\r\nimport { CloseCircleOutlined } from \"@ant-design/icons\"; \r\nimport DateRangeIcon from '@material-ui/icons/DateRange';\r\nimport AddAlertIcon from '@material-ui/icons/AddAlert';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\r\n\r\nconst EachateContainer = styled.div`\r\n    width: 400px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: ${props => props.JustifyContentCalue};\r\n    margin: 4px;\r\n`\r\n\r\nconst Schedule = (props) => {\r\n    //All Component Color Stle\r\n    const IconColor = { \r\n        color : props.ScheduleColor.IconC, \r\n        fontSize:\"24px\", \r\n        marginLeft:\"10px\"\r\n    }\r\n    //Visable and unvisable color style \r\n    const VisibilityStle = {\r\n        marginRight: \"4px\", \r\n        marginLeft:\"4px\",\r\n        marginTop:\"6px\" , \r\n        fontSize: \"21px\", \r\n        color : props.ScheduleColor.IconC\r\n    }\r\n        \r\n    //Close ICion Area\r\n    const CloseIcon = \r\n    (<CloseCircleOutlined\r\n        onClick={()=> props.CallingCalendar(false)} \r\n        style={{marginRight: \"4px\", marginLeft: \"95%\", marginBottom: \"15px\",\r\n            fontSize: \"26px\", color: props.ScheduleColor.IconC}} // send the color list from the parent App file \r\n    />)\r\n\r\n    //Title Area\r\n    const [getTitle, ChangeTitle] = useState(\"\");\r\n    const [TitlePH, ChangeTitlePH] = useState(\"Title ...\");\r\n    const Title = <TitleContainer\r\n            SubmitTitle={(value) => ChangeTitle(value)} //this is to return input value of the title and then send it to submit model\r\n            SubmitTitlePlaceHolder={TitlePH} //this is to send the placeholder for the title area\r\n            ScheduleColor={props.ScheduleColor}  // send the color list from the parent App file \r\n        />  \r\n    \r\n    //Description Area\r\n    const [getDescription, ChangeDescription] = useState(\"\");\r\n    const [DescriptionPH, ChangeDescriptionPH] = useState(\"Description ...\");\r\n    const Description = (\r\n        <DescriptionContainer\r\n        SubmitDescription={(value) => ChangeDescription(value)}\r\n        SubmitDescriptionPlaceHolder={DescriptionPH}\r\n        ScheduleColor={props.ScheduleColor}\r\n        />\r\n    );\r\n\r\n    //URL Area\r\n    const [getURL, ChangeURL] = useState();\r\n    const [URLPH, ChangeURLPH] = useState(\"Optional Attached Link For Description ...\");\r\n    const URL = (\r\n        <URLContainer\r\n        URLOption={(value) => ChangeURL(value)}\r\n        SubmitURLPH={URLPH}\r\n        ScheduleColor={props.ScheduleColor}\r\n        />\r\n    );\r\n     \r\n    //This is to show either the data or repeated days\r\n    const [isShowTime, ChangeisShowTime] = useState(true) //to show the option to change the Time that the user selected\r\n    const ShowData = <div onClick={()=>ChangeisShowTime(!isShowTime)}>\r\n        {isShowTime ?  <RadioButtonUncheckedIcon style={VisibilityStle} /> : <RadioButtonCheckedIcon style={VisibilityStle} /> }\r\n    </div>\r\n    const isData = <EachateContainer>\r\n            <DateRangeIcon style={IconColor}/>   \r\n            <span style={{paddingTop: \"4px\" ,fontSize: \"1em\", marginLeft: \"50px\"}}>Selected Data of Event</span>\r\n        </EachateContainer>\r\n    const isRepeated = <EachateContainer>\r\n            <AddAlertIcon style={IconColor}/>   \r\n            <span style={{paddingTop: \"4px\" ,fontSize: \"1em\", marginLeft: \"20px\"}}>Select days of repeated Event and its Time</span>\r\n        </EachateContainer>\r\n    const IcionArea = <EachateContainer> \r\n            {ShowData}\r\n            {isShowTime ? isData  :isRepeated }\r\n        </EachateContainer>\r\n\r\n    // Data From and To\r\n    const [getFormDate, ChangeFormDate] = useState(); //this is the data that will be send to submit model to be added to the event list \r\n    const [getToDate, ChangeToDate] = useState();  //this is the data that will be send to submit model to be added to the event list \r\n    console.log(getToDate);\r\n    \r\n    const StartDate= props.SendSelectedSD //This is the selected data in calendar\r\n    const EndDate= props.SendSelectedED//This is the selected data in calendar  \r\n    const Data = ( !isShowTime ? null :\r\n        <CalenderContianer\r\n        SendSD={StartDate} //This is to send back the selected started data\r\n        SendED={EndDate} //This is to send back the selected ended data\r\n        GetFromDate={(value) => ChangeFormDate(value)} //Returning the selected data that the user chose \r\n        GetToDate={(value) => ChangeToDate(value)} //Returning the selected data that the user chose \r\n        ScheduleColor={props.ScheduleColor} // send the color list from the parent App file  \r\n        /> \r\n    );\r\n\r\n    //This is for the time\r\n    const [StartHours, ChangeStartHour] = useState(); //have returned starting hour if time is needed\r\n    const [StartMinuts, ChangeStartMinuts] = useState(); //have returned starting minut if time is needed \r\n    const [EndHours, ChangeEndHour] = useState(); //have returned Ending hour if time is needed\r\n    const [EndMinuts, ChangeEndMinuts] = useState(); //have returned Ending minut if time is needed \r\n    const [TimeClicked, ChangeTimeClicked] = useState() //this to make sure that time is included or not and show the repeated days model\r\n    const [EditTime, ChangeEditedTime ] = useState(\"\")\r\n    const Time = (\r\n        <TimerContainer\r\n        SendShowTime={isShowTime}\r\n        FromHourSelected={(value) => ChangeStartHour(value)} // return starting hour if time is needed\r\n        FromMinutsSelected={(value) => ChangeStartMinuts(value)} // return starting minut if time is needed \r\n        ToHourSelected={(value) => ChangeEndHour(value)} // return Ending hour if time is needed\r\n        ToMinutsSelected={(value) => ChangeEndMinuts(value)} // return Ending minut if time is needed \r\n        ScheduleColor={props.ScheduleColor} // send the color list from the parent App file  \r\n        GetIsSelectedDate={(value)=>ChangeEditedTime(value)} //To pass down to Time to show when the user want to chagne time\r\n        isTime={(value) => ChangeTimeClicked(value)}\r\n        />\r\n        );\r\n        \r\n    //this is for number of rebeated days \r\n    const [GetRepeatedDays, ChangeRepeatedDays] = useState()\r\n    const RepeatedDays =( isShowTime ? null :<RDContainer\r\n        ScheduleColor={props.ScheduleColor} // send the color list from the parent App file  \r\n        SubmitNumberOfRP={(value) => ChangeRepeatedDays(value)} //returning the value of repeated days \r\n        />\r\n    );\r\n    //Submit Buton \r\n    const Submit = (\r\n      <SubmitButton\r\n        isCallingCalendar={(value) => props.CallingCalendar(value)} //return the close value to return to calender from the submit model\r\n        isTitle={getTitle} //the Title value\r\n        CheckTitlePH={(value) => ChangeTitlePH(value)} //this is to change the title place holder if there is no title\r\n        isDescription={getDescription} //the Description value\r\n        CheckDescriptionPH={(value) => ChangeDescriptionPH(value)} //this is to change the description placeholder if there is no placeholder\r\n        isURL={getURL} //the URL value\r\n        // isStartingDate= {TimeClicked ?(getFormDate+'T12:00:00') : (getFormDate+\"T\"+StartHours+\":\"+StartMinuts+\":00\")} //the value of the Starting data\r\n        isStartingDate={isShowTime ? getFormDate + \"T12:00:00\" : undefined} //the value of the Starting data\r\n        isRepeatedDays={!isShowTime ? GetRepeatedDays : undefined} //Values of Repeated Days\r\n        isStartingTime={!isShowTime ? (TimeClicked ?('12:00:00') :(StartHours+\":\"+StartMinuts+\":00\")) : undefined} //Choose Starting Time of the repeated Event\r\n        isEndingTime={!isShowTime ? (TimeClicked ?('12:00:00') :(EndHours+\":\"+EndMinuts+\":00\")) : undefined} //Choose Ending Time of the repeated Event\r\n\r\n        isEndingData={getToDate} //the value of Ending data\r\n        isEvent={props.submitEventValues} //returning the new event to the array of objects\r\n      />\r\n    );\r\n    const ScheduleForm = (\r\n        <FadeIn>\r\n            <NoteContainer\r\n                position={\"relative\"}\r\n                width={\"520px\"}\r\n                margin={\"30px auto 20px auto\"}\r\n                padding={\"15px\"}\r\n                boxShadowValue={\"0 1px 5px rgb(138, 137, 137)\"}\r\n                borderRadiusValue={\"7px\"}\r\n                resizeValue={\"both\"}\r\n                backGroundColorValue={props.ScheduleColor.NotekBGC} //// send the color list from the parent App file \r\n                FontColorValue={props.ScheduleColor.NoteFC} //// send the color list from the parent App file \r\n                >\r\n            {CloseIcon}\r\n            {Title} \r\n            {Description}\r\n            {URL}\r\n            {IcionArea}\r\n            {Data}\r\n            {Time}\r\n            {RepeatedDays}\r\n            {Submit}\r\n            </NoteContainer> \r\n        </FadeIn>\r\n    );\r\n\r\n  return ScheduleForm;\r\n};\r\n\r\nexport default Schedule;\r\n","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\EditForm\\EvenForm.js",[],"C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\event-utils.js",[],"C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\EditForm\\EditButton.js",["194"],"import React, { useState } from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport { LoginOutlined } from \"@ant-design/icons\";\r\nimport Button from \"../../../UI/Button\";  \r\n\r\nconst EditButton = (props) => {\r\n  const ButtonIconColor = {\r\n    color: props.ColorChange.IconC,\r\n    fontSize: \"20px\",\r\n    marginRight: \"9px\",\r\n    marginTop: \"4px\",\r\n  };   \r\n\r\n\r\n//   const SubmitEvent = () => { \r\n//     return(\r\n//     //   props.isEvent((oldarr) => [...oldarr, CreateEvent]),\r\n//     //   props.isCallingCalendar(false)\r\n//     )\r\n//   };\r\n\r\n  const SubmitButton = (\r\n    <FadeIn>\r\n      <Button\r\n        width={\"120px\"}\r\n        marginBottomValue={\"10px\"}\r\n        marginLeftValue={\"100px\"}\r\n        fontSizeValue={\"20px\"}\r\n        borderRadiusValue={\"15px\"}\r\n        IsCalledValue={\"hover\"}\r\n        BorderValue=\"solid\"\r\n        borderWidthValue=\"thin\"\r\n        paddingInputValue=\"2px\"\r\n        onClick={()=>props.isEditClicked(true)}\r\n        text={\"Edit\"}\r\n        icon={<LoginOutlined style={ButtonIconColor} />}\r\n      />\r\n    </FadeIn>\r\n  );\r\n\r\n\r\n  return SubmitButton;\r\n};\r\n\r\nexport default EditButton;\r\n","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\EditForm\\EditEventForm.js",["195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211"],"import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport NoteContainer from \"../../../UI/Modal\"; \r\nimport { CloseCircleOutlined, CheckCircleOutlined, CheckCircleFilled, EditFilled, EditOutlined } from \"@ant-design/icons\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport {TitleContainer,DescriptionContainer,URLContainer} from \"./TextInputContainer\";\r\nimport {CalenderContianer,TimerContainer} from \"./Date-TimeContainer\";\r\nimport RDContainer from \"../ScheduleForm/Containers/DaysContainer\";\r\nimport SubmitButton from \"../ScheduleForm/Containers/SubmitButton\";\r\nimport DateRangeIcon from '@material-ui/icons/DateRange';\r\nimport AddAlertIcon from '@material-ui/icons/AddAlert';\r\nimport SubmitChanges from './submitChanges';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\r\n\r\nconst EachateContainer = styled.div`\r\n    width: 500px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: ${props => props.JustifyContentCalue};\r\n    margin: 4px;\r\n`\r\n\r\nconst EditEventForm = (props) => {\r\n\r\n    //All Component Color Stle\r\n    const IconColor = {\r\n      color: props.ScheduleColor.IconC,\r\n      fontSize: \"24px\",\r\n      marginTop: \"2px\",\r\n      marginLeft: \"60px\",\r\n    };\r\n    //Visable and unvisable color style \r\n    const VisibilityStle = {\r\n        marginRight: \"4px\", \r\n        marginLeft:\"4px\",\r\n        marginTop:\"7px\" , \r\n        fontSize: \"21px\", \r\n        color : props.ScheduleColor.IconC\r\n    }\r\n    //DateStyle and unDateStyle color style \r\n    const ShowDateStle = {\r\n        marginRight: \"4px\", \r\n        marginLeft:\"60px\",\r\n        marginTop:\"7px\" , \r\n        fontSize: \"18px\", \r\n        color : props.ScheduleColor.IconC\r\n    }\r\n    \r\n    // The Event information \r\n    const Header= <EachateContainer JustifyContentCalue={\"flex-end\"}>\r\n        <span style={{ \r\n            padding: \"1px\" ,paddingTop: \"1px\" , \r\n            fontSize: \"1.2em\", marginLeft: \"150px\",\r\n            color: `${props.ScheduleColor.IconC}`}}>\r\n                Event Info\r\n        </span> \r\n        <CloseCircleOutlined\r\n            onClick={()=> props.closedEventForm(true)} \r\n            style={{marginRight: \"12px\", marginLeft: \"180px\", marginBottom: \"15px\",\r\n            fontSize: \"26px\", color: props.ScheduleColor.IconC}} // send the color list from the parent App file \r\n        />\r\n    </EachateContainer>  \r\n\r\n    //Title Area\r\n    const [getTitle, ChangeTitle] = useState(\"\");\r\n    const Title = <TitleContainer\r\n            SubmitTitle={(value) => ChangeTitle(value)} //this is to return input value of the title and then send it to submit model\r\n            isEditTitle={props.getTitle} //this is to send the placeholder for the title area\r\n            ScheduleColor={props.ScheduleColor}  // send the color list from the parent App file \r\n        />  \r\n\r\n     //Description Area\r\n    const [getDescription, ChangeDescription] = useState(\"\");\r\n    const Description = (\r\n        <DescriptionContainer\r\n        SubmitDescription={(value) => ChangeDescription(value)}\r\n        isEditDescription={props.getDescription}\r\n        ScheduleColor={props.ScheduleColor}\r\n        />\r\n    );\r\n\r\n     //URL Area\r\n    const [getURL, ChangeURL] = useState();\r\n    const URL = (\r\n        <URLContainer\r\n        URLOption={(value) => ChangeURL(value)}\r\n        isEditURL={props.getURL}\r\n        ScheduleColor={props.ScheduleColor}\r\n        />\r\n    );\r\n\r\n    //This is to show either the data or repeated days\r\n    const [isShowTime, ChangeisShowTime] = useState(true) //to show the option to change the Time that the user selected\r\n    const ShowData = isShowTime ?  \r\n        <EditOutlined  \r\n            onClick={()=>ChangeisShowTime(false)}\r\n            style={VisibilityStle} \r\n        /> \r\n        : \r\n        <EditFilled \r\n            onClick={()=>ChangeisShowTime(true)}\r\n            style={VisibilityStle} \r\n        /> \r\n    //This is for the layout for Year Month Days \r\n    const InfoArea = <EachateContainer>\r\n            <DateRangeIcon style={IconColor}/>\r\n            <span style={{paddingTop: \"4px\" ,fontSize: \"1em\", marginLeft: \"20px\"}}>Selected Data</span>\r\n        </EachateContainer>\r\n    const isRepeated = <EachateContainer>\r\n            <AddAlertIcon style={IconColor}/>   \r\n            <span style={{paddingTop: \"4px\" ,fontSize: \"1em\", marginLeft: \"20px\"}}>Select days of repeated Event and its Time</span>\r\n        </EachateContainer>\r\n    //This is for the Data area or the Repeated Date area\r\n    const IcionArea = <EachateContainer> \r\n        {ShowData} \r\n        {isShowTime ? InfoArea : isRepeated }\r\n        </EachateContainer>\r\n\r\n    // Data From and To\r\n    const [getFormDate, ChangeFormDate] = useState(); //this is the data that will be send to submit model to be added to the event list \r\n    const [getToDate, ChangeToDate] = useState();  //this is the data that will be send to submit model to be added to the event list \r\n    const StartDate= props.getStartedClickedEvent //This is the selected data in calendar for edit passing down from EventForm\r\n    const EndDate= props.getEndededClickedEvent//This is the selected data in calendar  for edit passing down from EventForm\r\n    const [EditTime, ChangeEditedTime ] = useState(\"\")\r\n    const Data = ( !isShowTime ? null :\r\n        <CalenderContianer\r\n        SendSD={StartDate} //This is to send back the selected started data\r\n        SendED={EndDate} //This is to send back the selected ended data\r\n        GetFromDate={(value) => ChangeFormDate(value)} //Returning the selected data that the user chose \r\n        GetToDate={(value) => ChangeToDate(value)} //Returning the selected data that the user chose\r\n        GetIsSelectedDate={(value)=>ChangeEditedTime(value)} //To pass down to Time to show when the user want to chagne time \r\n        ScheduleColor={props.ScheduleColor} // send the color list from the parent App file  \r\n        /> \r\n    );\r\n\r\n    //This is for the time\r\n    const [StartHours, ChangeStartHour] = useState(); //have returned starting hour if time is needed\r\n    const [StartMinuts, ChangeStartMinuts] = useState(); //have returned starting minut if time is needed \r\n    const [EndHours, ChangeEndHour] = useState(); //have returned Ending hour if time is needed\r\n    const [EndMinuts, ChangeEndMinuts] = useState(); //have returned Ending minut if time is needed \r\n    const [TimeClicked, ChangeTimeClicked] = useState() //this to make sure that time is included or not and show the repeated days model\r\n    const Time = ( EditTime ? null :\r\n        <TimerContainer\r\n        FromHourSelected={(value) => ChangeStartHour(value)} // return starting hour if time is needed\r\n        FromMinutsSelected={(value) => ChangeStartMinuts(value)} // return starting minut if time is needed \r\n        ToHourSelected={(value) => ChangeEndHour(value)} // return Ending hour if time is needed\r\n        ToMinutsSelected={(value) => ChangeEndMinuts(value)} // return Ending minut if time is needed \r\n        ScheduleColor={props.ScheduleColor} // send the color list from the parent App file  \r\n        isTime={(value) => ChangeTimeClicked(value)}\r\n        />\r\n        );\r\n        \r\n    //this is for number of rebeated days \r\n    const [GetRepeatedDays, ChangeRepeatedDays] = useState()\r\n    const RepeatedDays =( isShowTime ? null :<RDContainer\r\n        ScheduleColor={props.ScheduleColor} // send the color list from the parent App file  \r\n        SubmitNumberOfRP={(value) => ChangeRepeatedDays(value)} //returning the value of repeated days \r\n        />\r\n    );\r\n    \r\n    const submitChanges = <SubmitChanges \r\n        PassEventsInfoList={props.EventsInfoList}//list of all the Events created and compare it with the changed one\r\n        TheIdOfClickedEvent={props.IDofClickedEvent} //the clicked event ID\r\n        ReturnChangedEvents={(value) => props.ChangeOldEvents(value)} //Delete selected event from all event and close model\r\n        isCloseModel={(value) => props.CloseModel(value)} //to return true if clicked\r\n        ColorChange={props.ScheduleColor} \r\n    />;\r\n\r\n    const EditForm = (\r\n      <FadeIn>\r\n        <NoteContainer\r\n          position={\"relative\"}\r\n          width={\"520px\"}\r\n          margin={\"30px auto 20px auto\"}\r\n          padding={\"15px\"}\r\n          boxShadowValue={\"0 1px 5px rgb(138, 137, 137)\"}\r\n          borderRadiusValue={\"7px\"}\r\n          resizeValue={\"both\"}\r\n          backGroundColorValue={props.ScheduleColor.NotekBGC} //// send the color list from the parent App file\r\n          FontColorValue={props.ScheduleColor.NoteFC} //// send the color list from the parent App file\r\n        >\r\n          {Header}\r\n          {Title}\r\n          {Description}\r\n          {URL}\r\n          {IcionArea}\r\n          {Data}\r\n          {Time}\r\n          {RepeatedDays}\r\n          {submitChanges}\r\n        </NoteContainer>\r\n      </FadeIn>\r\n    );\r\n\r\n  return EditForm;\r\n\r\n}\r\n\r\nexport default EditEventForm;\r\n","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\EditForm\\DeleteButton.js",["212"],"import React, { useState } from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport { DeleteFilled } from \"@ant-design/icons\";\r\nimport Button from \"../../../UI/Button\";  \r\n\r\nconst DeleteButton = (props) => {\r\n  const ButtonIconColor = {\r\n    color: props.ColorChange.IconC,\r\n    fontSize: \"20px\",\r\n    marginRight: \"9px\",\r\n    marginTop: \"4px\",\r\n  };   \r\n  \r\nconst DeleteButton = () => { \r\n    const id = props.IDofClickedEvent //the Event id\r\n    const Delete = props.EventsInfoList  //copy the Events list\r\n    props.ReturnNewEvents(Delete.filter(Event => Event.id !== id))\r\n    props.CloseModel(true)\r\n  };\r\n\r\n  const SubmitButton = (\r\n    <FadeIn>\r\n      <Button\r\n        width={\"120px\"}\r\n        marginBottomValue={\"10px\"}\r\n        marginLeftValue={\"10%\"}\r\n        fontSizeValue={\"20px\"}\r\n        borderRadiusValue={\"15px\"}\r\n        IsCalledValue={\"hover\"}\r\n        BorderValue=\"solid\"\r\n        borderWidthValue=\"thin\"\r\n        paddingInputValue=\"2px\"\r\n        onClick={DeleteButton}\r\n        text={\"Delete\"}\r\n        icon={<DeleteFilled style={ButtonIconColor} />}\r\n      />\r\n    </FadeIn>\r\n  );\r\n\r\n\r\n  return SubmitButton;\r\n};\r\n\r\nexport default DeleteButton;\r\n","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\ScheduleForm\\Containers\\SubmitButton.js",["213","214","215","216"],"import React, { useState, useEffect } from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport { LoginOutlined } from \"@ant-design/icons\";\r\nimport Button from \"../../../../UI/Button\";\r\nimport { createEventId } from \"../../event-utils\";\r\nimport { Title } from \"@material-ui/icons\";\r\nlet todayStr = new Date().toISOString().replace(/T.*$/, '') // YYYY-MM-DD of today\r\n\r\nconst SubmitButton = (props) => {\r\n  const ButtonIconColor = {\r\n    fontSize: \"20px\",\r\n    marginRight: \"9px\",\r\n    marginTop: \"4px\",\r\n  };   \r\n  const CreateEvent = {\r\n    id: createEventId(),\r\n    title: props.isTitle,\r\n    description: props.isDescription,\r\n    Url: props.isURL,\r\n    start: props.isStartingDate,\r\n    end: props.isEndingData,\r\n    startTime: props.isStartingTime,\r\n    endTime: props.isEndingTime,\r\n    daysOfWeek: props.isRepeatedDays,\r\n    display: \"list-item\"  \r\n  };\r\n  const SubmitEvent = () => { \r\n    return(\r\n      props.isEvent((oldarr) => [...oldarr, CreateEvent]),\r\n      props.isCallingCalendar(false),\r\n      console.log(CreateEvent)\r\n    )\r\n  };\r\n\r\n  const SubmitButton = (\r\n    <FadeIn>\r\n      <Button\r\n        width={\"120px\"}\r\n        marginBottomValue={\"10px\"}\r\n        marginLeftValue={\"35%\"}\r\n        fontSizeValue={\"20px\"}\r\n        borderRadiusValue={\"15px\"}\r\n        IsCalledValue={\"hover\"}\r\n        BorderValue=\"solid\"\r\n        borderWidthValue=\"thin\"\r\n        paddingInputValue=\"2px\"\r\n        onClick={SubmitEvent}\r\n        text={\"Submit\"}\r\n        icon={<LoginOutlined style={ButtonIconColor} />}\r\n      />\r\n    </FadeIn>\r\n  );\r\n\r\n\r\n  return SubmitButton;\r\n};\r\n\r\nexport default SubmitButton;\r\n","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\ScheduleForm\\Containers\\TextInputContainer.js",["217"],"import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport UserInput from '../../../../UI/UserInput'\r\nimport TextArea from '../../../../UI/TextArea';\r\nimport FadeIn  from 'react-fade-in';\r\nimport { LinkOutlined} from \"@ant-design/icons\";\r\nimport { Title } from '@material-ui/icons';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nconst InfoContainer = styled.div`\r\n    width: 440px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: flex-start;\r\n    margin: 4px;\r\n    margin-bottom: 10px;\r\n`\r\n\r\nconst TitleContainer = (props) => {\r\n    const IconColor = { \r\n        color : props.ScheduleColor.IconC, \r\n        fontSize:\"25px\", \r\n        marginRight:\"15px\", \r\n        marginTop:\"4px\" \r\n    }  \r\n    const title = <InfoContainer>\r\n        <FadeIn><Title style={IconColor}/></FadeIn>\r\n        <FadeIn><UserInput \r\n        key={`title` + 1} \r\n        // This is to change the Value of Title based on the input coming from schedule\r\n        onchangeValue={(event)=>props.SubmitTitle(event.target.value)}\r\n        //This is the Props that is coming from Schedule From once I click on submit\t\r\n        PlaceholderValue={props.SubmitTitlePlaceHolder}\r\n        name=\"title\"\r\n        inputType={\"text\"} \r\n        widthValue={\"425px\"}\r\n        paddingVale={\"4px\"}\r\n        outlineValue={\"none\"}\r\n        fontSizeValue={\"1.2em\"}\r\n        fontFamilyValue={\"inherit\"}\r\n        IsCalledValue={\"FOCUS\"} \r\n        borderRadiusValue= {\"7px\"}\r\n        backGroundColorValue={props.ScheduleColor.UserInputBGC}\r\n        FontColorValue={props.ScheduleColor.UserInputFC}\r\n        PlaceHolderColorValue={props.ScheduleColor.UserInputPHC}\r\n        borderColorValue={props.ScheduleColor.BorderColor}  \r\n        BorderValue={\"solid\"}\r\n        borderWidthValue=\"thin\"\r\n        marginRightValue={\"10px\"}\r\n        /></FadeIn>\r\n    </InfoContainer>\r\n\r\n    return(title)\r\n}\r\n\r\nconst DescriptionContainer = (props) => {\r\n    const IconColor = { \r\n        color : props.ScheduleColor.IconC, \r\n        fontSize:\"25px\", \r\n        marginRight:\"15px\", \r\n        marginTop:\"4px\" \r\n    } \r\n    const Description = <InfoContainer>\r\n        <FadeIn><DescriptionIcon style={IconColor}/></FadeIn>\r\n        <FadeIn><TextArea\r\n        key={`Description`+1} \r\n        // This is to change the Value of Title based on the input \r\n        onchangeValue={(event)=>props.SubmitDescription(event.target.value)}\r\n        //This is the Props that is coming from Schedule From once I click on submit\t\r\n        PlaceholderValue={props.SubmitDescriptionPlaceHolder}\r\n        rows={3}\r\n        name=\"Description\"\r\n        inputType={\"text\"} \r\n        widthValue={\"425px\"}\r\n        paddingVale={\"4px\"}\r\n        outlineValue={\"none\"}\r\n        fontSizeValue={\"1.2em\"}\r\n        fontFamilyValue={\"inherit\"}\r\n        IsCalledValue={\"FOCUS\"} \r\n        borderRadiusValue= {\"7px\"}\r\n        backGroundColorValue={props.ScheduleColor.UserInputBGC}\r\n        FontColorValue={props.ScheduleColor.UserInputFC}\r\n        PlaceHolderColorValue={props.ScheduleColor.UserInputPHC}\r\n        borderColorValue={props.ScheduleColor.BorderColor}  \r\n        BorderValue={\"solid\"}\r\n        resizeValue={\"vertical\"}\r\n        borderWidthValue=\"thin\"\r\n        marginRightValue={\"10px\"}\r\n        /></FadeIn>\r\n    </InfoContainer>\r\n\r\n\r\n    return (Description)\r\n}\r\n\r\nconst URLContainer = (props) => {\r\n    const IconColor = { \r\n        color : props.ScheduleColor.IconC, \r\n        fontSize:\"25px\", \r\n        marginRight:\"15px\", \r\n        marginTop:\"4px\" \r\n    } \r\n    const URL = <InfoContainer>\r\n        <FadeIn><LinkOutlined style={IconColor}/></FadeIn>\r\n        <FadeIn><UserInput \r\n        key={`AttachedLinkDescription` }\r\n        // This is to change the Value of Title based on the input \r\n        onchangeValue={(event)=>props.URLOption(event.target.value)}\r\n        //This is the Props that is coming from Schedule From once I click on submit\t\r\n        PlaceholderValue={props.SubmitURLPH}\r\n        name=\"Url\"\r\n        inputType={\"text\"} \r\n        widthValue={\"425px\"}\r\n        paddingVale={\"4px\"}\r\n        outlineValue={\"none\"}\r\n        fontSizeValue={\"1.2em\"}\r\n        fontFamilyValue={\"inherit\"}\r\n        IsCalledValue={\"FOCUS\"} \r\n        borderRadiusValue= {\"7px\"}\r\n        backGroundColorValue={props.ScheduleColor.UserInputBGC}\r\n        FontColorValue={props.ScheduleColor.UserInputFC}\r\n        PlaceHolderColorValue={props.ScheduleColor.UserInputPHC}\r\n        borderColorValue={props.ScheduleColor.BorderColor}    \r\n        BorderValue={\"solid\"}\r\n        borderWidthValue=\"thin\"\r\n        marginRightValue={\"10px\"}\r\n        /></FadeIn>\r\n    </InfoContainer>\r\n\r\n\r\n    return (URL)\r\n}\r\n\r\nexport  {TitleContainer, DescriptionContainer, URLContainer};","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\ScheduleForm\\Containers\\Date-TimeContainer.js",["218","219","220","221","222","223","224"],"import React, { useState } from \"react\";\r\nimport styled from \"styled-components\"; \r\nimport FadeIn  from 'react-fade-in'; \r\nimport { CalendarOutlined , ClockCircleOutlined} from \"@ant-design/icons\"; \r\nimport TimeSelected from '../../DataCollection/TimeSelected';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility'\r\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\r\nimport { CloseCircleOutlined, CheckCircleOutlined, CheckCircleFilled, EditFilled, EditOutlined } from \"@ant-design/icons\";\r\nimport { createEventId } from \"../../event-utils\";\r\nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\r\n\r\nconst InfoContainer = styled.div`\r\n    width: 440px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: flex-start;\r\n    margin: 4px;\r\n    margin-bottom: 14px;\r\n`\r\nconst EachateContainer = styled.div`\r\n    width: 400px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: ${props => props.JustifyContentCalue};\r\n    margin: 4px;\r\n    margin-left: ${props => props.MarginLeft ? props.MarginLeft : null }\r\n`\r\nconst DateContainer = styled.div`\r\n    width: 400px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n`\r\nconst CalenderContianer = (props) => {\r\n    //All Component Color Stle\r\n    const IconColor = { \r\n        color : props.ScheduleColor.IconC, \r\n        fontSize:\"25px\", \r\n        marginRight:\"15px\", \r\n        marginTop:\"4px\" \r\n    }\r\n    \r\n    // This is a togole to change the state of the disabled and to change the icion as well \r\n    const InconArea = <div style={{display: \"flex\", flexDirection: \"column\", justifyContent: \"flex-start\"}}>\r\n            <FadeIn><CalendarOutlined style={IconColor}/> </FadeIn> \r\n        </div>\r\n\r\n    //This is for the layout for Year Month Days \r\n    const InfoArea = <EachateContainer JustifyContentCalue={\"space-between\" }>\r\n            {<FadeIn><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginLeft: \"150px\"}}>Selected Data</span></FadeIn>}\r\n        </EachateContainer>\r\n\r\n    //Starting Data Area\r\n    const StartingData = <EachateContainer JustifyContentCalue={ \"\"}>\r\n            <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}>From</span></FadeIn>\r\n            { <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"1px\", color:props.ScheduleColor.IconC}}>{props.SendSD}</span></FadeIn> }\r\n        </EachateContainer>\r\n    \r\n    // End Data Area\r\n    const EndingingData = <EachateContainer JustifyContentCalue={ \"\"}>\r\n            <FadeIn><span style={{  padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"25px\"}}>To</span></FadeIn>\r\n            { <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"1px\", color:props.ScheduleColor.IconC }}>{props.SendED}</span></FadeIn> }\r\n        </EachateContainer>\r\n    \r\n    //This is the returned Date to the calendar\r\n    const calendar = <InfoContainer>\r\n            {InconArea}\r\n            <DateContainer>\r\n                {InfoArea}\r\n                {StartingData}\r\n                {EndingingData}\r\n            </DateContainer>\r\n        </InfoContainer>\r\n\r\n    //To recieve a prop that will change the value from and to inside the schedule form to the value of From/to Date that has been created here  \r\n    props.GetFromDate(props.SendSD) //Return either the selected data from the calendar form or the changed data by the user\r\n    props.GetToDate(props.SendED) //Return either the selected data from the calendar form or the changed data by the user\r\n    \r\n    return(calendar)\r\n}\r\n\r\nconst TimerContainer = (props) => {\r\n    //All Component Color Stle\r\n    const IconColor = { \r\n        color : props.ScheduleColor.IconC, \r\n        fontSize:\"25px\", \r\n        marginRight:\"15px\", \r\n        marginTop:\"4px\"\r\n    }\r\n    //DateStyle and unDateStyle color style \r\n    const ShowDateStle = {\r\n        marginRight: \"4px\", \r\n        marginLeft:\"51px\",\r\n        marginTop:\"7px\" , \r\n        fontSize: \"18px\", \r\n        color : props.ScheduleColor.IconC\r\n    }\r\n    //Visable and unvisable color style \r\n    const VisibilityStle = {\r\n        marginRight: \"4px\", \r\n        marginLeft:\"4px\",\r\n        marginTop:\"7px\" , \r\n        fontSize: \"18px\", \r\n        color : props.ScheduleColor.IconC\r\n    }\r\n\r\n    \r\n    const [isShowTime, ChangeisShowTime] = useState(true) //to show the option to change the Time that the user selected\r\n    //this is the part where we change the icon based on clicking the div \r\n    const ShowData = <FadeIn>\r\n        {isShowTime ?  null : \r\n            <CheckCircleFilled \r\n                onClick={()=>ChangeisShowTime(true)}\r\n                style={VisibilityStle} />} \r\n        </FadeIn>\r\n    const IcionArea = <div style={{display: \"flex\", flexDirection: \"column\", justifyContent: \"flex-start\"}}>\r\n            <FadeIn><ClockCircleOutlined style={IconColor}/>  </FadeIn>\r\n            <FadeIn>{ShowData}</FadeIn>\r\n        </div>\r\n    const isDefulatTime = \r\n        <DateContainer>\r\n            <FadeIn>\r\n                <EachateContainer>\r\n                {isShowTime ? <RadioButtonUncheckedIcon onClick={()=>ChangeisShowTime(false)} style={ShowDateStle}/> : null}  \r\n                    <span style={{paddingTop: \"6px\" ,fontSize: \"1em\", marginLeft: \"5px\"}}>By defualt the time set to 12 pm </span> \r\n                </EachateContainer>\r\n            </FadeIn>\r\n            <FadeIn><span style={{paddingBottom: \"4px\" ,fontSize: \"1em\", marginLeft: \"60px\"}}>Click the Circle to choose certain time</span></FadeIn>\r\n        </DateContainer>\r\n\r\n    //This is for the layout for Hour Minuts Day system\r\n    const InfoArea = (isShowTime ? \r\n        isDefulatTime\r\n        :\r\n        <EachateContainer JustifyContentCalue={\"space-between\" }>\r\n                    <FadeIn ><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}> </span></FadeIn> \r\n                    <FadeIn ><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}>{\"Hour\"}</span></FadeIn> \r\n                    <FadeIn ><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}>{\"Minuts\"}</span></FadeIn> \r\n                    <FadeIn ><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}>{\"AM / PM\"}</span></FadeIn> \r\n        </EachateContainer>\r\n    );\r\n    \r\n    //collection of stating time for event\r\n    const [StartHoursValue, ChangeStartHourValue ]= useState() //save the Starting Hour\r\n    const [StartMinutsValue, ChangeStartMinutsValue ]= useState() //save the starting Minuts\r\n    const [StartDayValue, ChangeStartDayValue ]= useState() //save starting if it is AM or PM\r\n    const StartingTime = isShowTime ? null :<EachateContainer JustifyContentCalue={\"space-between\" }>\r\n            <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"5px\"}}>Start</span></FadeIn>\r\n            <TimeSelected \r\n                submitHourValue={(value) => ChangeStartHourValue(value)}\r\n                submitMinutsValue={(value) => ChangeStartMinutsValue(value)}\r\n                submitDayValue={(value) => ChangeStartDayValue(value)}\r\n                RecievedColor={props.ScheduleColor}\r\n                //this is to disable the values that are inside and it is going to DataSelected\r\n                DisabledisClicked={isShowTime} \r\n                />\r\n        </EachateContainer>\r\n    \r\n    //collection of ending time for event\r\n    const [EndHoursValue, ChangeEndHourValue ]= useState() //save the Ending Hour\r\n    const [EndMinutsValue, ChangeEndMinutsValue ]= useState() //save the Ending Minuts\r\n    const [EndDayValue, ChangeEndDayValue ]= useState() //save Ending if it is AM or PM\r\n    const EndingTime = isShowTime ? null :<EachateContainer  MarginLeft={\"10px\"}  JustifyContentCalue={\"space-between\" }>\r\n            <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"5px\"}}>End</span></FadeIn>\r\n            <TimeSelected \r\n                submitHourValue={(value) => ChangeEndHourValue(value)}\r\n                submitMinutsValue={(value) => ChangeEndMinutsValue(value)}\r\n                submitDayValue={(value) => ChangeEndDayValue(value)}\r\n                RecievedColor={props.ScheduleColor}\r\n                //this is to disable the values that are inside and it is going to DataSelected\r\n                DisabledisClicked={isShowTime} \r\n                />\r\n        </EachateContainer>\r\n \r\n    const time = (\r\n      <InfoContainer>\r\n        {IcionArea}\r\n        <DateContainer>\r\n          {InfoArea}\r\n          {StartingTime}\r\n          {EndingTime}\r\n        </DateContainer>\r\n      </InfoContainer>\r\n    );\r\n\r\n    props.FromHourSelected(StartDayValue === \"PM\" ? String(parseInt(StartHoursValue,10) + 12) : StartHoursValue) //this where we convert the returned hour from 12 hour system to 24 hour system \r\n    props.FromMinutsSelected(StartMinutsValue)\r\n    props.ToHourSelected(EndDayValue === \"PM\" ? String(parseInt(EndHoursValue,10) + 12) : EndHoursValue) //this where we convert the returned hour To 12 hour system to 24 hour system \r\n    props.ToMinutsSelected(EndMinutsValue);\r\n    props.isTime(isShowTime) \r\n    return (time)\r\n}\r\n\r\nexport  {CalenderContianer, TimerContainer};","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\ScheduleForm\\Containers\\DaysContainer.js",[],"C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\EditForm\\Date-TimeContainer.js",["225","226","227","228","229","230","231","232","233"],"import React, { useState } from \"react\";\r\nimport styled from \"styled-components\"; \r\nimport FadeIn  from 'react-fade-in'; \r\nimport { CalendarOutlined , ClockCircleOutlined} from \"@ant-design/icons\"; \r\nimport TimeSelected from '../DataCollection/TimeSelected';\r\nimport DateSelected from '../DataCollection/DateSelected';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility'\r\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\r\nimport DateRangeIcon from '@material-ui/icons/DateRange';\r\nimport { CloseCircleOutlined, CheckCircleOutlined, CheckCircleFilled, EditFilled, EditOutlined } from \"@ant-design/icons\";\r\nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\r\n\r\nconst InfoContainer = styled.div`\r\n    width: 440px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: flex-start;\r\n    margin: 4px;\r\n    margin-bottom: 14px;\r\n`\r\nconst EachateContainer = styled.div`\r\n    width: 400px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: ${props => props.JustifyContentCalue};\r\n    margin: 4px;\r\n    margin-left: ${props => props.MarginLeft ? props.MarginLeft : null }\r\n`\r\nconst DateContainer = styled.div`\r\n    width: 400px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n`\r\nconst CalenderContianer = (props) => {\r\n    //DateStyle and unDateStyle color style \r\n    const ShowDateStle = {\r\n        marginRight: \"4px\", \r\n        marginLeft:\"51px\",\r\n        marginTop:\"7px\" , \r\n        fontSize: \"18px\", \r\n        color : props.ScheduleColor.IconC\r\n    }\r\n    //All Component Color Stle\r\n    const IconColor = { \r\n        color : props.ScheduleColor.IconC, \r\n        fontSize:\"25px\", \r\n        marginRight:\"15px\", \r\n        marginTop:\"4px\" \r\n    }\r\n    \r\n    // This is a togole to change the state of the disabled and to change the icion as well \r\n    const InconArea = <div style={{display: \"flex\", flexDirection: \"column\", justifyContent: \"flex-start\"}}>\r\n            <FadeIn><CalendarOutlined style={IconColor}/> </FadeIn> \r\n        </div>\r\n\r\n    //This is for the layout for Year Month Days  \r\n    const [isSelectedDate, ChangeSelectedDate]= useState(true)\r\n    props.GetIsSelectedDate(isSelectedDate)\r\n    const ChangeSelectedData= isSelectedDate ?  \r\n        <RadioButtonUncheckedIcon \r\n            onClick={()=>ChangeSelectedDate(false)}\r\n            style={ShowDateStle}\r\n        /> \r\n        : \r\n        <CheckCircleFilled \r\n            onClick={()=>ChangeSelectedDate(true)}\r\n            style={ShowDateStle} \r\n        />\r\n    //This is to switch between The selected date and the date that the user want to change \r\n    const isData = <EachateContainer> \r\n            {ChangeSelectedData}\r\n           { isSelectedDate ? \r\n                <span style={{paddingTop: \"7px\" ,fontSize: \"1em\", marginLeft: \"5px\"}}> Chick to Change Selected Date of Event</span>\r\n                :\r\n                <span style={{paddingTop: \"7px\" ,fontSize: \"1em\", marginLeft: \"5px\"}}> Chick to Retun to Selected Date of Event</span>}\r\n        </EachateContainer>\r\n    //Starting Data Area\r\n    const [fromData, ChangeFromDate] = useState(\"\") \r\n    const StartingData = <EachateContainer JustifyContentCalue={ \"\"}>\r\n            <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}>From</span></FadeIn>\r\n            { isSelectedDate ? <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"1px\", color:props.ScheduleColor.IconC}}>{props.SendSD}</span></FadeIn> \r\n                :\r\n                <DateSelected\r\n                //These are used to send these data to DataSlected to be used for Year, Month, Day \r\n                ReturnFrom=\"From\"\r\n                ReturnClickedFromYear={props.SendSD.toString().slice(7,11)}\r\n                ReturnClickedFromMonth={props.SendSD.toString().slice(0,3)} \r\n                ReturnClickedFromDay={props.SendSD.toString().slice(4,6)}\r\n                name=\"start\"\r\n                //The incoming dating is used to chagne the format of the date and then send that number to submission button\r\n                submitDateValue={(value) => ChangeFromDate(value)} \r\n                RecievedColor={props.ScheduleColor}\r\n                />\r\n            }\r\n        </EachateContainer>\r\n    \r\n    // End Data Area\r\n    const [ToData, ChangeToDate] = useState(\"\")\r\n    const EndingingData = <EachateContainer JustifyContentCalue={ \"\"}>\r\n            <FadeIn><span style={{  padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"25px\"}}>To</span></FadeIn>\r\n            { isSelectedDate ? <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"1px\", color:props.ScheduleColor.IconC }}>{props.SendED}</span></FadeIn> \r\n                :\r\n                <DateSelected\r\n                //These are used to send these data to DataSlected to be used for Year, Month, Day \r\n                ReturnFrom=\"To\"\r\n                ReturnClickedToYear={props.SendED.toString().slice(7,11)}\r\n                ReturnClickedToMonth={props.SendED.toString().slice(0,3)} \r\n                ReturnClickedToDay={props.SendED.toString().slice(4,6)}\r\n                name=\"end\"\r\n                //The incoming dating is used to chagne the format of the date and then send that number to submission button\r\n                submitDateValue={(value) => ChangeToDate(value)} \r\n                RecievedColor={props.ScheduleColor}\r\n            />\r\n            }\r\n        </EachateContainer>\r\n    \r\n    //This is the returned Date to the calendar\r\n    const calendar = <InfoContainer>\r\n            {InconArea}\r\n            <DateContainer> \r\n                {isData}\r\n                {StartingData}\r\n                {EndingingData}\r\n            </DateContainer>\r\n        </InfoContainer>\r\n\r\n    //To recieve a prop that will change the value from and to inside the schedule form to the value of From/to Date that has been created here  \r\n    props.GetFromDate(props.SendSD) //Return either the selected data from the calendar form or the changed data by the user\r\n    props.GetToDate(props.SendED) //Return either the selected data from the calendar form or the changed data by the user\r\n    \r\n    return(calendar)\r\n}\r\n\r\nconst TimerContainer = (props) => {\r\n    //All Component Color Stle\r\n    const IconColor = { \r\n        color : props.ScheduleColor.IconC, \r\n        fontSize:\"25px\", \r\n        marginRight:\"15px\", \r\n        marginTop:\"4px\"\r\n    }\r\n    //DateStyle and unDateStyle color style \r\n    const ShowDateStle = {\r\n        marginRight: \"4px\", \r\n        marginLeft:\"51px\",\r\n        marginTop:\"7px\" , \r\n        fontSize: \"18px\", \r\n        color : props.ScheduleColor.IconC\r\n    }\r\n    //Visable and unvisable color style \r\n    const VisibilityStle = {\r\n        marginRight: \"4px\", \r\n        marginLeft:\"4px\",\r\n        marginTop:\"7px\" , \r\n        fontSize: \"18px\", \r\n        color : props.ScheduleColor.IconC\r\n    }\r\n\r\n    \r\n    const [isShowTime, ChangeisShowTime] = useState(true) //to show the option to change the Time that the user selected\r\n    //this is the part where we change the icon based on clicking the div \r\n    const ShowData = <FadeIn>\r\n        {isShowTime ?  null : \r\n            <CheckCircleFilled \r\n                onClick={()=>ChangeisShowTime(true)}\r\n                style={VisibilityStle} />} \r\n        </FadeIn>\r\n    const IcionArea = <div style={{display: \"flex\", flexDirection: \"column\", justifyContent: \"flex-start\"}}>\r\n            <FadeIn><ClockCircleOutlined style={IconColor}/>  </FadeIn>\r\n            <FadeIn>{ShowData}</FadeIn>\r\n        </div>\r\n    const isDefulatTime = \r\n        <DateContainer>\r\n            <FadeIn>\r\n                <EachateContainer>\r\n                    {isShowTime ? <RadioButtonUncheckedIcon onClick={()=>ChangeisShowTime(false)} style={ShowDateStle}/> : null} \r\n                    <span style={{paddingTop: \"6px\" ,fontSize: \"1em\", marginLeft: \"5px\"}}>By defualt the time set to 12 pm </span> \r\n                </EachateContainer>\r\n            </FadeIn>\r\n            <FadeIn><span style={{paddingBottom: \"4px\" ,fontSize: \"1em\", marginLeft: \"60px\"}}>Click the Circle to choose certain time</span></FadeIn>\r\n        </DateContainer>\r\n\r\n        //This is for the layout for Hour Minuts Day system\r\n        const InfoArea = (isShowTime ? \r\n            isDefulatTime\r\n            :\r\n            <EachateContainer JustifyContentCalue={\"space-between\" }>\r\n                        <FadeIn ><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}> </span></FadeIn> \r\n                        <FadeIn ><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}>{\"Hour\"}</span></FadeIn> \r\n                        <FadeIn ><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}>{\"Minuts\"}</span></FadeIn> \r\n                        <FadeIn ><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}>{\"AM / PM\"}</span></FadeIn> \r\n            </EachateContainer>\r\n        );\r\n\r\n    //collection of stating time for event\r\n    const [StartHoursValue, ChangeStartHourValue ]= useState() //save the Starting Hour\r\n    const [StartMinutsValue, ChangeStartMinutsValue ]= useState() //save the starting Minuts\r\n    const [StartDayValue, ChangeStartDayValue ]= useState() //save starting if it is AM or PM\r\n    const StartingTime = isShowTime ? null : <EachateContainer JustifyContentCalue={\"space-between\" }>\r\n            <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"5px\"}}>Start</span></FadeIn>\r\n            <TimeSelected \r\n                submitHourValue={(value) => ChangeStartHourValue(value)}\r\n                submitMinutsValue={(value) => ChangeStartMinutsValue(value)}\r\n                submitDayValue={(value) => ChangeStartDayValue(value)}\r\n                RecievedColor={props.ScheduleColor}\r\n                //this is to disable the values that are inside and it is going to DataSelected\r\n                DisabledisClicked={isShowTime} \r\n                />\r\n        </EachateContainer>\r\n    \r\n    //collection of ending time for event\r\n    const [EndHoursValue, ChangeEndHourValue ]= useState() //save the Ending Hour\r\n    const [EndMinutsValue, ChangeEndMinutsValue ]= useState() //save the Ending Minuts\r\n    const [EndDayValue, ChangeEndDayValue ]= useState() //save Ending if it is AM or PM\r\n    const EndingTime = isShowTime ? null : <EachateContainer  MarginLeft={\"10px\"}  JustifyContentCalue={\"space-between\" }>\r\n            <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"5px\"}}>End</span></FadeIn>\r\n            <TimeSelected \r\n                submitHourValue={(value) => ChangeEndHourValue(value)}\r\n                submitMinutsValue={(value) => ChangeEndMinutsValue(value)}\r\n                submitDayValue={(value) => ChangeEndDayValue(value)}\r\n                RecievedColor={props.ScheduleColor}\r\n                //this is to disable the values that are inside and it is going to DataSelected\r\n                DisabledisClicked={isShowTime} \r\n                />\r\n        </EachateContainer>\r\n \r\n    const time = (\r\n      <InfoContainer>\r\n        {IcionArea}\r\n        <DateContainer> \r\n            {InfoArea}\r\n          {StartingTime}\r\n          {EndingTime}\r\n        </DateContainer>\r\n      </InfoContainer>\r\n    );\r\n\r\n    props.FromHourSelected(StartDayValue === \"PM\" ? String(parseInt(StartHoursValue,10) + 12) : StartHoursValue) //this where we convert the returned hour from 12 hour system to 24 hour system \r\n    props.FromMinutsSelected(StartMinutsValue)\r\n    props.ToHourSelected(EndDayValue === \"PM\" ? String(parseInt(EndHoursValue,10) + 12) : EndHoursValue) //this where we convert the returned hour To 12 hour system to 24 hour system \r\n    props.ToMinutsSelected(EndMinutsValue);\r\n    props.isTime(isShowTime) \r\n    return (time)\r\n}\r\n\r\nexport  {CalenderContianer, TimerContainer};","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\EditForm\\TextInputContainer.js",[],"C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\DataCollection\\RepeatedDaysSelected.js",["234"],"import React, { useState } from \"react\";\r\nimport FadeIn  from 'react-fade-in';\r\nimport Inputdata from '../../../UI/UserInput';\r\nimport { createEventId } from \"../event-utils\";\r\n\r\n\r\nconst RepeatDaySelected = (props) => {\r\n    const [NumberOfRepeatedDays,ChangeNumberOfRepeatedDays] = useState([]) \r\n    const [Days,changeDays] = useState({\r\n        Sunday: {id: \"0\", value: false},\r\n        Monday: {id: \"1\", value: false},\r\n        Tuesday: {id: \"1\", value: false},\r\n        Wednesday: {id: \"3\", value: false},\r\n        Thursday: {id: \"4\", value: false},\r\n        Friday: {id: \"5\", value: false},\r\n        Saturday: {id: \"6\", value: false}\r\n    })\r\n    const ChoosenDay = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'] \r\n    const handleRepeatedDays = (e) => {\r\n        const newDays = {...Days}\r\n        const onchangeValue = e.target.value\r\n        newDays[onchangeValue].value = !newDays[onchangeValue].value\r\n        changeDays(newDays)\r\n        //Returning the value of id of each day if it is clicked \r\n        ChangeNumberOfRepeatedDays(Object.values(Days).map(item => {\r\n            if (item.value) return item.id\r\n        }).filter(item => item))\r\n    }\r\n    \r\n    const RepeatedDayContainer = (DayValue,OnChangeInputValue) => {\r\n        return [<Inputdata \r\n            key={NumberOfRepeatedDays.id + createEventId()}\r\n            inputType={\"checkbox\"}\r\n            name=\"title\"\r\n            widthValue={\"20px\"}\r\n            paddingVale={\"2px\"}\r\n            outlineValue={\"none\"}\r\n            fontSizeValue={\"1.2em\"}\r\n            fontFamilyValue={\"inherit\"}\r\n            IsCalledValue={\"FOCUS\"} \r\n            borderRadiusValue= {\"7px\"}\r\n            backGroundColorValue={ props.RecievedColor.UserInputBGC}\r\n            FontColorValue={props.RecievedColor.UserInputFC}\r\n            PlaceHolderColorValue={props.RecievedColor.UserInputPHC}\r\n            borderColorValue={props.RecievedColor.BorderColor} \r\n            BorderValue={\"solid\"}\r\n            borderWidthValue={\"thin\"}\r\n            marginRightValue={\"5px\"}\r\n            marginTopValue={\"4px\"}\r\n            checked={Days[DayValue].value}\r\n            onchangeValue = {OnChangeInputValue}\r\n            InputValue = {DayValue}\r\n            ></Inputdata>,\r\n            <label key={NumberOfRepeatedDays.id} style={{marginRight: \"10px\"}}>{DayValue}</label>]\r\n        }\r\n        \r\n    const LineOne = [RepeatedDayContainer(ChoosenDay[0],handleRepeatedDays),\r\n                     RepeatedDayContainer(ChoosenDay[1],handleRepeatedDays),\r\n                     RepeatedDayContainer(ChoosenDay[2],handleRepeatedDays),\r\n                     RepeatedDayContainer(ChoosenDay[3],handleRepeatedDays)]\r\n    const LineTwo = [RepeatedDayContainer(ChoosenDay[4],handleRepeatedDays),\r\n                     RepeatedDayContainer(ChoosenDay[5],handleRepeatedDays),\r\n                     RepeatedDayContainer(ChoosenDay[6],handleRepeatedDays)]\r\n    \r\n    props.ValueOfRepeatedDays(NumberOfRepeatedDays);\r\n    return (  \r\n    <FadeIn>\r\n        <div style={{display: \"flex\",width: \"50px\", flexDirection: \"row\"}}>\r\n             {LineOne} \r\n        </div>\r\n        <div style={{\r\n            display: \"flex\",\r\n            width: \"50px\", \r\n            flexDirection: \"row\", \r\n            marginTop: \"10px\", \r\n            marginLeft: \"70px\", \r\n            marginBottom: \"8px\"}}\r\n        >\r\n             {LineTwo} \r\n        </div>\r\n    </FadeIn>\r\n       )\r\n}\r\n\r\nexport default RepeatDaySelected;","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\DataCollection\\TimeSelected.js",["235"],"import React, { useState } from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport SelectData from \"../../../UI/Select\";\r\nimport { HourValue, MinutsValue, TwelveHourSystemValue } from \"./OptionsForm\";\r\nimport { createEventId } from \"../event-utils\";\r\nimport { ControlCameraOutlined } from \"@material-ui/icons\";\r\n\r\nconst OptionForm = (props) => {\r\n  const [HourClicked, ChangeHourClicked]= useState(false)\r\n  const [HourValueInput, ChangeHourValue] = useState(\"\");\r\n  const handle = (e) => {\r\n    ChangeHourValue(e.target.value)\r\n    ChangeHourClicked(!HourClicked)\r\n  };\r\n  const Hours = (\r\n    <FadeIn>\r\n      <SelectData\r\n        key={HourValueInput.id + createEventId()}\r\n        inputType={\"text\"}\r\n        name=\"title\"\r\n        widthValue={\"112px\"}\r\n        paddingVale={\"4px\"}\r\n        outlineValue={\"none\"}\r\n        fontSizeValue={\"1.2em\"}\r\n        fontFamilyValue={\"inherit\"}\r\n        IsCalledValue={props.DisabledisClicked ? \"\" : \"FOCUS\"}\r\n        borderRadiusValue={\"7px\"}\r\n        backGroundColorValue={props.RecievedColor.UserInputBGC}\r\n        FontColorValue={props.RecievedColor.UserInputFC}\r\n        PlaceHolderColorValue={props.RecievedColor.UserInputPHC}\r\n        borderColorValue={props.RecievedColor.BorderColor}\r\n        BorderValue={\"solid\"}\r\n        borderWidthValue={\"thin\"}\r\n        marginRightValue={\"15px\"}\r\n        onchangeValue={handle}\r\n        InputValue={HourValueInput}\r\n      >\r\n        {\r\n          <HourValue />\r\n        }\r\n      </SelectData>\r\n    </FadeIn>\r\n  );\r\n\r\n  const [MinutsClicked, ChangeMinutsClicked] = useState(false)\r\n  const [MinutsValueInput, ChangeMinutsValue] = useState(\"\");\r\n  const handleMinuts = (e) => {\r\n    ChangeMinutsValue(e.target.value)\r\n    ChangeMinutsClicked(!MinutsClicked)\r\n  };\r\n  const Minuts = (\r\n    <FadeIn>\r\n      <SelectData\r\n        key={MinutsValueInput.id + createEventId()}\r\n        inputType={\"text\"}\r\n        name=\"title\"\r\n        widthValue={\"112px\"}\r\n        paddingVale={\"4px\"}\r\n        outlineValue={\"none\"}\r\n        fontSizeValue={\"1.2em\"}\r\n        fontFamilyValue={\"inherit\"}\r\n        IsCalledValue={props.DisabledisClicked ? \"\" : \"FOCUS\"}\r\n        borderRadiusValue={\"7px\"}\r\n        backGroundColorValue={props.RecievedColor.UserInputBGC}\r\n        FontColorValue={props.RecievedColor.UserInputFC}\r\n        PlaceHolderColorValue={props.RecievedColor.UserInputPHC}\r\n        borderColorValue={props.RecievedColor.BorderColor}\r\n        BorderValue={\"solid\"}\r\n        borderWidthValue={\"thin\"}\r\n        marginRightValue={\"15px\"}\r\n        onchangeValue={handleMinuts}\r\n        InputValue={MinutsValueInput}\r\n      >\r\n        {\r\n          <MinutsValue />\r\n        }\r\n      </SelectData>\r\n    </FadeIn>\r\n  );\r\n\r\n  const [DayTimeClicked, ChangeDayTimeClicked]= useState(false)\r\n  const [DaytimeValueInput, ChangeDaytimeValue] = useState(\"\");\r\n  const handleDaytime = (e) => {\r\n    ChangeDaytimeValue(e.target.value)\r\n    ChangeDayTimeClicked(!DayTimeClicked)\r\n  };\r\n  const DayTime = (\r\n    <FadeIn>\r\n      <SelectData\r\n        key={DaytimeValueInput.id + createEventId()}\r\n        inputType={\"text\"}\r\n        name=\"title\"\r\n        widthValue={\"112px\"}\r\n        paddingVale={\"4px\"}\r\n        outlineValue={\"none\"}\r\n        fontSizeValue={\"1.2em\"}\r\n        fontFamilyValue={\"inherit\"}\r\n        IsCalledValue={props.DisabledisClicked ? \"\" : \"FOCUS\"}\r\n        borderRadiusValue={\"7px\"}\r\n        backGroundColorValue={props.RecievedColor.UserInputBGC}\r\n        FontColorValue={props.RecievedColor.UserInputFC}\r\n        PlaceHolderColorValue={props.RecievedColor.UserInputPHC}\r\n        borderColorValue={props.RecievedColor.BorderColor}\r\n        BorderValue={\"solid\"}\r\n        borderWidthValue={\"thin\"}\r\n        marginRightValue={\"15px\"}\r\n        onchangeValue={handleDaytime}\r\n        InputValue={DaytimeValueInput}\r\n      >\r\n        {\r\n          <TwelveHourSystemValue />\r\n        }\r\n      </SelectData>\r\n    </FadeIn>\r\n  );\r\n\r\n  props.submitHourValue(HourClicked ? HourValueInput : \"12\");\r\n  props.submitMinutsValue(MinutsValueInput ? MinutsClicked : \"00\");\r\n  props.submitDayValue(DayTimeClicked ? DaytimeValueInput : \"AM\");\r\n\r\n  return [Hours, Minuts, DayTime];\r\n};\r\nexport default OptionForm;","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\DataCollection\\DateSelected.js",["236","237","238","239","240","241","242","243"],"import React, { useState } from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport SelectData from \"../../../UI/Select\";\r\nimport {\r\n  NumberOfYearsValue,\r\n  NumberOfMonthsValue,\r\n  NumberOfDaysValue,\r\n} from \"./OptionsForm\";\r\nimport { createEventId } from \"../event-utils\";\r\n\r\nconst DateSelected = (props) => {\r\n  //This part is changed once the user click on the drop down to see other options\r\n  const [GetUserChangeYear, ChnageUserChangedYear] = useState(true);\r\n  /*\r\n        This part is chicking if the input that the user entered is what is wanted or not \r\n        Once the select is clicked then it will change to normal dropdown with input number \r\n    */\r\n  const [YearsValueInput, ChangeYearsValueInput] = useState(\r\n    GetUserChangeYear\r\n      ? props.ReturnFrom === \"From\"\r\n        ? props.ReturnClickedFromYear\r\n        : props.ReturnClickedToYear\r\n      : \"\"\r\n    );\r\n  const handleYears = (e) => (\r\n    ChangeYearsValueInput(e.target.value) , ChnageUserChangedYear(false)\r\n    )\r\n  const Years = (\r\n    <FadeIn>\r\n      <SelectData\r\n        key={YearsValueInput + createEventId()}\r\n        value=\"as\"\r\n        PlaceholderValue=\"asdfas\"\r\n        inputType={\"text\"}\r\n        name={props.name == \"start\" ? \"start\" : \"end\"}\r\n        widthValue={\"112px\"}\r\n        paddingVale={\"4px\"}\r\n        outlineValue={\"none\"}\r\n        fontSizeValue={\"1.2em\"}\r\n        fontFamilyValue={\"inherit\"}\r\n        IsCalledValue={\"FOCUS\"}\r\n        borderRadiusValue={\"7px\"}\r\n        backGroundColorValue={props.RecievedColor.UserInputBGC}\r\n        FontColorValue={props.RecievedColor.UserInputFC}\r\n        PlaceHolderColorValue={props.RecievedColor.UserInputPHC}\r\n        borderColorValue={props.RecievedColor.BorderColor}\r\n        BorderValue={\"solid\"}\r\n        borderWidthValue={\"thin\"}\r\n        marginRightValue={\"15px\"}\r\n        onchangeValue={handleYears}\r\n        InputValue={YearsValueInput}\r\n      >\r\n        {\r\n          <NumberOfYearsValue/>\r\n        }\r\n      </SelectData>\r\n    </FadeIn>\r\n  );\r\n  \r\n  // This part is changed once the user click on the drop down to see other options\r\n  const [GetUserChangeMonth, ChnageUserChangedMonth] = useState(true);\r\n  /*\r\n        This part is chicking if the input that the user entered is what is wanted or not \r\n        Once the select is clicked then it will change to normal dropdown with input number \r\n    */\r\n  const [MonthsValueInput, ChangeMonthsValue] = useState(\r\n      GetUserChangeMonth\r\n        ? props.ReturnFrom === \"From\"\r\n          ? props.ReturnClickedFromMonth\r\n          : props.ReturnClickedToMonth\r\n        : \"\"\r\n    );\r\n  const handleMonths = (e) => (\r\n    ChangeMonthsValue(e.target.value) , ChnageUserChangedMonth(false)\r\n  );\r\n  const Months = (\r\n    <FadeIn>\r\n      <SelectData\r\n        key={MonthsValueInput.id + createEventId()}\r\n        inputType={\"text\"}\r\n        name={props.name == \"start\" ? \"start\" : \"end\"}\r\n        widthValue={\"112px\"}\r\n        paddingVale={\"4px\"}\r\n        outlineValue={\"none\"}\r\n        fontSizeValue={\"1.2em\"}\r\n        fontFamilyValue={\"inherit\"}\r\n        IsCalledValue={props.DisabledisClicked ? \"\" : \"FOCUS\"}\r\n        borderRadiusValue={\"7px\"}\r\n        backGroundColorValue={props.RecievedColor.UserInputBGC}\r\n        FontColorValue={props.RecievedColor.UserInputFC}\r\n        PlaceHolderColorValue={props.RecievedColor.UserInputPHC}\r\n        borderColorValue={props.RecievedColor.BorderColor}\r\n        BorderValue={\"solid\"}\r\n        borderWidthValue={\"thin\"}\r\n        marginRightValue={\"15px\"}\r\n        onchangeValue={handleMonths}\r\n        InputValue={MonthsValueInput}\r\n      >\r\n        {\r\n          <NumberOfMonthsValue/>\r\n        }\r\n      </SelectData>\r\n    </FadeIn>\r\n  );\r\n\r\n  // This part is changed once the user click on the drop down to see other options\r\n  const [GetUserChangeDay, ChnageUserChangedDay] = useState(true);\r\n  /*\r\n        This part is chicking if the input that the user entered is what is wanted or not \r\n        Once the select is clicked then it will change to normal dropdown with input number \r\n    */\r\n  const [DayValueInput, ChangeDayValue] = useState(\r\n      GetUserChangeDay\r\n        ? props.ReturnFrom === \"From\"\r\n          ? props.ReturnClickedFromDay\r\n          : props.ReturnClickedToDay\r\n        : \"\"\r\n    );\r\n  const handleDays = (e) => (\r\n    ChangeDayValue(e.target.value) , ChnageUserChangedDay(false)\r\n  );\r\n  const name = props.name == \"start\" ? \"start\" : \"end\"\r\n  const Days = (\r\n    <FadeIn>\r\n      <SelectData\r\n        key={DayValueInput.id  + createEventId()}\r\n        inputType={\"text\"}\r\n        name={props.name == \"start\" ? \"start\" : \"end\"}\r\n        widthValue={\"112px\"}\r\n        paddingVale={\"4px\"}\r\n        outlineValue={\"none\"}\r\n        fontSizeValue={\"1.2em\"}\r\n        fontFamilyValue={\"inherit\"}\r\n        IsCalledValue={props.DisabledisClicked ? \"\" : \"FOCUS\"}\r\n        borderRadiusValue={\"7px\"}\r\n        backGroundColorValue={props.RecievedColor.UserInputBGC}\r\n        FontColorValue={props.RecievedColor.UserInputFC}\r\n        PlaceHolderColorValue={props.RecievedColor.UserInputPHC}\r\n        borderColorValue={props.RecievedColor.BorderColor}\r\n        BorderValue={\"solid\"}\r\n        borderWidthValue={\"thin\"}\r\n        marginRightValue={\"15px\"}\r\n        onchangeValue={handleDays}\r\n        InputValue={DayValueInput}\r\n      >\r\n        {\r\n          <NumberOfDaysValue/>\r\n        }\r\n      </SelectData>\r\n    </FadeIn>\r\n  );\r\n\r\n  //this is submitted to DropDownContainer\r\n  props.submitDateValue(\r\n    YearsValueInput + \"-\" + MonthsValueInput + \"-\" + DayValueInput\r\n  );\r\n\r\n  return [Years, Months, Days];\r\n};\r\n\r\nexport default DateSelected;\r\n","C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\DataCollection\\OptionsForm.js",["244"],"import React, { useState } from \"react\";\r\nimport { createEventId } from \"../event-utils\";\r\n\r\n//this is for the hour input \r\nconst HourValue = (props) => {\r\n\r\n    const Hours = ['01','02','03','04','05','06','07','08','09','10','11','12']\r\n    const DailyHours = (\r\n        [Hours.map((Hour, index) => \r\n            <option  key={index.id + createEventId()} value={Hour}>{Hour}</option>)]\r\n        )\r\n    return(DailyHours)\r\n}\r\nconst MinutsValue = (props) => {\r\n\r\n    //this is for the hour input \r\n    const Minuts = ['05','10','15','20','25','30','35','40','45','50','55']\r\n    const DailyMinut =(\r\n        [Minuts.map((Minut, index) => \r\n            <option key={index.id + createEventId()} value={Minut}>{Minut}</option>)]\r\n        )\r\n    return(DailyMinut)\r\n}\r\nconst TwelveHourSystemValue = (props) => {\r\n\r\n    //this for either AM or PM\r\n    const TwelveHourSystem = ['AM','PM']\r\n    const DayDivided =(\r\n        [TwelveHourSystem.map((DayTime, index) => \r\n            <option key={index.id + createEventId()} value={DayTime}>{DayTime}</option>)]\r\n        )\r\n    return(DayDivided)\r\n}\r\nconst NumberOfYearsValue = (props) => { \r\n    //this is for the years from this year \r\n    const NumberOfYears = [ '2020','2021', '2022', '2023', '2024','2025', '2026', \r\n                            '2027', '2028', '2029', '2030', '2031', '2032','2033', \r\n                            '2034','2035', '2036', '2037', '2038', '2039','2040']\r\n    const YearContainer = (\r\n        [NumberOfYears.map((year, index) => <option    key={index.id + createEventId()} value={year}>{year}</option>)]\r\n    )\r\n    \r\n    return(\r\n        YearContainer\r\n        )\r\n}\r\nconst NumberOfMonthsValue = (props) => { \r\n    //this is for the months in a year \r\n    const NumberOfMonths = ['Jan','Feb','March','Apirl','May','June','July','Aug','Sept','Oct','Nov','Dec']\r\n    const MonthContainer = (\r\n        [NumberOfMonths.map((month, index) => <option  key={index.id + createEventId()}  value={month}>{month}</option>)]\r\n        )\r\n    return(MonthContainer)\r\n}\r\nconst NumberOfDaysValue = (props) => { \r\n    //this is for the days in a Month \r\n    const NumberOfDays = ['01','02','03','04','05','06','07','08','09','10',\r\n                        '11','12','13','14','15','16','17','18','19','20',\r\n                        '21','22','23','24','25','26','27','28','29','30','31']\r\n    const DayContainer = (\r\n        [NumberOfDays.map((days,index ) => <option  key={index.id + createEventId()} value={days}>{days}</option>)]\r\n        )\r\n    return(DayContainer)\r\n}\r\nconst ColorOptionsValue = () => {\r\n\r\n    //this is for the days in a Month \r\n    const ColorChoose = ['Choose Color','BlueViolet','Black','CornflowerBlue','DarkMagenta','DimGrey',\r\n                            'DodgerBlue','Fuchsia','MidnightBlue','Purple','Salmon']\r\n    const ColorContainer = (\r\n        [ColorChoose.map((Colors,index ) => <option  key={index.id + createEventId()} value={Colors}>{Colors}</option>)]\r\n        )\r\n    return(ColorContainer)\r\n}\r\n\r\nexport {HourValue, MinutsValue, TwelveHourSystemValue, \r\n        NumberOfYearsValue, NumberOfMonthsValue, NumberOfDaysValue, \r\n        ColorOptionsValue};\r\n","C:\\Users\\amohamed\\project\\notesk\\src\\UI\\Select.js",[],"C:\\Users\\amohamed\\project\\notesk\\src\\Routes\\Calendar\\EditForm\\submitChanges.js",["245"],{"ruleId":"246","replacedBy":"247"},{"ruleId":"248","replacedBy":"249"},{"ruleId":"250","severity":1,"message":"251","line":5,"column":8,"nodeType":"252","messageId":"253","endLine":5,"endColumn":17},{"ruleId":"254","severity":1,"message":"255","line":26,"column":7,"nodeType":"256","messageId":"257","endLine":26,"endColumn":18},{"ruleId":"254","severity":1,"message":"258","line":38,"column":7,"nodeType":"256","messageId":"257","endLine":38,"endColumn":16},{"ruleId":"259","severity":1,"message":"260","line":77,"column":48,"nodeType":"261","messageId":"257","endLine":77,"endColumn":50},{"ruleId":"259","severity":1,"message":"260","line":78,"column":24,"nodeType":"261","messageId":"257","endLine":78,"endColumn":26},{"ruleId":"250","severity":1,"message":"262","line":69,"column":19,"nodeType":"252","messageId":"253","endLine":69,"endColumn":30},{"ruleId":"250","severity":1,"message":"263","line":119,"column":12,"nodeType":"252","messageId":"253","endLine":119,"endColumn":20},{"ruleId":"250","severity":1,"message":"264","line":1,"column":17,"nodeType":"252","messageId":"253","endLine":1,"endColumn":25},{"ruleId":"250","severity":1,"message":"265","line":4,"column":31,"nodeType":"252","messageId":"253","endLine":4,"endColumn":50},{"ruleId":"250","severity":1,"message":"266","line":4,"column":52,"nodeType":"252","messageId":"253","endLine":4,"endColumn":69},{"ruleId":"250","severity":1,"message":"267","line":9,"column":8,"nodeType":"252","messageId":"253","endLine":9,"endColumn":20},{"ruleId":"250","severity":1,"message":"268","line":13,"column":8,"nodeType":"252","messageId":"253","endLine":13,"endColumn":32},{"ruleId":"250","severity":1,"message":"269","line":14,"column":8,"nodeType":"252","messageId":"253","endLine":14,"endColumn":30},{"ruleId":"250","severity":1,"message":"270","line":42,"column":11,"nodeType":"252","messageId":"253","endLine":42,"endColumn":23},{"ruleId":"250","severity":1,"message":"271","line":66,"column":12,"nodeType":"252","messageId":"253","endLine":66,"endColumn":20},{"ruleId":"250","severity":1,"message":"272","line":74,"column":12,"nodeType":"252","messageId":"253","endLine":74,"endColumn":26},{"ruleId":"250","severity":1,"message":"273","line":84,"column":12,"nodeType":"252","messageId":"253","endLine":84,"endColumn":18},{"ruleId":"250","severity":1,"message":"274","line":121,"column":12,"nodeType":"252","messageId":"253","endLine":121,"endColumn":23},{"ruleId":"250","severity":1,"message":"275","line":122,"column":12,"nodeType":"252","messageId":"253","endLine":122,"endColumn":21},{"ruleId":"250","severity":1,"message":"276","line":138,"column":12,"nodeType":"252","messageId":"253","endLine":138,"endColumn":22},{"ruleId":"250","severity":1,"message":"277","line":139,"column":12,"nodeType":"252","messageId":"253","endLine":139,"endColumn":23},{"ruleId":"250","severity":1,"message":"278","line":140,"column":12,"nodeType":"252","messageId":"253","endLine":140,"endColumn":20},{"ruleId":"250","severity":1,"message":"279","line":141,"column":12,"nodeType":"252","messageId":"253","endLine":141,"endColumn":21},{"ruleId":"250","severity":1,"message":"280","line":142,"column":12,"nodeType":"252","messageId":"253","endLine":142,"endColumn":23},{"ruleId":"250","severity":1,"message":"281","line":155,"column":12,"nodeType":"252","messageId":"253","endLine":155,"endColumn":27},{"ruleId":"250","severity":1,"message":"264","line":1,"column":17,"nodeType":"252","messageId":"253","endLine":1,"endColumn":25},{"ruleId":"250","severity":1,"message":"264","line":1,"column":17,"nodeType":"252","messageId":"253","endLine":1,"endColumn":25},{"ruleId":"250","severity":1,"message":"282","line":1,"column":27,"nodeType":"252","messageId":"253","endLine":1,"endColumn":36},{"ruleId":"250","severity":1,"message":"283","line":6,"column":10,"nodeType":"252","messageId":"253","endLine":6,"endColumn":15},{"ruleId":"250","severity":1,"message":"284","line":7,"column":5,"nodeType":"252","messageId":"253","endLine":7,"endColumn":13},{"ruleId":"250","severity":1,"message":"264","line":1,"column":17,"nodeType":"252","messageId":"253","endLine":1,"endColumn":25},{"ruleId":"250","severity":1,"message":"285","line":6,"column":8,"nodeType":"252","messageId":"253","endLine":6,"endColumn":22},{"ruleId":"250","severity":1,"message":"286","line":7,"column":8,"nodeType":"252","messageId":"253","endLine":7,"endColumn":25},{"ruleId":"250","severity":1,"message":"287","line":8,"column":10,"nodeType":"252","messageId":"253","endLine":8,"endColumn":29},{"ruleId":"250","severity":1,"message":"265","line":8,"column":31,"nodeType":"252","messageId":"253","endLine":8,"endColumn":50},{"ruleId":"250","severity":1,"message":"288","line":8,"column":71,"nodeType":"252","messageId":"253","endLine":8,"endColumn":81},{"ruleId":"250","severity":1,"message":"289","line":8,"column":83,"nodeType":"252","messageId":"253","endLine":8,"endColumn":95},{"ruleId":"250","severity":1,"message":"290","line":9,"column":10,"nodeType":"252","messageId":"253","endLine":9,"endColumn":23},{"ruleId":"250","severity":1,"message":"285","line":7,"column":8,"nodeType":"252","messageId":"253","endLine":7,"endColumn":22},{"ruleId":"250","severity":1,"message":"286","line":8,"column":8,"nodeType":"252","messageId":"253","endLine":8,"endColumn":25},{"ruleId":"250","severity":1,"message":"291","line":9,"column":8,"nodeType":"252","messageId":"253","endLine":9,"endColumn":21},{"ruleId":"250","severity":1,"message":"287","line":10,"column":10,"nodeType":"252","messageId":"253","endLine":10,"endColumn":29},{"ruleId":"250","severity":1,"message":"265","line":10,"column":31,"nodeType":"252","messageId":"253","endLine":10,"endColumn":50},{"ruleId":"250","severity":1,"message":"288","line":10,"column":71,"nodeType":"252","messageId":"253","endLine":10,"endColumn":81},{"ruleId":"250","severity":1,"message":"289","line":10,"column":83,"nodeType":"252","messageId":"253","endLine":10,"endColumn":95},{"ruleId":"250","severity":1,"message":"292","line":79,"column":12,"nodeType":"252","messageId":"253","endLine":79,"endColumn":20},{"ruleId":"250","severity":1,"message":"293","line":99,"column":12,"nodeType":"252","messageId":"253","endLine":99,"endColumn":18},{"ruleId":"294","severity":1,"message":"295","line":25,"column":65,"nodeType":"296","messageId":"297","endLine":25,"endColumn":67},{"ruleId":"250","severity":1,"message":"298","line":6,"column":10,"nodeType":"252","messageId":"253","endLine":6,"endColumn":31},{"ruleId":"299","severity":1,"message":"300","line":26,"column":43,"nodeType":"301","messageId":"302","endLine":26,"endColumn":44},{"ruleId":"259","severity":1,"message":"260","line":35,"column":26,"nodeType":"261","messageId":"257","endLine":35,"endColumn":28},{"ruleId":"299","severity":1,"message":"300","line":74,"column":39,"nodeType":"301","messageId":"302","endLine":74,"endColumn":40},{"ruleId":"259","severity":1,"message":"260","line":81,"column":26,"nodeType":"261","messageId":"257","endLine":81,"endColumn":28},{"ruleId":"299","severity":1,"message":"300","line":120,"column":36,"nodeType":"301","messageId":"302","endLine":120,"endColumn":37},{"ruleId":"250","severity":1,"message":"303","line":122,"column":9,"nodeType":"252","messageId":"253","endLine":122,"endColumn":13},{"ruleId":"259","severity":1,"message":"260","line":122,"column":27,"nodeType":"261","messageId":"257","endLine":122,"endColumn":29},{"ruleId":"259","severity":1,"message":"260","line":128,"column":26,"nodeType":"261","messageId":"257","endLine":128,"endColumn":28},{"ruleId":"250","severity":1,"message":"264","line":1,"column":17,"nodeType":"252","messageId":"253","endLine":1,"endColumn":25},{"ruleId":"250","severity":1,"message":"264","line":1,"column":17,"nodeType":"252","messageId":"253","endLine":1,"endColumn":25},"no-native-reassign",["304"],"no-negated-in-lhs",["305"],"no-unused-vars","'EventForm' is defined but never used.","Identifier","unusedVar","no-dupe-keys","Duplicate key 'description'.","ObjectExpression","unexpected","Duplicate key 'textColor'.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'ChangeURLPH' is assigned a value but never used.","'EditTime' is assigned a value but never used.","'useState' is defined but never used.","'CheckCircleOutlined' is defined but never used.","'CheckCircleFilled' is defined but never used.","'SubmitButton' is defined but never used.","'RadioButtonUncheckedIcon' is defined but never used.","'RadioButtonCheckedIcon' is defined but never used.","'ShowDateStle' is assigned a value but never used.","'getTitle' is assigned a value but never used.","'getDescription' is assigned a value but never used.","'getURL' is assigned a value but never used.","'getFormDate' is assigned a value but never used.","'getToDate' is assigned a value but never used.","'StartHours' is assigned a value but never used.","'StartMinuts' is assigned a value but never used.","'EndHours' is assigned a value but never used.","'EndMinuts' is assigned a value but never used.","'TimeClicked' is assigned a value but never used.","'GetRepeatedDays' is assigned a value but never used.","'useEffect' is defined but never used.","'Title' is defined but never used.","'todayStr' is assigned a value but never used.","'VisibilityIcon' is defined but never used.","'VisibilityOffIcon' is defined but never used.","'CloseCircleOutlined' is defined but never used.","'EditFilled' is defined but never used.","'EditOutlined' is defined but never used.","'createEventId' is defined but never used.","'DateRangeIcon' is defined but never used.","'fromData' is assigned a value but never used.","'ToData' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'ControlCameraOutlined' is defined but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'name' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]