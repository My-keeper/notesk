[{"/Users/mero/projects/notesk/src/index.js":"1","/Users/mero/projects/notesk/src/App.js":"2","/Users/mero/projects/notesk/src/serviceWorker.js":"3","/Users/mero/projects/notesk/src/API/test.js":"4","/Users/mero/projects/notesk/src/API/Weather.js":"5","/Users/mero/projects/notesk/src/Routes/Calendar/Calendar.js":"6","/Users/mero/projects/notesk/src/Routes/Signup/Signup.js":"7","/Users/mero/projects/notesk/src/Routes/Login/Login.js":"8","/Users/mero/projects/notesk/src/Routes/Notes/Notes.js":"9","/Users/mero/projects/notesk/src/Routes/Calendar/CalendarCollection.js":"10","/Users/mero/projects/notesk/src/API/API.js":"11","/Users/mero/projects/notesk/src/Routes/Signup/SignupForm.js":"12","/Users/mero/projects/notesk/src/UI/UserInput.js":"13","/Users/mero/projects/notesk/src/UI/NavBar.js":"14","/Users/mero/projects/notesk/src/UI/Imag.js":"15","/Users/mero/projects/notesk/src/UI/Footer.js":"16","/Users/mero/projects/notesk/src/Routes/Login/LoginForm.js":"17","/Users/mero/projects/notesk/src/UI/Button.js":"18","/Users/mero/projects/notesk/src/Routes/Notes/Note/Note.js":"19","/Users/mero/projects/notesk/src/Routes/Notes/CreateNote/CreateNote.js":"20","/Users/mero/projects/notesk/src/Routes/Calendar/CalendarForm.js":"21","/Users/mero/projects/notesk/src/UI/Modal.js":"22","/Users/mero/projects/notesk/src/UI/Switch.js":"23","/Users/mero/projects/notesk/src/UI/UserIcon.js":"24","/Users/mero/projects/notesk/src/Routes/Calendar/ScheduleForm/Schedule.js":"25","/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/EvenForm.js":"26","/Users/mero/projects/notesk/src/UI/TextArea.js":"27","/Users/mero/projects/notesk/src/Routes/Calendar/event-utils.js":"28","/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/EditEventForm.js":"29","/Users/mero/projects/notesk/src/Routes/Calendar/ScheduleForm/Containers/TextInputContainer.js":"30","/Users/mero/projects/notesk/src/Routes/Calendar/ScheduleForm/Containers/DaysContainer.js":"31","/Users/mero/projects/notesk/src/Routes/Calendar/ScheduleForm/Containers/SubmitButton.js":"32","/Users/mero/projects/notesk/src/Routes/Calendar/ScheduleForm/Containers/Date-TimeContainer.js":"33","/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/Bottons/DeleteButton.js":"34","/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/Bottons/EditButton.js":"35","/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/Bottons/submitChanges.js":"36","/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/Containers/TextInputContainer.js":"37","/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/Containers/Date-TimeContainer.js":"38","/Users/mero/projects/notesk/src/Routes/Calendar/DataCollection/TimeSelected.js":"39","/Users/mero/projects/notesk/src/Routes/Calendar/DataCollection/RepeatedDaysSelected.js":"40","/Users/mero/projects/notesk/src/Routes/Calendar/DataCollection/DateSelected.js":"41","/Users/mero/projects/notesk/src/UI/Select.js":"42","/Users/mero/projects/notesk/src/UI/logo.js":"43","/Users/mero/projects/notesk/src/Routes/Calendar/ScheduleForm/Containers/DisplayContainer.js":"44","/Users/mero/projects/notesk/src/Routes/Calendar/DataCollection/DisplaySelected.js":"45","/Users/mero/projects/notesk/src/Routes/Calendar/DataCollection/OptionsForm.js":"46","/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/Containers/DisplayContainer.js":"47","/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/HoverTitle.js":"48"},{"size":481,"mtime":1614537204644,"results":"49","hashOfConfig":"50"},{"size":2670,"mtime":1615154860562,"results":"51","hashOfConfig":"50"},{"size":5086,"mtime":1614537204644,"results":"52","hashOfConfig":"50"},{"size":1926,"mtime":1615238338304,"results":"53","hashOfConfig":"50"},{"size":1102,"mtime":1614973270057,"results":"54","hashOfConfig":"50"},{"size":812,"mtime":1614974508815,"results":"55","hashOfConfig":"50"},{"size":956,"mtime":1615166323770,"results":"56","hashOfConfig":"50"},{"size":910,"mtime":1615168166254,"results":"57","hashOfConfig":"50"},{"size":6546,"mtime":1615601255279,"results":"58","hashOfConfig":"50"},{"size":5266,"mtime":1615657841940,"results":"59","hashOfConfig":"50"},{"size":5455,"mtime":1615516112663,"results":"60","hashOfConfig":"50"},{"size":13654,"mtime":1615164421671,"results":"61","hashOfConfig":"50"},{"size":4309,"mtime":1615572192655,"results":"62","hashOfConfig":"50"},{"size":5314,"mtime":1615657629775,"results":"63","hashOfConfig":"50"},{"size":436,"mtime":1614973270090,"results":"64","hashOfConfig":"50"},{"size":521,"mtime":1614537204642,"results":"65","hashOfConfig":"50"},{"size":6478,"mtime":1615382313583,"results":"66","hashOfConfig":"50"},{"size":2896,"mtime":1615517045597,"results":"67","hashOfConfig":"50"},{"size":9218,"mtime":1615664916301,"results":"68","hashOfConfig":"50"},{"size":8426,"mtime":1615665931769,"results":"69","hashOfConfig":"50"},{"size":10700,"mtime":1615670114140,"results":"70","hashOfConfig":"50"},{"size":3554,"mtime":1615564440185,"results":"71","hashOfConfig":"50"},{"size":4812,"mtime":1614974508826,"results":"72","hashOfConfig":"50"},{"size":930,"mtime":1614974508826,"results":"73","hashOfConfig":"50"},{"size":10640,"mtime":1615666247612,"results":"74","hashOfConfig":"50"},{"size":6804,"mtime":1615665818609,"results":"75","hashOfConfig":"50"},{"size":3178,"mtime":1615573662788,"results":"76","hashOfConfig":"50"},{"size":85,"mtime":1615663799939,"results":"77","hashOfConfig":"50"},{"size":11149,"mtime":1615657383145,"results":"78","hashOfConfig":"50"},{"size":4685,"mtime":1615666247611,"results":"79","hashOfConfig":"50"},{"size":1127,"mtime":1614974508820,"results":"80","hashOfConfig":"50"},{"size":1862,"mtime":1615663667257,"results":"81","hashOfConfig":"50"},{"size":9080,"mtime":1614974508820,"results":"82","hashOfConfig":"50"},{"size":1287,"mtime":1615399529835,"results":"83","hashOfConfig":"50"},{"size":894,"mtime":1615406712637,"results":"84","hashOfConfig":"50"},{"size":2379,"mtime":1615663653460,"results":"85","hashOfConfig":"50"},{"size":5351,"mtime":1614974508819,"results":"86","hashOfConfig":"50"},{"size":12161,"mtime":1615399911562,"results":"87","hashOfConfig":"50"},{"size":4053,"mtime":1615655561289,"results":"88","hashOfConfig":"50"},{"size":3374,"mtime":1615655515514,"results":"89","hashOfConfig":"50"},{"size":6425,"mtime":1615655160833,"results":"90","hashOfConfig":"50"},{"size":3140,"mtime":1614973270092,"results":"91","hashOfConfig":"50"},{"size":436,"mtime":1615404669669,"results":"92","hashOfConfig":"50"},{"size":1185,"mtime":1615657060545,"results":"93","hashOfConfig":"50"},{"size":1333,"mtime":1615656828003,"results":"94","hashOfConfig":"50"},{"size":3880,"mtime":1615655559272,"results":"95","hashOfConfig":"50"},{"size":1127,"mtime":1615657364653,"results":"96","hashOfConfig":"50"},{"size":2757,"mtime":1615669544688,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"7nz38j",{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"100"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"100"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"100"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"100"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"100"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"100"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"100"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"100"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"100"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"100"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"100"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"100"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"100"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"100"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mero/projects/notesk/src/index.js",[],["209","210"],"/Users/mero/projects/notesk/src/App.js",[],"/Users/mero/projects/notesk/src/serviceWorker.js",[],"/Users/mero/projects/notesk/src/API/test.js",[],"/Users/mero/projects/notesk/src/API/Weather.js",[],"/Users/mero/projects/notesk/src/Routes/Calendar/Calendar.js",[],"/Users/mero/projects/notesk/src/Routes/Signup/Signup.js",["211"],"import React, {useEffect} from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Nav from \"../../UI/NavBar\";\nimport SignupForm from \"./SignupForm\"; \nimport Imag from \"../../UI/Imag\"; \nimport API from \"../../API/API\";\n\n\nconst Signup = (props) => {\n  let history = useHistory()\n  useEffect( () => {\n    async function CheckingIsLoggedIn() {\n      const isLoggedIn = await API.isLoggedIn();\n      if (isLoggedIn) {\n        history.push(\"/\");\n      }\n    }\n\n    CheckingIsLoggedIn()\n  } , []) \n\n  return (\n    <div style={{ height: \"800px\", overflowY : \"auto\" }}>\n      <Nav ColorChanged={props.colorchanged} \n        RecieveColor={props.Color} \n        showLoginButton={true}\n        showSignUpButton={false}\n        showLogOutButton={false}\n        CallingPage={\"Signin\"}\n        username={null}\n      />\n      <Imag/>  \n      <SignupForm ColorChanged={props.colorchanged} RecieveColor={props.Color}/>\n    </div>\n  );\n};\n\nexport default Signup;\n","/Users/mero/projects/notesk/src/Routes/Login/Login.js",["212"],"import React, {useEffect} from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Nav from \"../../UI/NavBar\";\nimport LoginForm from \"./LoginForm\";\nimport Imag from \"../../UI/Imag\"; \nimport API from \"../../API/API\";\n\nconst Login = (props) => {\n  let history = useHistory()\n  useEffect( () => {\n    async function CheckingIsLoggedIn() {\n      const isLoggedIn = await API.isLoggedIn();\n      if (isLoggedIn) {\n        history.push(\"/\");\n      }\n    }\n\n    CheckingIsLoggedIn()\n  } , []) \n\n  return (\n    <div>\n      <Nav \n        ColorChanged={props.colorchanged} \n        RecieveColor={props.Color} \n        CallingPage={\"Signup\"}\n        showLoginButton={false}\n        showSignUpButton={true}\n        showLogOutButton={false}\n        username={null}\n      />\n      <Imag/>  \n      <LoginForm ColorChanged={props.colorchanged} RecieveColor={props.Color}/>\n    </div>\n  );\n};\n\nexport default Login;\n","/Users/mero/projects/notesk/src/Routes/Notes/Notes.js",["213","214","215","216","217","218"],"import React, { Component } from 'react';\nimport Nav from '../../UI/NavBar'\nimport Note from './Note/Note'\nimport Footer from '../../UI/Footer'\nimport CreateNote from './CreateNote/CreateNote'\nimport FadeIn from 'react-fade-in';\nimport { Link } from \"react-router-dom\";\nimport { LogoutOutlined } from \"@ant-design/icons\";\nimport Button from \"../../UI/Button\"; \nimport API from \"../../API/API\";\nimport { CloudDone } from '@material-ui/icons';\n\nclass Notes extends Component {\n\n    //to get the notes from the DB if any\n    async componentDidMount() {\n        const isLoggedIn = await API.isLoggedIn();\n        if (isLoggedIn) {\n          const PrevNotes = [...this.state.notes];\n          const DBNotes = await API.GetNote();\n          const MergedNotes = DBNotes.data.concat(PrevNotes);\n          this.setState({ notes: MergedNotes });\n        }\n      }\n    state = {\n        notes: [],\n        isLogOut: false,\n        titleRowsNumber: \"\",\n        ChangetitleClicked: true,\n        ChangeContentClicked:true\n      };\n\n    //Close is not hovered on color style\n    VisibilityStle1 = {\n        marginRight: \"8px\",\n        fontSize: \"22px\",\n        color: this.props.Color.NavIconColor,\n      };\n\n    /*************************************************** Adding Notes *****************************************************************************/\n    addNote = (note) => {\n      const prevNote = [...this.state.notes];\n      prevNote.unshift(note);\n      this.setState({ notes: prevNote });\n    };\n    /*************************************************** Deleting Notes *****************************************************************************/\n    deleteNote = (id) => {\n      const Delete = [...this.state.notes];\n      Delete.splice(id, 1);\n      this.setState({ notes: Delete });\n      if (!this.state.isLogOut) {\n        API.DeleteNote(id)\n      }\n    };\n    /*************************************************** Changing Notes *****************************************************************************/\n    onChangeTitle = (id, newTitle) => {\n      var OldContent = \"\"\n      const newNoteTitle = [...this.state.notes].filter((NoteId, index) => {\n          if (!this.state.isLogOut && NoteId['_id'] == id) {OldContent = NoteId.content}\n          return( !this.state.isLogOut ? NoteId['_id'] == id : index === id)\n        })[0];\n      if (newNoteTitle) {\n          newNoteTitle.title = newTitle;\n          const newNotes = [...this.state.notes];\n          newNotes[id] = newNoteTitle;\n          this.setState({ notes: newNotes });\n          if (!this.state.isLogOut) {\n            API.UpdateNote(id, newTitle, OldContent)\n          }\n        }\n    };\n    onChangeContent = (id, newContent) => {\n      var OldTitle = \"\"\n      const newNoteContent = [...this.state.notes].filter((NoteId, index) => {\n          if (!this.state.isLogOut && NoteId['_id'] == id) {OldTitle = NoteId.title}\n          return !this.state.isLogOut ? NoteId['_id'] == id : index === id;\n        })[0];\n      if (newNoteContent) {\n          newNoteContent.content = newContent;\n          const newNotes = [...this.state.notes];\n          newNotes[id] = newNoteContent;\n          this.setState({ notes: newNotes });\n          if (!this.state.isLogOut) {\n            API.UpdateNote(id, OldTitle, newContent)\n          }\n        }\n    };\n    /*************************************************** The Note *****************************************************************************/\n    NoteItems = () => { \n      return [...this.state.notes].map((eachItem, i) => { \n        const id_Value = !this.state.isLogOut ? eachItem['_id'] : i\n        return (\n            <Note\n              isTitleValue={this.state.ChangetitleClicked}  \n              isContent={this.state.ChangeContentClicked}  \n              NumberOfLitters={this.state.titleRowsNumber}\n              RecieveColor={this.props.Color}\n              key={i}\n              id={id_Value}\n              title={eachItem.title}\n              content={eachItem.content}\n              onDelete={this.deleteNote}\n              ChangeTitle={this.onChangeTitle}\n              ChangeContent={this.onChangeContent}\n            />\n        );\n      });\n    };\n    /*************************************************** The Note *****************************************************************************/\n    //for Logginout\n    handlerLogout = async () => {\n        // const isLoggedIn = await API.isLoggedIn();\n        // if (isLoggedIn) {\n          await API.Logout()\n          // () => this.history.push(\"/\");\n        // }\n      };\n    IsLogout = <div\n        style={{\n          zIndex: \"7\",\n          position: \"absolute\",\n          display: \"flex\",\n          justifyContent: \"flex-end\",\n          right: \"30px\",\n          top: \"4.5%\",\n        }}\n      >\n        <FadeIn> \n            <Button\n              onClick={this.handlerLogout}\n              position={\"relative\"}\n              width={\"140px\"}\n              padding={\"15px\"}\n              boxShadowValue={\"0 1px 5px rgb(138, 137, 137)\"}\n              borderRadiusValue={\"20px\"}\n              fontSizeValue={\"1.2em\"}\n              marginTopValue={\"5%\"}\n              resizeValue={\"both\"}\n              text={\"Logout\"}\n              LeftValue={\"70%\"}\n              backGroundColorValue={this.props.Color.LogSignColor}\n              FontColorValue={this.props.Color.IconC}\n              borderColorValue={this.props.Color.BorderColor}\n              icon={<LogoutOutlined style={this.VisibilityStle1} />}\n            /> \n        </FadeIn>\n      </div>\n  /*************************************************** The Note Route *****************************************************************************/\n  render() { \n    return (\n      <div style={{ height: \"100%\" }}>\n        {this.state.isLogOut ? this.IsLogout : null}\n        <Nav\n          username={\"Mero\"}\n          ColorChanged={this.props.colorchanged}\n          RecieveColor={this.props.Color}\n          showLogOutButton={true}\n          isShowLogOutButton={(value) => this.setState({ isLogOut: value })}\n          ShowLogOutButtonValue={this.state.isLogOut}\n        />\n        <FadeIn>\n          <CreateNote\n            RecieveColor={this.props.Color}\n            AddedNote={this.addNote}\n            TitleLitterNumber={(value) => this.setState({titleRowsNumber: value})}\n          />\n        </FadeIn>\n            <div style={{ height: \"70%\", overflow: \"auto\", paddingLeft: \"56px\"}}>\n                {this.NoteItems()}\n            </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default Notes;\n","/Users/mero/projects/notesk/src/Routes/Calendar/CalendarCollection.js",["219"],"/Users/mero/projects/notesk/src/API/API.js",[],"/Users/mero/projects/notesk/src/Routes/Signup/SignupForm.js",["220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235"],"import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { UserOutlined, MailOutlined, KeyOutlined, LoginOutlined, UserAddOutlined, HomeOutlined} from \"@ant-design/icons\";\nimport UserInput from \"../../UI/UserInput\";\nimport NoteContainer from '../../UI/Modal';\nimport Button from \"../../UI/Button\";\nimport FadeIn  from \"react-fade-in\";\nimport { Link } from \"react-router-dom\";\nimport API from \"../../API/API\";\nimport { useHistory } from \"react-router-dom\";\n\nconst InfoContainer = styled.div`\n    width: 440px;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: flex-start;\n    margin: 4px;\n    margin-bottom: 10px;\n`\n\nconst SignupForm = (props) => {\n    const IconColor = { \n        color : props.RecieveColor.IconC, \n        fontSize:\"25px\", \n        marginRight:\"9px\", \n        marginTop:\"4px\" }\n    \n    const ButtonIconColor = { \n        color : props.RecieveColor.IconC, \n        fontSize:\"20px\", \n        marginRight:\"9px\", \n        marginTop:\"4px\" }\n    /***********************************************************/    \n    //Input Value\n    const [FirstNameValue, ChangeFirstName] = useState(\"\")\n    const [LastNameValue, ChangeLastName] = useState(\"\")\n    const [UserNameValue, ChangeUserName] = useState(\"\")\n    const [EmailValue, ChangeEmail] = useState(\"\")\n    const [PassWordValue, ChangePassWord] = useState(\"\")\n    const [ConfirmPasswordValue, ChangeConfirmPassword] = useState(\"\")\n    const [CountryValue, ChangeCountry] = useState(\"\")\n    const [ProvinceValue, ChangeProvince] = useState(\"\")\n    const [CityValue, ChangeCity] = useState(\"\")\n    const [ZipCodeValue, ChangeZipCode] = useState(\"\")\n\n    /***********************************************************/    \n    //For Validating\n    const[usernameValid, ChangeusernameValid] = useState(false)\n    const[emailValid, ChangeemailValid] = useState(false)\n    const[passwordLen, ChangepasswordLen] = useState(false)\n    const[passwordLetter, ChangepasswordLetter] = useState(false)\n    const[passwordNumber, ChangepasswordNumber] = useState(false)\n    const[passwordSpecial, ChangepasswordSpecial] = useState(false)\n    const[confirmPasswordMatched, ChangeconfirmPasswordMatched] = useState(false)\n    const[signUpValid,ChangesignUpValid] = useState(false)\n\n\n    /***********************************************************/  \n    const FirstName = <FadeIn><UserInput \n            InputValue={FirstNameValue}\n            onchangeValue={(v)=>ChangeFirstName(v.target.value)}\n            inputType={\"text\"}\n            name=\"title\"\n            PlaceholderValue={\"FirstName\"}\n            widthValue={\"184px\"}\n            paddingVale={\"4px\"}\n            outlineValue={\"none\"}\n            fontSizeValue={\"1.2em\"}\n            fontFamilyValue={\"inherit\"}\n            IsCalledValue={\"FOCUS\"} \n            borderRadiusValue= {\"7px\"}\n            backGroundColorValue={props.RecieveColor.UserInputBGC}\n            FontColorValue={props.RecieveColor.UserInputFC}\n            PlaceHolderColorValue={props.RecieveColor.UserInputPHC}\n            borderColorValue={props.RecieveColor.BorderColor}\n            BorderValue={\"solid\"}\n            borderWidthValue=\"thin\"\n            marginRightValue={\"10px\"}\n        /></FadeIn>\n    \n    const LastName = <FadeIn><UserInput \n            InputValue={LastNameValue}\n            onchangeValue={(v)=>ChangeLastName(v.target.value)}\n            inputType={\"text\"}\n            name=\"title\"\n            PlaceholderValue={\"LastName\"}\n            widthValue={\"184px\"}\n            paddingVale={\"4px\"}\n            outlineValue={\"none\"}\n            fontSizeValue={\"1.2em\"}\n            fontFamilyValue={\"inherit\"}\n            IsCalledValue={\"FOCUS\"} \n            borderRadiusValue= {\"7px\"}\n            backGroundColorValue={props.RecieveColor.UserInputBGC}\n            FontColorValue={props.RecieveColor.UserInputFC}\n            PlaceHolderColorValue={props.RecieveColor.UserInputPHC}\n            borderColorValue={props.RecieveColor.BorderColor}\n            BorderValue={\"solid\"}\n            borderWidthValue=\"thin\"\n            marginRightValue={\"10px\"}\n        /></FadeIn> \n    \n    const PersonalInfo = <InfoContainer>\n            <FadeIn><UserOutlined style={IconColor}/></FadeIn>\n            {FirstName}\n            {LastName} \n        </InfoContainer>\n\n    const Username = <InfoContainer>\n            <FadeIn><UserAddOutlined style={IconColor}/></FadeIn>\n            <FadeIn><UserInput\n            InputValue={UserNameValue}\n            onchangeValue={(v)=>ChangeUserName(v.target.value)} \n            inputType={\"text\"}\n            name=\"title\"\n            PlaceholderValue={\"UserNamr\"}\n            widthValue={\"380px\"}\n            paddingVale={\"4px\"}\n            outlineValue={\"none\"}\n            fontSizeValue={\"1.2em\"}\n            fontFamilyValue={\"inherit\"}\n            IsCalledValue={\"FOCUS\"} \n            borderRadiusValue= {\"7px\"}\n            backGroundColorValue={props.RecieveColor.UserInputBGC}\n            FontColorValue={props.RecieveColor.UserInputFC}\n            PlaceHolderColorValue={props.RecieveColor.UserInputPHC}\n            borderColorValue={props.RecieveColor.BorderColor}\n            BorderValue={\"solid\"}\n            borderWidthValue=\"thin\"\n            marginRightValue={\"10px\"}\n            /></FadeIn>\n        </InfoContainer>\n\n    const Email = <InfoContainer>\n            <FadeIn><MailOutlined style={IconColor}/></FadeIn>\n            <FadeIn><UserInput \n            InputValue={EmailValue}\n            onchangeValue={(v)=>ChangeEmail(v.target.value)} \n            inputType={\"text\"}\n            name=\"title\"\n            PlaceholderValue={\"E-mail\"}\n            widthValue={\"380px\"}\n            paddingVale={\"4px\"}\n            outlineValue={\"none\"}\n            fontSizeValue={\"1.2em\"}\n            fontFamilyValue={\"inherit\"}\n            IsCalledValue={\"FOCUS\"} \n            borderRadiusValue= {\"7px\"}\n            backGroundColorValue={props.RecieveColor.UserInputBGC}\n            FontColorValue={props.RecieveColor.UserInputFC}\n            PlaceHolderColorValue={props.RecieveColor.UserInputPHC}\n            borderColorValue={props.RecieveColor.BorderColor}\n            BorderValue={\"solid\"}\n            borderWidthValue=\"thin\"\n            marginRightValue={\"10px\"}\n            /></FadeIn>\n        </InfoContainer>\n    \n    const PassWord = <InfoContainer>\n            <FadeIn><KeyOutlined style={IconColor}/></FadeIn>\n            <FadeIn><UserInput \n            InputValue={PassWordValue}\n            onchangeValue={(v)=>ChangePassWord(v.target.value)} \n            inputType={\"Password\"}\n            name=\"title\"\n            PlaceholderValue={\"Password\"}\n            widthValue={\"380px\"}\n            paddingVale={\"4px\"}\n            outlineValue={\"none\"}\n            fontSizeValue={\"1.2em\"}\n            fontFamilyValue={\"inherit\"}\n            IsCalledValue={\"FOCUS\"} \n            borderRadiusValue= {\"7px\"}\n            backGroundColorValue={props.RecieveColor.UserInputBGC}\n            FontColorValue={props.RecieveColor.UserInputFC}\n            PlaceHolderColorValue={props.RecieveColor.UserInputPHC}\n            borderColorValue={props.RecieveColor.BorderColor}\n            BorderValue={\"solid\"}\n            borderWidthValue=\"thin\"\n            marginRightValue={\"10px\"}\n            /></FadeIn>\n        </InfoContainer>\n\n    const ConfirmPassWord = <InfoContainer>\n            <FadeIn><KeyOutlined style={IconColor}/></FadeIn>\n            <FadeIn><UserInput \n            InputValue={ConfirmPasswordValue}\n            onchangeValue={(v)=>ChangeConfirmPassword(v.target.value)} \n            inputType={\"Password\"}\n            name=\"title\"\n            PlaceholderValue={\"Confirm PassWord\"}\n            widthValue={\"380px\"}\n            paddingVale={\"4px\"}\n            outlineValue={\"none\"}\n            fontSizeValue={\"1.2em\"}\n            fontFamilyValue={\"inherit\"}\n            IsCalledValue={\"FOCUS\"} \n            borderRadiusValue= {\"7px\"}\n            backGroundColorValue={props.RecieveColor.UserInputBGC}\n            FontColorValue={props.RecieveColor.UserInputFC}\n            PlaceHolderColorValue={props.RecieveColor.UserInputPHC}\n            borderColorValue={props.RecieveColor.BorderColor}\n            BorderValue={\"solid\"}\n            borderWidthValue=\"thin\"\n            marginRightValue={\"10px\"}\n            /></FadeIn>\n        </InfoContainer>   \n\n    const Country =<FadeIn><UserInput \n        InputValue={CountryValue}\n        onchangeValue={(v)=>ChangeCountry(v.target.value)} \n        inputType={\"text\"}\n        name=\"title\"\n        PlaceholderValue={\"Country\"}\n        widthValue={\"184px\"}\n        paddingVale={\"4px\"}\n        outlineValue={\"none\"}\n        fontSizeValue={\"1.2em\"}\n        fontFamilyValue={\"inherit\"}\n        IsCalledValue={\"FOCUS\"} \n        borderRadiusValue= {\"7px\"}\n        backGroundColorValue={props.RecieveColor.UserInputBGC}\n        FontColorValue={props.RecieveColor.UserInputFC}\n        PlaceHolderColorValue={props.RecieveColor.UserInputPHC}\n        borderColorValue={props.RecieveColor.BorderColor}\n        BorderValue={\"solid\"}\n        borderWidthValue=\"thin\"\n        marginRightValue={\"10px\"}\n    /></FadeIn>\n\n    const Province = <FadeIn><UserInput \n        InputValue={ProvinceValue}\n        onchangeValue={(v)=>ChangeProvince(v.target.value)} \n        inputType={\"text\"}\n        name=\"title\"\n        PlaceholderValue={\"Province\"}\n        widthValue={\"184px\"}\n        paddingVale={\"4px\"}\n        outlineValue={\"none\"}\n        fontSizeValue={\"1.2em\"}\n        fontFamilyValue={\"inherit\"}\n        IsCalledValue={\"FOCUS\"} \n        borderRadiusValue= {\"7px\"}\n        backGroundColorValue={props.RecieveColor.UserInputBGC}\n        FontColorValue={props.RecieveColor.UserInputFC}\n        PlaceHolderColorValue={props.RecieveColor.UserInputPHC}\n        borderColorValue={props.RecieveColor.BorderColor}\n        BorderValue={\"solid\"}\n        borderWidthValue=\"thin\"\n        marginRightValue={\"10px\"}\n    /></FadeIn>\n\n    const City = <FadeIn><UserInput \n        InputValue={CityValue}\n        onchangeValue={(v)=>ChangeCity(v.target.value)} \n        inputType={\"text\"}\n        name=\"title\"\n        PlaceholderValue={\"City\"}\n        widthValue={\"184px\"}\n        paddingVale={\"4px\"}\n        outlineValue={\"none\"}\n        fontSizeValue={\"1.2em\"}\n        fontFamilyValue={\"inherit\"}\n        IsCalledValue={\"FOCUS\"} \n        borderRadiusValue= {\"7px\"}\n        backGroundColorValue={props.RecieveColor.UserInputBGC}\n        FontColorValue={props.RecieveColor.UserInputFC}\n        PlaceHolderColorValue={props.RecieveColor.UserInputPHC}\n        borderColorValue={props.RecieveColor.BorderColor}\n        BorderValue={\"solid\"}\n        borderWidthValue=\"thin\"\n        marginRightValue={\"10px\"}\n        marginTopValue={\"10px\"}\n        marginLeftValue={\"34px\"}\n    /></FadeIn>\n\n    const ZipCode = <FadeIn><UserInput \n        InputValue={ZipCodeValue}\n        onchangeValue={(v)=>ChangeZipCode(v.target.value)} \n        inputType={\"text\"}\n        name=\"title\"\n        PlaceholderValue={\"ZipCode\"}\n        widthValue={\"184px\"}\n        paddingVale={\"4px\"}\n        outlineValue={\"none\"}\n        fontSizeValue={\"1.2em\"}\n        fontFamilyValue={\"inherit\"}\n        IsCalledValue={\"FOCUS\"} \n        borderRadiusValue= {\"7px\"}\n        backGroundColorValue={props.RecieveColor.UserInputBGC}\n        FontColorValue={props.RecieveColor.UserInputFC}\n        PlaceHolderColorValue={props.RecieveColor.UserInputPHC}\n        borderColorValue={props.RecieveColor.BorderColor}\n        BorderValue={\"solid\"}\n        borderWidthValue=\"thin\"\n        marginTopValue={\"10px\"}\n        marginRightValue={\"10px\"}\n    /></FadeIn>\n\n    const Location = <InfoContainer>\n        <FadeIn><HomeOutlined style={IconColor}/></FadeIn>\n        {Country}\n        {Province}\n        {City}\n        {ZipCode}\n    </InfoContainer>\n\n    let history = useHistory()\n    const SignUp = () => {\n        \n        API.singUp(\n            FirstNameValue,\n            LastNameValue,\n            EmailValue,\n            PassWordValue,\n            ()=> history.push(\"/\"),\n            (err) => {\n                if (err) {\n                    \n                }\n            }\n        )\n    }\n\nconst SignupButton = <FadeIn>\n        <Button\n        width={\"120px\"}\n        marginBottomValue={\"10px\"}\n        marginTopValue={\"5px\"}\n        marginLeftValue={\"40%\"}\n        fontSizeValue={\"20px\"}\n        borderRadiusValue={\"15px\"}\n        backGroundColorValue={props.RecieveColor.LogSignColor}\n        FontColorValue={props.RecieveColor.IconC}\n        borderColorValue={props.RecieveColor.BorderColor}\n        BorderValue=\"solid\"\n        borderWidthValue=\"thin\"\n        paddingInputValue=\"3px\"\n        text = {\"SignUp\"} \n        icon = {<LoginOutlined style={ButtonIconColor}/>}\n        onClick={SignUp}\n        />\n    </FadeIn>\n\nconst ReturnToLogin =<FadeIn>\n        <span style={{color: props.RecieveColor.UserInputFC , fontSize: \"1.2em\" }}>\n            Already have an acount? \n            <Link to={\"/login\"} style={{color : props.RecieveColor.IconC }}> Login</Link>\n        </span>\n    </FadeIn>\n\nreturn (\n  <FadeIn>\n    <NoteContainer\n      position={\"relative\"}\n      width={\"470px\"}\n      margin={\"220px auto 20px auto\"}\n      padding={\"15px\"}\n      boxShadowValue={\"0 1px 5px rgb(138, 137, 137)\"}\n      borderRadiusValue={\"20px\"}\n      resizeValue={\"both\"}\n      backGroundColorValue={props.RecieveColor.NotekBGC}\n    >\n      {PersonalInfo}\n      {Username}\n      {Email}\n      {PassWord}\n      {ConfirmPassWord}\n      {Location}\n      {SignupButton}\n      <hr style={{marginBottom : \"10px\"}}></hr>\n      {ReturnToLogin}\n    </NoteContainer>\n  </FadeIn>\n);\n};\n\nexport default SignupForm; ","/Users/mero/projects/notesk/src/UI/UserInput.js",[],"/Users/mero/projects/notesk/src/UI/NavBar.js",["236","237","238"],"/Users/mero/projects/notesk/src/UI/Imag.js",[],"/Users/mero/projects/notesk/src/UI/Footer.js",[],"/Users/mero/projects/notesk/src/Routes/Login/LoginForm.js",["239","240","241","242"],"import React, {useState} from \"react\";\nimport styled from \"styled-components\";\nimport { MailOutlined, KeyOutlined, LoginOutlined,CloseOutlined} from \"@ant-design/icons\";\nimport UserInput from \"../../UI/UserInput\";\nimport NoteContainer from '../../UI/Modal';\nimport Button from \"../../UI/Button\";\nimport FadeIn  from \"react-fade-in\";\nimport { Link } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\nimport API from \"../../API/API\";\n// import passwordValidator from \"password-validator\";\n\nconst InfoContainer = styled.div`\n    width: 440px;\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    margin: 4px;\n    margin-bottom: 10px;\n`\n//For validating \n    // var passwordLength = new passwordValidator();\n    // passwordLength.is().min(8);\n\n    // var passwordLetters = new passwordValidator();\n    // passwordLetters.has().uppercase().has().lowercase();\n\n    // var passwordNumbers = new passwordValidator();\n    // passwordNumbers.has().digits();\n\n    // var passwordSymbols = new passwordValidator();\n    // passwordSymbols.has().symbols();\n\nconst SignupForm = (props) => {\n    const IconColor = { \n        color : props.RecieveColor.IconC, \n        fontSize:\"25px\", \n        marginRight:\"9px\", \n        marginTop:\"4px\" }\n    \n    const ButtonIconColor = { \n        color : props.RecieveColor.IconC, \n        fontSize:\"20px\", \n        marginRight:\"9px\", \n        marginTop:\"4px\" }\n    const [EmailValue, ChangeEmail] = useState(\"\")\n    const [EmailPHValue, ChangeEmailPH] = useState(\"E-mail\")\n    const [PasswordValue, ChangePassword] = useState(\"\")\n    const [PasswordPHValue, ChangePasswordPH] = useState(\"Password\")\n    \n    /***********************************************************/    \n    //For Validating \n    const[emailValidOrPassword, ChangeEmailValidOrPassword] = useState(false)\n    const inCorrectInput = <InfoContainer>\n        <CloseOutlined style={IconColor}/>\n        <span style={{color: props.RecieveColor.IconC, textAlign: \"center\", marginBottom: \"10px\"}}>Either the Email or The Password you’ve entered is incorrect</span>\n        </InfoContainer>\n    \n    /***********************************************************/    \n    const Email = <InfoContainer>\n            <FadeIn><MailOutlined style={IconColor}/></FadeIn>\n            <FadeIn><UserInput \n            InputValue={EmailValue}\n            onchangeValue={(v)=>ChangeEmail(v.target.value)}\n            inputType={\"text\"}\n            name=\"title\"\n            PlaceholderValue={EmailPHValue}\n            widthValue={\"380px\"}\n            paddingVale={\"4px\"}\n            outlineValue={\"none\"}\n            fontSizeValue={\"1.2em\"}\n            fontFamilyValue={\"inherit\"}\n            IsCalledValue={\"FOCUS\"} \n            borderRadiusValue= {\"7px\"}\n            backGroundColorValue={props.RecieveColor.UserInputBGC}\n            FontColorValue={props.RecieveColor.UserInputFC}\n            PlaceHolderColorValue={props.RecieveColor.UserInputPHC}\n            borderColorValue={props.RecieveColor.BorderColor}\n            BorderValue={\"solid\"}\n            borderWidthValue=\"thin\"\n            marginRightValue={\"10px\"}\n            /></FadeIn>\n        </InfoContainer>\n    \n    const PassWord = <InfoContainer>\n            <FadeIn><KeyOutlined style={IconColor}/></FadeIn>\n            <FadeIn><UserInput \n            InputValue={PasswordValue}\n            onchangeValue={(v)=>ChangePassword(v.target.value)}\n            inputType={\"Password\"}\n            name=\"title\"\n            PlaceholderValue={PasswordPHValue}\n            widthValue={\"380px\"}\n            paddingVale={\"4px\"}\n            outlineValue={\"none\"}\n            fontSizeValue={\"1.2em\"}\n            fontFamilyValue={\"inherit\"}\n            IsCalledValue={\"FOCUS\"} \n            borderRadiusValue= {\"7px\"}\n            backGroundColorValue={props.RecieveColor.UserInputBGC}\n            FontColorValue={props.RecieveColor.UserInputFC}\n            PlaceHolderColorValue={props.RecieveColor.UserInputPHC}\n            borderColorValue={props.RecieveColor.BorderColor}\n            BorderValue={\"solid\"}\n            borderWidthValue=\"thin\"\n            marginRightValue={\"10px\"}\n            /></FadeIn>\n        </InfoContainer>\n\n    let history = useHistory()\n    const LoggingIn = () => {\n        if(EmailValue == \"\" && PasswordValue == \"\") {\n            ChangeEmailPH(\"Please Enter an Email. -_-\")\n            ChangePasswordPH(\"PLease Enter a Password. -_-\")\n        } else if (EmailValue == \"\" ) {\n            ChangeEmailPH(\"Please Enter an Email. -_-\")\n        } else if(PasswordValue == \"\") {\n            ChangePasswordPH(\"PLease Enter a Password. -_-\")\n        }else {\n            API.login( \n                EmailValue, \n                PasswordValue,\n                () => (history.push(\"/\")),\n                (e) => {\n                    ChangeEmailValidOrPassword(true)\n                }\n            )\n        }\n    }   \n   const LoginButton = <FadeIn>\n            <Button\n            width={\"120px\"}\n            marginBottomValue={\"10px\"}\n            marginLeftValue={\"35%\"}\n            fontSizeValue={\"20px\"}\n            borderRadiusValue={\"15px\"}\n            backGroundColorValue={props.RecieveColor.LogSignColor}\n            FontColorValue={props.RecieveColor.IconC}\n            borderColorValue={props.RecieveColor.BorderColor}\n            BorderValue=\"solid\"\n            borderWidthValue=\"thin\"\n            paddingInputValue=\"2px\"\n            onClick={LoggingIn}\n            text = {\"Login\"} \n            icon = {<LoginOutlined style={ButtonIconColor}/>}\n            />\n        </FadeIn>\n\nconst ReturnToLogin =<FadeIn>\n        <span style={{color: props.RecieveColor.UserInputFC , fontSize: \"1.2em\" }}>\n           Create Account \n            <Link to={\"/signup\"} style={{color : props.RecieveColor.IconC }}> SignUp</Link>\n        </span>\n    </FadeIn>\n\nreturn <FadeIn>\n        <NoteContainer\n        position= {\"relative\"}\n        width= {\"470px\"}\n        margin= {\"200px auto 20px auto\"}\n        padding= {\"15px\"}\n        boxShadowValue= {\"0 1px 5px rgb(138, 137, 137)\"}\n        borderRadiusValue= {\"20px\"}\n        resizeValue={\"both\"}\n        backGroundColorValue={props.RecieveColor.NotekBGC}\n        >\n            {Email}\n            {PassWord}\n            {emailValidOrPassword ? inCorrectInput : null}\n            {LoginButton}\n            <hr style={{marginBottom : \"10px\"}}></hr>\n            {ReturnToLogin}\n        </NoteContainer>\n    </FadeIn> \n};\n\nexport default SignupForm; ","/Users/mero/projects/notesk/src/UI/Button.js",[],"/Users/mero/projects/notesk/src/Routes/Notes/Note/Note.js",[],"/Users/mero/projects/notesk/src/Routes/Notes/CreateNote/CreateNote.js",["243"],"import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { PlusCircleFilled, CheckCircleFilled} from '@ant-design/icons'\r\nimport FadeIn from 'react-fade-in';\r\nimport UserInput from '../../../UI/UserInput';\r\nimport TextArea from '../../../UI/TextArea';\r\nimport NoteContainer from '../../../UI/Modal';\r\nimport { SentimentVeryDissatisfied, Title, ImportContacts ,SentimentVerySatisfied} from '@material-ui/icons';\r\nimport API from \"../../../API/API\";\r\n\r\nconst AddNote = styled.div`\r\n    font-size :30px;\r\n    color: #f5ba13;\r\n    position: absolute;\r\n    right: 0px;\r\n    bottom: -15px;\r\n    width: 36px;\r\n    height: 36px;\r\n`\r\nconst InfoContainer = styled.div`\r\n    width: 455px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    margin: 4px;\r\n    `\r\nconst CreateNote = (props) => {\r\n    const IconColor = { color : props.RecieveColor.IconC }\r\n    const [isExpanded, setExpanded] = useState(false);\r\n    const [isSubmit, setSubmit] = useState(false); \r\n    const [CurrentNote, setNote] = useState({title: \"\",content: \"\", id: \"\"}); \r\n    const [CurrentPlaceHolde, setPlaceHolder]= useState({titlePH: \"Title\" , contentPH: \"Take a note ...\"})\r\n    const [isHover, SetHover] = useState(true);\r\n    const [TargetLength, ChangeTargetLength] = useState(\"\")\r\n    const OnHovering = () => {SetHover(!isHover)}\r\n    const subNote = async (event) =>  {\r\n        event.preventDefault();\r\n        setSubmit(true);\r\n        // if (CurrentNote.title === \"\" && CurrentNote.content === \"\" )\r\n        // {   \r\n        // return( <FadeIn>{\r\n        //     setPlaceHolder({ titlePH: \"Please Enter A Title ....(-_-)!\", contentPH: \"Please Enter some Content ...(-_-)!\"}) \r\n        //     && isIconUserInput() && isIconTextArea()}\r\n        // </FadeIn> )\r\n        // } \r\n        // else  if (CurrentNote.title === \"\" )\r\n        // {  \r\n        // return( <FadeIn>{\r\n        //     setPlaceHolder({titlePH: \"Please Enter A Title ....(-_-)\"}) \r\n        //     && isIconUserInput()}\r\n        // </FadeIn>)\r\n                \r\n        // } else if (CurrentNote.content === \"\" )\r\n        // {\r\n        // return( <FadeIn>{\r\n        //     setPlaceHolder({contentPH: \"Please Enter some Content ...(-_-)!\"}) \r\n        //     && isIconTextArea()}\r\n        // </FadeIn>)\r\n        // }else\r\n        // {\r\n            const isLoggedIn = await API.isLoggedIn();\r\n            if(isLoggedIn){\r\n                return API.CreateNote(CurrentNote.title, CurrentNote.content, (note)=>{\r\n                    setNote({note})\r\n                    props.AddedNote(note)\r\n                    setNote({\r\n                        title: \"\",\r\n                        content: \"\",\r\n                        id: \"\"\r\n                    })\r\n                    setPlaceHolder({\r\n                        titlePH: \"Title\" , \r\n                        contentPH: \"Take a note ...\"\r\n                    })\r\n                    props.TitleLitterNumber(TargetLength)\r\n                    ChangeTargetLength(\"\")\r\n                    setSubmit(false)\r\n                } ) \r\n            }\r\n            props.AddedNote(CurrentNote)\r\n            setNote({\r\n                title: \"\",\r\n                content: \"\",\r\n                id: \"\"\r\n            })\r\n            setPlaceHolder({\r\n                titlePH: \"Title\" , \r\n                contentPH: \"Take a note ...\"\r\n            })\r\n            props.TitleLitterNumber(TargetLength)\r\n            ChangeTargetLength(\"\")\r\n            setSubmit(false)\r\n        // }  \r\n        \r\n    }\r\n    const isIconUserInput = () => \r\n    (!isSubmit ? \r\n        (CurrentNote.title === \"\" ? <SentimentVerySatisfied style={IconColor}/> : <Title style={IconColor}/>) \r\n        : (CurrentNote.title === \"\" ? <SentimentVeryDissatisfied style={IconColor}/> : <Title style={IconColor}/>))\r\n    const isIconTextArea = () => \r\n    (!isSubmit ? \r\n        (CurrentNote.content === \"\" ? <SentimentVerySatisfied style={IconColor}/> : <ImportContacts style={IconColor}/>) \r\n        : (CurrentNote.content === \"\" ? <SentimentVeryDissatisfied style={IconColor}/> : <ImportContacts style={IconColor}/>))\r\n    \r\n    const expand = () => {setExpanded(true)}\r\n\r\n    /******************************************************* Title *************************************************************************/\r\n    const handlerChangeTitle = (event) => {\r\n        ChangeTargetLength(event.target.value.length)\r\n        const {name , value} = event.target ;\r\n        setNote(prevNote => { return {...prevNote, [name]: value};});\r\n    }\r\n    const TitleValue = <InfoContainer>\r\n            <FadeIn><TextArea\r\n                rows={(TargetLength >= 40 ) ? 2 : 1}\r\n                maxLength={\"30\"}\r\n                name=\"title\"\r\n                inputType={\"text\"}\r\n                widthValue={\"421px\"}\r\n                paddingVale={\"4px\"}\r\n                outlineValue={\"none\"}\r\n                marginBottomValue={\"5px\"}\r\n                fontSizeValue={\"1.2em\"}\r\n                fontFamilyValue={\"inherit\"}\r\n                IsCalledValue={\"FOCUS\"} \r\n                borderRadiusValue= {\"7px\"}\r\n                BorderValue={\"solid\"}\r\n                borderWidthValue=\"thin\"\r\n                marginRightValue={\"10px\"}\r\n                onClickValue={expand}\r\n                onchangeValue={handlerChangeTitle}\r\n                InputValue={CurrentNote.title}\r\n                PlaceholderValue={CurrentPlaceHolde.titlePH}\r\n                backGroundColorValue={props.RecieveColor.UserInputBGC}\r\n                FontColorValue={props.RecieveColor.UserInputFC}\r\n                PlaceHolderColorValue={props.RecieveColor.UserInputPHC}\r\n                borderColorValue={props.RecieveColor.BorderColor}\r\n            /></FadeIn>\r\n            <FadeIn>{ isIconUserInput()}</FadeIn>\r\n        </InfoContainer>\r\n    \r\n    /*************************************************** Content *****************************************************************************/\r\n    const handlerChangeContent = (event) => {\r\n        const {name , value} = event.target ;\r\n        setNote(prevNote => { return {...prevNote, [name]: value};});\r\n    }\r\n    const ContentValue = isExpanded && \r\n        <InfoContainer>\r\n            <FadeIn><TextArea\r\n                InputValue={CurrentNote.content}\r\n                name=\"content\"\r\n                PlaceholderValue={CurrentPlaceHolde.contentPH}\r\n                rows={isExpanded ? 3 : 1}\r\n                onchangeValue={handlerChangeContent}\r\n                widthValue={\"421px\"}\r\n                paddingVale={\"4px\"}\r\n                outlineValue={\"none\"}\r\n                fontSizeValue={\"1.2em\"}\r\n                fontFamilyValue={\"inherit\"}\r\n                resizeValue={\"vertical\"}\r\n                IsCalledValue={\"FOCUS\"}\r\n                borderRadiusValue= {\"7px\"}\r\n                backGroundColorValue={props.RecieveColor.TextAreaBGC}\r\n                FontColorValue={props.RecieveColor.TextAreaFC}\r\n                PlaceHolderColorValue={props.RecieveColor.TextAreaPHC}\r\n                borderColorValue={props.RecieveColor.BorderColor}\r\n                BorderValue={\"solid\"}\r\n                borderWidthValue=\"thin\"\r\n                marginRightValue={\"10px\"}\r\n            /> </FadeIn>\r\n            <FadeIn>{isIconTextArea()}</FadeIn>\r\n        </InfoContainer>\r\n\r\n    /*************************************************** Button *****************************************************************************/\r\n    const ButtonValue = isExpanded && \r\n        <AddNote onPointerEnter={OnHovering} onMouseLeave={OnHovering}>\r\n            <FadeIn>{isHover ? <PlusCircleFilled /> :  <CheckCircleFilled onClick={subNote}/>}</FadeIn>\r\n        </AddNote>\r\n    \r\n    /*************************************************** Create Note *****************************************************************************/\r\n    const CreateTheNote = <FadeIn>\r\n            <NoteContainer\r\n                position= {\"relative\"}\r\n                width= {\"480px\"}\r\n                margin= {\"30px auto 20px auto\"}\r\n                padding= {\"15px\"}\r\n                boxShadowValue= {\"0 1px 5px rgb(138, 137, 137)\"}\r\n                borderRadiusValue= {\"7px\"}\r\n                resizeValue={\"both\"}\r\n                backGroundColorValue={props.RecieveColor.NotekBGC}\r\n                >\r\n                {TitleValue}\r\n                {ContentValue}\r\n                {ButtonValue}\r\n            </NoteContainer>\r\n        </FadeIn>\r\n\r\n    return(CreateTheNote)\r\n}\r\n\r\nexport default CreateNote;\r\n","/Users/mero/projects/notesk/src/Routes/Calendar/CalendarForm.js",["244","245","246","247","248","249","250","251","252"],"/Users/mero/projects/notesk/src/UI/Modal.js",[],"/Users/mero/projects/notesk/src/UI/Switch.js",[],"/Users/mero/projects/notesk/src/UI/UserIcon.js",[],"/Users/mero/projects/notesk/src/Routes/Calendar/ScheduleForm/Schedule.js",["253","254"],"/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/EvenForm.js",[],"/Users/mero/projects/notesk/src/UI/TextArea.js",[],"/Users/mero/projects/notesk/src/Routes/Calendar/event-utils.js",[],"/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/EditEventForm.js",["255","256","257","258","259","260"],"import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport NoteContainer from \"../../../UI/Modal\"; \nimport { CloseCircleOutlined, CheckCircleOutlined, CheckCircleFilled, EditFilled, EditOutlined } from \"@ant-design/icons\";\nimport FadeIn from \"react-fade-in\";\nimport {TitleContainer,DescriptionContainer,URLContainer} from \"./Containers/TextInputContainer\";\nimport {CalenderContianer,TimerContainer} from \"./Containers/Date-TimeContainer\";\nimport DisplayOption from \"./Containers/DisplayContainer\";\nimport RDContainer from \"../ScheduleForm/Containers/DaysContainer\";\nimport SubmitButton from \"../ScheduleForm/Containers/SubmitButton\";\nimport DateRangeIcon from '@material-ui/icons/DateRange';\nimport AddAlertIcon from '@material-ui/icons/AddAlert';\nimport SubmitChanges from './Bottons/submitChanges';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\n\nconst EachateContainer = styled.div`\n    width: 500px;\n    display: flex;\n    flex-direction: row;\n    justify-content: ${props => props.JustifyContentCalue};\n    margin: 4px;\n`\n\nconst EditEventForm = (props) => {\n\n    //All Component Color Stle\n    const IconColor = {\n      color: props.ScheduleColor.IconC,\n      fontSize: \"24px\",\n      marginTop: \"2px\",\n      marginLeft: \"60px\",\n    };\n    //Visable and unvisable color style \n    const VisibilityStle = {\n        marginRight: \"4px\", \n        marginLeft:\"4px\",\n        marginTop:\"7px\" , \n        fontSize: \"21px\", \n        color : props.ScheduleColor.IconC\n    }\n    //DateStyle and unDateStyle color style \n    const ShowDateStle = {\n        marginRight: \"4px\", \n        marginLeft:\"60px\",\n        marginTop:\"7px\" , \n        fontSize: \"18px\", \n        color : props.ScheduleColor.IconC\n    }\n    \n    // The Event information \n    const Header= <EachateContainer JustifyContentCalue={\"flex-end\"}>\n        <span style={{ \n            padding: \"1px\" ,paddingTop: \"1px\" , \n            fontSize: \"1.2em\", marginLeft: \"150px\",\n            color: `${props.ScheduleColor.IconC}`}}>\n                Event Info\n        </span> \n        <CloseCircleOutlined\n            onClick={()=> props.closedEventForm(true)} \n            style={{marginRight: \"12px\", marginLeft: \"180px\", marginBottom: \"15px\",\n            fontSize: \"26px\", color: props.ScheduleColor.IconC}} // send the color list from the parent App file \n        />\n    </EachateContainer>  \n\n    //Title Area\n    const [getTitle, ChangeTitle] = useState(\"\");\n    const Title = <TitleContainer\n            SubmitTitle={(value) => ChangeTitle(value)} //this is to return input value of the title and then send it to submit model\n            isEditTitle={props.getTitle} //this is to send the placeholder for the title area\n            ScheduleColor={props.ScheduleColor}  // send the color list from the parent App file \n        />  \n\n     //Description Area\n    const [getDescription, ChangeDescription] = useState(\"\");\n    const Description = (\n        <DescriptionContainer\n        SubmitDescription={(value) => ChangeDescription(value)}\n        isEditDescription={props.getDescription}\n        ScheduleColor={props.ScheduleColor}\n        />\n    );\n\n     //URL Area\n    const [getURL, ChangeURL] = useState(\"\");\n    const URL = (\n        <URLContainer\n        URLOption={(value) => ChangeURL(value)}\n        isEditURL={props.getURL}\n        ScheduleColor={props.ScheduleColor}\n        />\n    );\n    \n    /***************************    Repeat Area  ************************************************/ \n    //This is to show either the data or repeated days\n    const [isShowTime, ChangeisShowTime] = useState(true) //to show the option to change the Time that the user selected\n    const ShowData = isShowTime ?  \n        <EditOutlined  \n            onClick={()=>ChangeisShowTime(false)}\n            style={VisibilityStle} \n        /> \n        : \n        <EditFilled \n            onClick={()=>ChangeisShowTime(true)}\n            style={VisibilityStle} \n        /> \n    //This is for the layout for Year Month Days \n    const InfoArea = <EachateContainer>\n            <DateRangeIcon style={IconColor}/>\n            <span style={{paddingTop: \"4px\" ,fontSize: \"1em\", marginLeft: \"20px\"}}>Selected Data</span>\n        </EachateContainer>\n    const isRepeated = <EachateContainer>\n            <AddAlertIcon style={IconColor}/>   \n            <span style={{paddingTop: \"4px\" ,fontSize: \"1em\", marginLeft: \"20px\"}}>Select days of repeated Event and its Time</span>\n        </EachateContainer>\n    //This is for the Data area or the Repeated Date area\n    const IcionArea = <EachateContainer> \n        {ShowData} \n        {isShowTime ? InfoArea : isRepeated }\n        </EachateContainer>\n\n    /***************************    Date Area  ************************************************/ \n    // Data From and To\n    const [getFormDate, ChangeFormDate] = useState(); //this is the data that will be send to submit model to be added to the event list \n    const [getToDate, ChangeToDate] = useState();  //this is the data that will be send to submit model to be added to the event list \n\n    const StartDate= props.getStartedClickedEvent //This is the selected data in calendar for edit passing down from EventForm\n    const EndDate= props.getEndededClickedEvent//This is the selected data in calendar  for edit passing down from EventForm\n    \n    const [EditTime, ChangeEditedTime ] = useState()\n    const Data = !isShowTime ? null : (\n      <CalenderContianer\n        SendSD={StartDate} //This is to send back the selected started data\n        SendED={EndDate} //This is to send back the selected ended data\n        GetFromDate={(value) => ChangeFormDate(value)} //Returning the selected data that the user chose\n        GetToDate={(value) => ChangeToDate(value)} //Returning the selected data that the user chose\n        GetIsSelectedDate={(value) => ChangeEditedTime(value)} //To pass down to Time to show when the user want to chagne time\n        ScheduleColor={props.ScheduleColor} // send the color list from the parent App file\n        PassIsStartedDay={props.isStartedDay} //passing down the data in number from Event Form\n        PassIsStartedMonth={props.isStartedMonth} //passing down the data in number from Event Form\n        PassIsStartedYear={props.isStartedYear} //passing down the data in number from Event Form\n        PassIsEndedDay={props.isEndedDay} //passing down the data in number from Event Form\n        PassIsEndedMonth={props.isEndedMonth} //passing down the data in number from Event Form\n        PassIsEndedYear={props.isEndedYear} //passing down the data in number from Event Form\n      />\n    );\n\n    /***************************    Time Area  ************************************************/ \n    //This is for the time\n    const [StartHours, ChangeStartHour] = useState(); //have returned starting hour if time is needed\n    const [StartMinuts, ChangeStartMinuts] = useState(); //have returned starting minut if time is needed \n    const [EndHours, ChangeEndHour] = useState(); //have returned Ending hour if time is needed\n    const [EndMinuts, ChangeEndMinuts] = useState(); //have returned Ending minut if time is needed \n    const [TimeClicked, ChangeTimeClicked] = useState() //this to make sure that time is included or not and show the repeated days model\n    const Time = ( EditTime ? null :\n        <TimerContainer\n        FromHourSelected={(value) => ChangeStartHour(value)} // return starting hour if time is needed\n        FromMinutsSelected={(value) => ChangeStartMinuts(value)} // return starting minut if time is needed \n        ToHourSelected={(value) => ChangeEndHour(value)} // return Ending hour if time is needed\n        ToMinutsSelected={(value) => ChangeEndMinuts(value)} // return Ending minut if time is needed \n        ScheduleColor={props.ScheduleColor} // send the color list from the parent App file  \n        isTime={(value) => ChangeTimeClicked(value)}\n        />\n        );\n        \n    //this is for number of rebeated days \n    const [GetRepeatedDays, ChangeRepeatedDays] = useState()\n    const RepeatedDays =( isShowTime ? null :<RDContainer\n        ScheduleColor={props.ScheduleColor} // send the color list from the parent App file  \n        SubmitNumberOfRP={(value) => ChangeRepeatedDays(value)} //returning the value of repeated days \n        />\n    );\n    \n    /***************************    Display Option Area  ************************************************/ \n    const [GetDiplayOption , ChangeDiplayOption] = useState()\n    const Display = <DisplayOption\n        ScheduleColor={props.ScheduleColor} // send the color list from the parent App file  \n        SubmitDisplayOption={(value) => ChangeDiplayOption(value)} //returning the value of repeated days \n        />\n\n    /***************************    Submit New Changes Area  ************************************************/ \n    const submitChanges = <SubmitChanges \n        PassEventsInfoList={props.EventsInfoList}//list of all the Events created and compare it with the changed one\n        TheIdOfClickedEvent={props.IDofClickedEvent} //the clicked event ID\n        ReturnChangedEvents={(value) => props.ChangeOldEvents(value)} //Delete selected event from all event and close model\n        isCloseModel={(value) => props.CloseModel(value)} //to return true if clicked\n        isTitle={getTitle} //the Title value\n        isDescription={getDescription} //the Description value\n        isURL={getURL} //the URL value\n        isStartingDate={isShowTime ? getFormDate + \"T12:00:00\" : undefined} //the value of the Starting data\n        isRepeatedDays={!isShowTime ? GetRepeatedDays : undefined} //Values of Repeated Days\n        isStartingTime={!isShowTime ? (TimeClicked ?('12:00:00') :(StartHours+\":\"+StartMinuts+\":00\")) : undefined} //Choose Starting Time of the repeated Event\n        isEndingTime={!isShowTime ? (TimeClicked ?('12:00:00') :(EndHours+\":\"+EndMinuts+\":00\")) : undefined} //Choose Ending Time of the repeated Event\n        ReturnNewEvents={(value) => props.ReturnNewEvents(value)}\n        isEndingData={getToDate} //the value of Ending data\n        isDisplayOption= {GetDiplayOption} //the value of the Display Option\n        ColorChange={props.ScheduleColor} \n    />;\n\n    const EditForm = (\n      <FadeIn>\n        <NoteContainer\n          position={\"relative\"}\n          width={\"520px\"}\n          margin={\"30px auto 20px auto\"}\n          padding={\"15px\"}\n          boxShadowValue={\"0 1px 5px rgb(138, 137, 137)\"}\n          borderRadiusValue={\"7px\"}\n          resizeValue={\"both\"}\n          backGroundColorValue={props.ScheduleColor.NotekBGC} //// send the color list from the parent App file\n          FontColorValue={props.ScheduleColor.NoteFC} //// send the color list from the parent App file\n        >\n          {Header}\n          {Title}\n          {Description}\n          {URL}\n          {IcionArea}\n          {Data}\n          {Time}\n          {RepeatedDays}\n          {Display}\n          {submitChanges}\n        </NoteContainer>\n      </FadeIn>\n    );\n\n  return EditForm;\n\n}\n\nexport default EditEventForm;\n","/Users/mero/projects/notesk/src/Routes/Calendar/ScheduleForm/Containers/TextInputContainer.js",["261"],"import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport UserInput from '../../../../UI/UserInput'\nimport TextArea from '../../../../UI/TextArea';\nimport FadeIn  from 'react-fade-in';\nimport { LinkOutlined} from \"@ant-design/icons\";\nimport { Title } from '@material-ui/icons';\nimport DescriptionIcon from '@material-ui/icons/Description';\nconst InfoContainer = styled.div`\n    width: 440px;\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    margin: 4px;\n    margin-bottom: 10px;\n`\n\nconst TitleContainer = (props) => {\n    const IconColor = { \n        color : props.ScheduleColor.IconC, \n        fontSize:\"25px\", \n        marginRight:\"15px\", \n        marginTop:\"4px\" \n    }  \n    const title = <InfoContainer>\n        <FadeIn><Title style={IconColor}/></FadeIn>\n        <FadeIn><TextArea \n        key={`title` + 1} \n        // This is to change the Value of Title based on the input coming from schedule\n        onchangeValue={(event)=>props.SubmitTitle(event.target.value)}\n        rows={1}\n        //This is the Props that is coming from Schedule From once I click on submit\t\n        PlaceholderValue={props.SubmitTitlePlaceHolder}\n        name=\"title\"\n        maxLength={props.MaxLength ? props.MaxLength : \"none\"}\n        inputType={\"text\"} \n        widthValue={\"425px\"}\n        paddingVale={\"4px\"}\n        outlineValue={\"none\"}\n        fontSizeValue={\"1.2em\"}\n        fontFamilyValue={\"inherit\"}\n        IsCalledValue={\"FOCUS\"} \n        borderRadiusValue= {\"7px\"}\n        backGroundColorValue={props.ScheduleColor.UserInputBGC}\n        FontColorValue={props.ScheduleColor.UserInputFC}\n        PlaceHolderColorValue={props.ScheduleColor.UserInputPHC}\n        borderColorValue={props.ScheduleColor.BorderColor}  \n        BorderValue={\"solid\"}\n        borderWidthValue=\"thin\"\n        marginRightValue={\"10px\"}\n        /></FadeIn>\n    </InfoContainer>\n\n    return(title)\n}\n\nconst DescriptionContainer = (props) => {\n    const IconColor = { \n        color : props.ScheduleColor.IconC, \n        fontSize:\"25px\", \n        marginRight:\"15px\", \n        marginTop:\"4px\" \n    } \n    const Description = <InfoContainer>\n        <FadeIn><DescriptionIcon style={IconColor}/></FadeIn>\n        <FadeIn><TextArea\n        key={`Description`+1} \n        // This is to change the Value of Title based on the input \n        onchangeValue={(event)=>props.SubmitDescription(event.target.value)}\n        //This is the Props that is coming from Schedule From once I click on submit\t\n        PlaceholderValue={props.SubmitDescriptionPlaceHolder}\n        rows={3}\n        name=\"Description\"\n        inputType={\"text\"} \n        widthValue={\"425px\"}\n        paddingVale={\"4px\"}\n        outlineValue={\"none\"}\n        fontSizeValue={\"1.2em\"}\n        fontFamilyValue={\"inherit\"}\n        IsCalledValue={\"FOCUS\"} \n        borderRadiusValue= {\"7px\"}\n        backGroundColorValue={props.ScheduleColor.UserInputBGC}\n        FontColorValue={props.ScheduleColor.UserInputFC}\n        PlaceHolderColorValue={props.ScheduleColor.UserInputPHC}\n        borderColorValue={props.ScheduleColor.BorderColor}  \n        BorderValue={\"solid\"}\n        resizeValue={\"vertical\"}\n        borderWidthValue=\"thin\"\n        marginRightValue={\"10px\"}\n        /></FadeIn>\n    </InfoContainer>\n\n\n    return (Description)\n}\n\nconst URLContainer = (props) => {\n    const IconColor = { \n        color : props.ScheduleColor.IconC, \n        fontSize:\"25px\", \n        marginRight:\"15px\", \n        marginTop:\"4px\" \n    } \n    const URL = <InfoContainer>\n        <FadeIn><LinkOutlined style={IconColor}/></FadeIn>\n        <FadeIn><UserInput \n        key={`AttachedLinkDescription` }\n        // This is to change the Value of Title based on the input \n        onchangeValue={(event)=>props.URLOption(event.target.value)}\n        //This is the Props that is coming from Schedule From once I click on submit\t\n        PlaceholderValue={props.SubmitURLPH}\n        name=\"Url\"\n        inputType={\"text\"} \n        widthValue={\"425px\"}\n        paddingVale={\"4px\"}\n        outlineValue={\"none\"}\n        fontSizeValue={\"1.2em\"}\n        fontFamilyValue={\"inherit\"}\n        IsCalledValue={\"FOCUS\"} \n        borderRadiusValue= {\"7px\"}\n        backGroundColorValue={props.ScheduleColor.UserInputBGC}\n        FontColorValue={props.ScheduleColor.UserInputFC}\n        PlaceHolderColorValue={props.ScheduleColor.UserInputPHC}\n        borderColorValue={props.ScheduleColor.BorderColor}    \n        BorderValue={\"solid\"}\n        borderWidthValue=\"thin\"\n        marginRightValue={\"10px\"}\n        /></FadeIn>\n    </InfoContainer>\n\n\n    return (URL)\n}\n\nexport  {TitleContainer, DescriptionContainer, URLContainer};","/Users/mero/projects/notesk/src/Routes/Calendar/ScheduleForm/Containers/DaysContainer.js",[],"/Users/mero/projects/notesk/src/Routes/Calendar/ScheduleForm/Containers/SubmitButton.js",["262","263"],"/Users/mero/projects/notesk/src/Routes/Calendar/ScheduleForm/Containers/Date-TimeContainer.js",["264","265","266","267","268","269","270"],"import React, { useState } from \"react\";\nimport styled from \"styled-components\"; \nimport FadeIn  from 'react-fade-in'; \nimport { CalendarOutlined , ClockCircleOutlined} from \"@ant-design/icons\"; \nimport TimeSelected from '../../DataCollection/TimeSelected';\nimport VisibilityIcon from '@material-ui/icons/Visibility'\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport { CloseCircleOutlined, CheckCircleOutlined, CheckCircleFilled, EditFilled, EditOutlined } from \"@ant-design/icons\";\nimport { createEventId } from \"../../event-utils\";\nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\n\nconst InfoContainer = styled.div`\n    width: 440px;\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    margin: 4px;\n    margin-bottom: 14px;\n`\nconst EachateContainer = styled.div`\n    width: 400px;\n    display: flex;\n    flex-direction: row;\n    justify-content: ${props => props.JustifyContentCalue};\n    margin: 4px;\n    margin-left: ${props => props.MarginLeft ? props.MarginLeft : null }\n`\nconst DateContainer = styled.div`\n    width: 400px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n`\nconst CalenderContianer = (props) => {\n    //All Component Color Stle\n    const IconColor = { \n        color : props.ScheduleColor.IconC, \n        fontSize:\"25px\", \n        marginRight:\"15px\", \n        marginTop:\"4px\" \n    }\n    \n    // This is a togole to change the state of the disabled and to change the icion as well \n    const InconArea = <div style={{display: \"flex\", flexDirection: \"column\", justifyContent: \"flex-start\"}}>\n            <FadeIn><CalendarOutlined style={IconColor}/> </FadeIn> \n        </div>\n\n    //This is for the layout for Year Month Days \n    const InfoArea = <EachateContainer JustifyContentCalue={\"space-between\" }>\n            {<FadeIn><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginLeft: \"150px\"}}>Selected Data</span></FadeIn>}\n        </EachateContainer>\n\n    //Starting Data Area\n    const StartingData = <EachateContainer JustifyContentCalue={ \"\"}>\n            <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}>From</span></FadeIn>\n            { <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"1px\", color:props.ScheduleColor.IconC}}>{props.SendSD}</span></FadeIn> }\n        </EachateContainer>\n    \n    // End Data Area\n    const EndingingData = <EachateContainer JustifyContentCalue={ \"\"}>\n            <FadeIn><span style={{  padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"25px\"}}>To</span></FadeIn>\n            { <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"1px\", color:props.ScheduleColor.IconC }}>{props.SendED}</span></FadeIn> }\n        </EachateContainer>\n    \n    //This is the returned Date to the calendar\n    const calendar = <InfoContainer>\n            {InconArea}\n            <DateContainer>\n                {InfoArea}\n                {StartingData}\n                {EndingingData}\n            </DateContainer>\n        </InfoContainer>\n\n    //To recieve a prop that will change the value from and to inside the schedule form to the value of From/to Date that has been created here  \n    props.GetFromDate(props.SendSD) //Return either the selected data from the calendar form or the changed data by the user\n    props.GetToDate(props.SendED) //Return either the selected data from the calendar form or the changed data by the user\n    \n    return(calendar)\n}\n\nconst TimerContainer = (props) => {\n    //All Component Color Stle\n    const IconColor = { \n        color : props.ScheduleColor.IconC, \n        fontSize:\"25px\", \n        marginRight:\"15px\", \n        marginTop:\"4px\"\n    }\n    //DateStyle and unDateStyle color style \n    const ShowDateStle = {\n        marginRight: \"4px\", \n        marginLeft:\"51px\",\n        marginTop:\"7px\" , \n        fontSize: \"18px\", \n        color : props.ScheduleColor.IconC\n    }\n    //Visable and unvisable color style \n    const VisibilityStle = {\n        marginRight: \"4px\", \n        marginLeft:\"4px\",\n        marginTop:\"7px\" , \n        fontSize: \"18px\", \n        color : props.ScheduleColor.IconC\n    }\n\n    \n    const [isShowTime, ChangeisShowTime] = useState(true) //to show the option to change the Time that the user selected\n    //this is the part where we change the icon based on clicking the div \n    const ShowData = <FadeIn>\n        {isShowTime ?  null : \n            <CheckCircleFilled \n                onClick={()=>ChangeisShowTime(true)}\n                style={VisibilityStle} />} \n        </FadeIn>\n    const IcionArea = <div style={{display: \"flex\", flexDirection: \"column\", justifyContent: \"flex-start\"}}>\n            <FadeIn><ClockCircleOutlined style={IconColor}/>  </FadeIn>\n            <FadeIn>{ShowData}</FadeIn>\n        </div>\n    const isDefulatTime = \n        <DateContainer>\n            <FadeIn>\n                <EachateContainer>\n                {isShowTime ? <RadioButtonUncheckedIcon onClick={()=>ChangeisShowTime(false)} style={ShowDateStle}/> : null}  \n                    <span style={{paddingTop: \"6px\" ,fontSize: \"1em\", marginLeft: \"5px\"}}>By defualt the time set to 12 pm </span> \n                </EachateContainer>\n            </FadeIn>\n            <FadeIn><span style={{paddingBottom: \"4px\" ,fontSize: \"1em\", marginLeft: \"60px\"}}>Click the Circle to choose certain time</span></FadeIn>\n        </DateContainer>\n\n    //This is for the layout for Hour Minuts Day system\n    const InfoArea = (isShowTime ? \n        isDefulatTime\n        :\n        <EachateContainer JustifyContentCalue={\"space-between\" }>\n                    <FadeIn ><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}> </span></FadeIn> \n                    <FadeIn ><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}>{\"Hour\"}</span></FadeIn> \n                    <FadeIn ><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}>{\"Minuts\"}</span></FadeIn> \n                    <FadeIn ><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}>{\"AM / PM\"}</span></FadeIn> \n        </EachateContainer>\n    );\n    \n    //collection of stating time for event\n    const [StartHoursValue, ChangeStartHourValue ]= useState() //save the Starting Hour\n    const [StartMinutsValue, ChangeStartMinutsValue ]= useState() //save the starting Minuts\n    const [StartDayValue, ChangeStartDayValue ]= useState() //save starting if it is AM or PM\n    const StartingTime = isShowTime ? null :<EachateContainer JustifyContentCalue={\"space-between\" }>\n            <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"5px\"}}>Start</span></FadeIn>\n            <TimeSelected \n                submitHourValue={(value) => ChangeStartHourValue(value)}\n                submitMinutsValue={(value) => ChangeStartMinutsValue(value)}\n                submitDayValue={(value) => ChangeStartDayValue(value)}\n                RecievedColor={props.ScheduleColor}\n                //this is to disable the values that are inside and it is going to DataSelected\n                DisabledisClicked={isShowTime} \n                />\n        </EachateContainer>\n    \n    //collection of ending time for event\n    const [EndHoursValue, ChangeEndHourValue ]= useState() //save the Ending Hour\n    const [EndMinutsValue, ChangeEndMinutsValue ]= useState() //save the Ending Minuts\n    const [EndDayValue, ChangeEndDayValue ]= useState() //save Ending if it is AM or PM\n    const EndingTime = isShowTime ? null :<EachateContainer  MarginLeft={\"10px\"}  JustifyContentCalue={\"space-between\" }>\n            <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"5px\"}}>End</span></FadeIn>\n            <TimeSelected \n                submitHourValue={(value) => ChangeEndHourValue(value)}\n                submitMinutsValue={(value) => ChangeEndMinutsValue(value)}\n                submitDayValue={(value) => ChangeEndDayValue(value)}\n                RecievedColor={props.ScheduleColor}\n                //this is to disable the values that are inside and it is going to DataSelected\n                DisabledisClicked={isShowTime} \n                />\n        </EachateContainer>\n \n    const time = (\n      <InfoContainer>\n        {IcionArea}\n        <DateContainer>\n          {InfoArea}\n          {StartingTime}\n          {EndingTime}\n        </DateContainer>\n      </InfoContainer>\n    );\n\n    props.FromHourSelected(StartDayValue === \"PM\" ? String(parseInt(StartHoursValue,10) + 12) : StartHoursValue) //this where we convert the returned hour from 12 hour system to 24 hour system \n    props.FromMinutsSelected(StartMinutsValue)\n    props.ToHourSelected(EndDayValue === \"PM\" ? String(parseInt(EndHoursValue,10) + 12) : EndHoursValue) //this where we convert the returned hour To 12 hour system to 24 hour system \n    props.ToMinutsSelected(EndMinutsValue);\n    props.isTime(isShowTime) \n    return (time)\n}\n\nexport  {CalenderContianer, TimerContainer};","/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/Bottons/DeleteButton.js",["271"],"import React, { useState } from \"react\";\nimport FadeIn from \"react-fade-in\";\nimport { DeleteFilled } from \"@ant-design/icons\";\nimport Button from \"../../../../UI/Button\";  \nimport API from \"../../../../API/API\";\n\nconst DeleteButton = (props) => {\n  const ButtonIconColor = {\n    color: props.ColorChange.IconC,\n    fontSize: \"20px\",\n    marginRight: \"9px\",\n    marginTop: \"4px\",\n  };   \n  \nconst DeleteButton = async () => { \n    const id = props.IDofClickedEvent //the Event id\n    const Delete = props.EventsInfoList  //copy the Events list\n    const isLoggedIn = await API.isLoggedIn();\n    if (isLoggedIn){\n      API.DeleteEvents(id)\n    }\n    props.ReturnNewEvents(Delete.filter(Event => Event._id !== id))\n    props.CloseModel(true)\n  };\n\n  const SubmitDeleteButton = (\n    <FadeIn>\n      <Button\n        width={\"120px\"}\n        marginBottomValue={\"10px\"}\n        marginLeftValue={\"10%\"}\n        fontSizeValue={\"20px\"}\n        borderRadiusValue={\"15px\"}\n        IsCalledValue={\"hover\"}\n        BorderValue=\"solid\"\n        borderWidthValue=\"thin\"\n        paddingInputValue=\"2px\"\n        onClick={DeleteButton}\n        text={\"Delete\"}\n        icon={<DeleteFilled style={ButtonIconColor} />}\n      />\n    </FadeIn>\n  );\n\n\n  return SubmitDeleteButton;\n};\n\nexport default DeleteButton;\n","/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/Bottons/EditButton.js",["272"],"import React, { useState } from \"react\";\nimport FadeIn from \"react-fade-in\";\nimport { LoginOutlined } from \"@ant-design/icons\";\nimport Button from \"../../../../UI/Button\";  \n\nconst EditButton = (props) => {\n  const ButtonIconColor = {\n    color: props.ColorChange.IconC,\n    fontSize: \"20px\",\n    marginRight: \"9px\",\n    marginTop: \"4px\",\n  };   \n\n  const SubmitButton = (\n    <FadeIn>\n      <Button\n        width={\"120px\"}\n        marginBottomValue={\"10px\"}\n        marginLeftValue={\"100px\"}\n        fontSizeValue={\"20px\"}\n        borderRadiusValue={\"15px\"}\n        IsCalledValue={\"hover\"}\n        BorderValue=\"solid\"\n        borderWidthValue=\"thin\"\n        paddingInputValue=\"2px\"\n        onClick={()=>props.isEditClicked(true)}\n        text={\"Edit\"}\n        icon={<LoginOutlined style={ButtonIconColor} />}\n      />\n    </FadeIn>\n  );\n\n\n  return SubmitButton;\n};\n\nexport default EditButton;\n","/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/Bottons/submitChanges.js",["273","274","275"],"import React, { useState } from \"react\";\nimport FadeIn from \"react-fade-in\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport Button from \"../../../../UI/Button\";\nimport API from \"../../../../API/API\";\n\nconst submitChanges = (props) => {\n  const ButtonIconColor = {\n    color: props.ColorChange.IconC,\n    fontSize: \"20px\",\n    marginRight: \"9px\",\n    marginTop: \"4px\",\n  }  \n\n  // this will delete the old event and send the new one\n  const SubmitTheNewEvent = async () => { \n      const isLoggedIn = await API.isLoggedIn();\n      const ClickedEvent = props.PassEventsInfoList; //copy the Events list\n      const id = props.TheIdOfClickedEvent; //the Event id\n      let newEvent;\n      let indexOfEvent;\n      ClickedEvent.forEach((event, index) => {\n        if (event.id == id || event._id == id) {\n            newEvent = {...event};\n            indexOfEvent = index;\n          }\n        });\n\n      const newNotes = [...ClickedEvent]; \n      newEvent = {\n        ...newEvent,\n        id: props.TheIdOfClickedEvent,\n        title: props.isTitle,\n        description: props.isDescription,\n        Url: props.isURL,\n        start: props.isStartingDate,\n        end: props.isEndingData,\n        startTime: props.isStartingTime,\n        endTime: props.isEndingTime,\n        daysOfWeek: props.isRepeatedDays,\n        display: props.isDisplayOption,\n      };\n      newNotes[indexOfEvent] = newEvent\n      props.ReturnNewEvents(newNotes); \n      if(isLoggedIn){\n          API.UpdateEvents(\n            id,\n            props.isTitle,\n            props.isDescription,\n            props.isURL,\n            props.isStartingDate,\n            props.isEndingData,\n            props.isStartingTime,\n            props.isEndingTime,\n            props.isRepeatedDays,\n            props.isDisplayOption\n          )\n        }\n\n      props.isCloseModel(true);\n  };\n\n  const SubmitButton = <FadeIn>\n      <Button\n        width={\"130px\"}\n        marginBottomValue={\"10px\"}\n        marginLeftValue={\"160px\"}\n        fontSizeValue={\"20px\"}\n        borderRadiusValue={\"15px\"}\n        IsCalledValue={\"hover\"}\n        BorderValue=\"solid\"\n        borderWidthValue=\"thin\"\n        paddingInputValue=\"2px\"\n        onClick={SubmitTheNewEvent}\n        text={\"Submit\"}\n        icon={<SendOutlined style={ButtonIconColor}/>}\n      />\n    </FadeIn>\n\n  return SubmitButton;\n};\n\nexport default submitChanges;\n","/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/Containers/TextInputContainer.js",[],"/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/Containers/Date-TimeContainer.js",["276","277","278","279","280","281","282"],"import React, { useState } from \"react\";\nimport styled from \"styled-components\"; \nimport FadeIn  from 'react-fade-in'; \nimport { CalendarOutlined , ClockCircleOutlined} from \"@ant-design/icons\"; \nimport TimeSelected from '../../DataCollection/TimeSelected';\nimport DateSelected from '../../DataCollection/DateSelected';\nimport VisibilityIcon from '@material-ui/icons/Visibility'\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport DateRangeIcon from '@material-ui/icons/DateRange';\nimport { CloseCircleOutlined, CheckCircleOutlined, CheckCircleFilled, EditFilled, EditOutlined } from \"@ant-design/icons\";\nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\n\nconst InfoContainer = styled.div`\n    width: 440px;\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    margin: 4px;\n    margin-bottom: 14px;\n`\nconst EachateContainer = styled.div`\n    width: 400px;\n    display: flex;\n    flex-direction: row;\n    justify-content: ${props => props.JustifyContentCalue};\n    margin: 4px;\n    margin-left: ${props => props.MarginLeft ? props.MarginLeft : null }\n`\nconst DateContainer = styled.div`\n    width: 400px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n`\nconst CalenderContianer = (props) => {\n    //DateStyle and unDateStyle color style \n    const ShowDateStle = {\n        marginRight: \"4px\", \n        marginLeft:\"51px\",\n        marginTop:\"7px\" , \n        fontSize: \"18px\", \n        color : props.ScheduleColor.IconC\n    }\n    //All Component Color Stle\n    const IconColor = { \n        color : props.ScheduleColor.IconC, \n        fontSize:\"25px\", \n        marginRight:\"15px\", \n        marginTop:\"4px\" \n    }\n    \n    // This is a togole to change the state of the disabled and to change the icion as well \n    const InconArea = <div style={{display: \"flex\", flexDirection: \"column\", justifyContent: \"flex-start\"}}>\n            <FadeIn><CalendarOutlined style={IconColor}/> </FadeIn> \n        </div>\n\n    //This is for the layout for Year Month Days  \n    const [isSelectedDate, ChangeSelectedDate]= useState(true)\n    props.GetIsSelectedDate(isSelectedDate)\n    const ChangeSelectedData= isSelectedDate ?  \n        <RadioButtonUncheckedIcon \n            onClick={()=>ChangeSelectedDate(false)}\n            style={ShowDateStle}\n        /> \n        : \n        <CheckCircleFilled \n            onClick={()=>ChangeSelectedDate(true)}\n            style={ShowDateStle} \n        />\n    //This is to switch between The selected date and the date that the user want to change \n    const isData = <EachateContainer> \n            {ChangeSelectedData}\n           { isSelectedDate ? \n                <span style={{paddingTop: \"7px\" ,fontSize: \"1em\", marginLeft: \"5px\"}}> Chick to Change Selected Date of Event</span>\n                :\n                <span style={{paddingTop: \"7px\" ,fontSize: \"1em\", marginLeft: \"5px\"}}> Chick to Retun to Selected Date of Event</span>}\n        </EachateContainer>\n    //Starting Data Area\n    const RecieveFromDate = props.PassIsStartedYear + \"-\" + props.PassIsStartedMonth + \"-\" + props.PassIsStartedDay\n    const [fromData, ChangeFromDate] = useState(\"\") \n    const StartingData = <EachateContainer JustifyContentCalue={ \"\"}>\n            <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}>From</span></FadeIn>\n            { isSelectedDate ? <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"1px\", color:props.ScheduleColor.IconC}}>{props.SendSD}</span></FadeIn> \n                :\n                <DateSelected\n                //These are used to send these data to DataSlected to be used for Year, Month, Day \n                ReturnFrom=\"From\"\n                ReturnClickedFromDay={props.PassIsStartedDay} //passing the sliced date from Edit Event Form \n                ReturnClickedFromMonth={props.PassIsStartedMonth}  //passing the sliced date from Edit Event Form \n                ReturnClickedFromYear={props.PassIsStartedYear} //passing the sliced date from Edit Event Form \n                name=\"start\"\n                //The incoming dating is used to chagne the format of the date and then send that number to submission button\n                submitDateValue={(value) => ChangeFromDate(value)} \n                RecievedColor={props.ScheduleColor}\n                />\n            }\n        </EachateContainer>\n    \n    // End Data Area\n    const RecieveToDate = props.PassIsEndedYear + \"-\" + props.PassIsEndedMonth + \"-\" + props.PassIsEndedDay\n    const [ToData, ChangeToDate] = useState(\"\")\n    const EndingingData = <EachateContainer JustifyContentCalue={ \"\"}>\n            <FadeIn><span style={{  padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"25px\"}}>To</span></FadeIn>\n            { isSelectedDate ? <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"1px\", color:props.ScheduleColor.IconC }}>{props.SendED}</span></FadeIn> \n                :\n                <DateSelected\n                //These are used to send these data to DataSlected to be used for Year, Month, Day \n                ReturnFrom=\"To\"\n                ReturnClickedToDay={props.PassIsEndedDay}  //passing the sliced date from Edit Event Form \n                ReturnClickedToMonth={props.PassIsEndedMonth}   //passing the sliced date from Edit Event Form \n                ReturnClickedToYear={props.PassIsEndedYear}  //passing the sliced date from Edit Event Form \n                name=\"end\"\n                //The incoming dating is used to chagne the format of the date and then send that number to submission button\n                submitDateValue={(value) => ChangeToDate(value)} \n                RecievedColor={props.ScheduleColor}\n            />\n            }\n        </EachateContainer>\n    \n    //This is the returned Date to the calendar\n    const calendar = <InfoContainer>\n            {InconArea}\n            <DateContainer> \n                {isData}\n                {StartingData}\n                {EndingingData}\n            </DateContainer>\n        </InfoContainer>\n\n    //To recieve a prop that will change the value from and to inside the schedule form to the value of From/to Date that has been created here  \n    props.GetFromDate(isSelectedDate ? RecieveFromDate : fromData); //Return either the selected data from the calendar form or the changed data by the user\n    props.GetToDate(isSelectedDate ? RecieveToDate : ToData); //Return either the selected data from the calendar form or the changed data by the user\n    \n    return(calendar)\n}\n\nconst TimerContainer = (props) => {\n    //All Component Color Stle\n    const IconColor = { \n        color : props.ScheduleColor.IconC, \n        fontSize:\"25px\", \n        marginRight:\"15px\", \n        marginTop:\"4px\"\n    }\n    //DateStyle and unDateStyle color style \n    const ShowDateStle = {\n        marginRight: \"4px\", \n        marginLeft:\"51px\",\n        marginTop:\"7px\" , \n        fontSize: \"18px\", \n        color : props.ScheduleColor.IconC\n    }\n    //Visable and unvisable color style \n    const VisibilityStle = {\n        marginRight: \"4px\", \n        marginLeft:\"4px\",\n        marginTop:\"7px\" , \n        fontSize: \"18px\", \n        color : props.ScheduleColor.IconC\n    }\n\n    \n    const [isShowTime, ChangeisShowTime] = useState(true) //to show the option to change the Time that the user selected\n    //this is the part where we change the icon based on clicking the div \n    const ShowData = <FadeIn>\n        {isShowTime ?  null : \n            <CheckCircleFilled \n                onClick={()=>ChangeisShowTime(true)}\n                style={VisibilityStle} />} \n        </FadeIn>\n    const IcionArea = <div style={{display: \"flex\", flexDirection: \"column\", justifyContent: \"flex-start\"}}>\n            <FadeIn><ClockCircleOutlined style={IconColor}/>  </FadeIn>\n            <FadeIn>{ShowData}</FadeIn>\n        </div>\n    const isDefulatTime = \n        <DateContainer>\n            <FadeIn>\n                <EachateContainer>\n                    {isShowTime ? <RadioButtonUncheckedIcon onClick={()=>ChangeisShowTime(false)} style={ShowDateStle}/> : null} \n                    <span style={{paddingTop: \"6px\" ,fontSize: \"1em\", marginLeft: \"5px\"}}>By defualt the time set to 12 pm </span> \n                </EachateContainer>\n            </FadeIn>\n            <FadeIn><span style={{paddingBottom: \"4px\" ,fontSize: \"1em\", marginLeft: \"60px\"}}>Click the Circle to choose certain time</span></FadeIn>\n        </DateContainer>\n\n        //This is for the layout for Hour Minuts Day system\n        const InfoArea = (isShowTime ? \n            isDefulatTime\n            :\n            <EachateContainer JustifyContentCalue={\"space-between\" }>\n                        <FadeIn ><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}> </span></FadeIn> \n                        <FadeIn ><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}>{\"Hour\"}</span></FadeIn> \n                        <FadeIn ><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}>{\"Minuts\"}</span></FadeIn> \n                        <FadeIn ><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}>{\"AM / PM\"}</span></FadeIn> \n            </EachateContainer>\n        );\n\n    //collection of stating time for event\n    const [StartHoursValue, ChangeStartHourValue ]= useState() //save the Starting Hour\n    const [StartMinutsValue, ChangeStartMinutsValue ]= useState() //save the starting Minuts\n    const [StartDayValue, ChangeStartDayValue ]= useState() //save starting if it is AM or PM\n    const StartingTime = isShowTime ? null : <EachateContainer JustifyContentCalue={\"space-between\" }>\n            <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"5px\"}}>Start</span></FadeIn>\n            <TimeSelected \n                submitHourValue={(value) => ChangeStartHourValue(value)}\n                submitMinutsValue={(value) => ChangeStartMinutsValue(value)}\n                submitDayValue={(value) => ChangeStartDayValue(value)}\n                RecievedColor={props.ScheduleColor}\n                //this is to disable the values that are inside and it is going to DataSelected\n                DisabledisClicked={isShowTime} \n                />\n        </EachateContainer>\n    \n    //collection of ending time for event\n    const [EndHoursValue, ChangeEndHourValue ]= useState() //save the Ending Hour\n    const [EndMinutsValue, ChangeEndMinutsValue ]= useState() //save the Ending Minuts\n    const [EndDayValue, ChangeEndDayValue ]= useState() //save Ending if it is AM or PM\n    const EndingTime = isShowTime ? null : <EachateContainer  MarginLeft={\"10px\"}  JustifyContentCalue={\"space-between\" }>\n            <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"5px\"}}>End</span></FadeIn>\n            <TimeSelected \n                submitHourValue={(value) => ChangeEndHourValue(value)}\n                submitMinutsValue={(value) => ChangeEndMinutsValue(value)}\n                submitDayValue={(value) => ChangeEndDayValue(value)}\n                RecievedColor={props.ScheduleColor}\n                //this is to disable the values that are inside and it is going to DataSelected\n                DisabledisClicked={isShowTime} \n                />\n        </EachateContainer>\n \n    const time = (\n      <InfoContainer>\n        {IcionArea}\n        <DateContainer> \n            {InfoArea}\n          {StartingTime}\n          {EndingTime}\n        </DateContainer>\n      </InfoContainer>\n    );\n\n    props.FromHourSelected(StartDayValue === \"PM\" ? String(parseInt(StartHoursValue,10) + 12) : StartHoursValue) //this where we convert the returned hour from 12 hour system to 24 hour system \n    props.FromMinutsSelected(StartMinutsValue)\n    props.ToHourSelected(EndDayValue === \"PM\" ? String(parseInt(EndHoursValue,10) + 12) : EndHoursValue) //this where we convert the returned hour To 12 hour system to 24 hour system \n    props.ToMinutsSelected(EndMinutsValue);\n    props.isTime(isShowTime) \n    return (time)\n}\n\nexport  {CalenderContianer, TimerContainer};","/Users/mero/projects/notesk/src/Routes/Calendar/DataCollection/TimeSelected.js",["283"],"/Users/mero/projects/notesk/src/Routes/Calendar/DataCollection/RepeatedDaysSelected.js",["284"],"/Users/mero/projects/notesk/src/Routes/Calendar/DataCollection/DateSelected.js",["285","286","287","288","289","290"],"/Users/mero/projects/notesk/src/UI/Select.js",[],"/Users/mero/projects/notesk/src/UI/logo.js",[],"/Users/mero/projects/notesk/src/Routes/Calendar/ScheduleForm/Containers/DisplayContainer.js",["291"],"import React, {useState} from \"react\";\nimport styled from \"styled-components\"; \nimport FadeIn  from 'react-fade-in'; \nimport {BgColorsOutlined} from \"@ant-design/icons\"; \nimport ColorLensIcon from '@material-ui/icons/ColorLens';\nimport DisplaySelected from '../../DataCollection/DisplaySelected';\n\n\nconst InfoContainer = styled.div`\n    width: 440px;\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    margin: 4px;\n    margin-bottom: 10px;\n`\n\nconst DisplayContainer = (props) => {\n    \n    const [GetDisplayOption, CHnageDisplayOption] = useState()\n    props.SubmitDisplayOption(GetDisplayOption)\n    const FontColor = <InfoContainer>\n                <FadeIn>\n                    <BgColorsOutlined style={{fontSize:\"32px\",color : props.ScheduleColor.IconC,marginRight:\"9px\",marginTop:\"4px\"}}/>\n                </FadeIn>\n                <FadeIn>\n                    <DisplaySelected \n                        ValueOfDisplayOption={(value) => CHnageDisplayOption(value)}\n                        RecievedColor={props.ScheduleColor}\n                    />\n                </FadeIn>\n    </InfoContainer>\n\n    return(FontColor)\n}\nexport default DisplayContainer;","/Users/mero/projects/notesk/src/Routes/Calendar/DataCollection/DisplaySelected.js",[],"/Users/mero/projects/notesk/src/Routes/Calendar/DataCollection/OptionsForm.js",[],"/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/Containers/DisplayContainer.js",[],"/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/HoverTitle.js",[],{"ruleId":"292","replacedBy":"293"},{"ruleId":"294","replacedBy":"295"},{"ruleId":"296","severity":1,"message":"297","line":20,"column":7,"nodeType":"298","endLine":20,"endColumn":9,"suggestions":"299"},{"ruleId":"296","severity":1,"message":"297","line":19,"column":7,"nodeType":"298","endLine":19,"endColumn":9,"suggestions":"300"},{"ruleId":"301","severity":1,"message":"302","line":7,"column":10,"nodeType":"303","messageId":"304","endLine":7,"endColumn":14},{"ruleId":"301","severity":1,"message":"305","line":11,"column":10,"nodeType":"303","messageId":"304","endLine":11,"endColumn":19},{"ruleId":"306","severity":1,"message":"307","line":59,"column":53,"nodeType":"308","messageId":"309","endLine":59,"endColumn":55},{"ruleId":"306","severity":1,"message":"307","line":60,"column":56,"nodeType":"308","messageId":"309","endLine":60,"endColumn":58},{"ruleId":"306","severity":1,"message":"307","line":75,"column":53,"nodeType":"308","messageId":"309","endLine":75,"endColumn":55},{"ruleId":"306","severity":1,"message":"307","line":76,"column":55,"nodeType":"308","messageId":"309","endLine":76,"endColumn":57},{"ruleId":"296","severity":1,"message":"310","line":62,"column":7,"nodeType":"298","endLine":62,"endColumn":9,"suggestions":"311"},{"ruleId":"301","severity":1,"message":"312","line":49,"column":11,"nodeType":"303","messageId":"304","endLine":49,"endColumn":24},{"ruleId":"301","severity":1,"message":"313","line":49,"column":26,"nodeType":"303","messageId":"304","endLine":49,"endColumn":45},{"ruleId":"301","severity":1,"message":"314","line":50,"column":11,"nodeType":"303","messageId":"304","endLine":50,"endColumn":21},{"ruleId":"301","severity":1,"message":"315","line":50,"column":23,"nodeType":"303","messageId":"304","endLine":50,"endColumn":39},{"ruleId":"301","severity":1,"message":"316","line":51,"column":11,"nodeType":"303","messageId":"304","endLine":51,"endColumn":22},{"ruleId":"301","severity":1,"message":"317","line":51,"column":24,"nodeType":"303","messageId":"304","endLine":51,"endColumn":41},{"ruleId":"301","severity":1,"message":"318","line":52,"column":11,"nodeType":"303","messageId":"304","endLine":52,"endColumn":25},{"ruleId":"301","severity":1,"message":"319","line":52,"column":27,"nodeType":"303","messageId":"304","endLine":52,"endColumn":47},{"ruleId":"301","severity":1,"message":"320","line":53,"column":11,"nodeType":"303","messageId":"304","endLine":53,"endColumn":25},{"ruleId":"301","severity":1,"message":"321","line":53,"column":27,"nodeType":"303","messageId":"304","endLine":53,"endColumn":47},{"ruleId":"301","severity":1,"message":"322","line":54,"column":11,"nodeType":"303","messageId":"304","endLine":54,"endColumn":26},{"ruleId":"301","severity":1,"message":"323","line":54,"column":28,"nodeType":"303","messageId":"304","endLine":54,"endColumn":49},{"ruleId":"301","severity":1,"message":"324","line":55,"column":11,"nodeType":"303","messageId":"304","endLine":55,"endColumn":33},{"ruleId":"301","severity":1,"message":"325","line":55,"column":35,"nodeType":"303","messageId":"304","endLine":55,"endColumn":63},{"ruleId":"301","severity":1,"message":"326","line":56,"column":11,"nodeType":"303","messageId":"304","endLine":56,"endColumn":22},{"ruleId":"301","severity":1,"message":"327","line":56,"column":23,"nodeType":"303","messageId":"304","endLine":56,"endColumn":40},{"ruleId":"301","severity":1,"message":"328","line":49,"column":9,"nodeType":"303","messageId":"304","endLine":49,"endColumn":18},{"ruleId":"301","severity":1,"message":"329","line":74,"column":9,"nodeType":"303","messageId":"304","endLine":74,"endColumn":24},{"ruleId":"306","severity":1,"message":"307","line":137,"column":48,"nodeType":"308","messageId":"309","endLine":137,"endColumn":50},{"ruleId":"306","severity":1,"message":"307","line":112,"column":23,"nodeType":"308","messageId":"309","endLine":112,"endColumn":25},{"ruleId":"306","severity":1,"message":"307","line":112,"column":46,"nodeType":"308","messageId":"309","endLine":112,"endColumn":48},{"ruleId":"306","severity":1,"message":"307","line":115,"column":31,"nodeType":"308","messageId":"309","endLine":115,"endColumn":33},{"ruleId":"306","severity":1,"message":"307","line":117,"column":33,"nodeType":"308","messageId":"309","endLine":117,"endColumn":35},{"ruleId":"301","severity":1,"message":"330","line":5,"column":8,"nodeType":"303","messageId":"304","endLine":5,"endColumn":17},{"ruleId":"301","severity":1,"message":"331","line":9,"column":22,"nodeType":"303","messageId":"304","endLine":9,"endColumn":29},{"ruleId":"301","severity":1,"message":"332","line":9,"column":31,"nodeType":"303","messageId":"304","endLine":9,"endColumn":38},{"ruleId":"301","severity":1,"message":"333","line":11,"column":9,"nodeType":"303","messageId":"304","endLine":11,"endColumn":13},{"ruleId":"301","severity":1,"message":"334","line":47,"column":31,"nodeType":"303","messageId":"304","endLine":47,"endColumn":43},{"ruleId":"335","severity":1,"message":"336","line":81,"column":76,"nodeType":"337","messageId":"338","endLine":81,"endColumn":78},{"ruleId":"306","severity":1,"message":"307","line":81,"column":96,"nodeType":"308","messageId":"309","endLine":81,"endColumn":98},{"ruleId":"335","severity":1,"message":"336","line":89,"column":74,"nodeType":"337","messageId":"338","endLine":89,"endColumn":76},{"ruleId":"306","severity":1,"message":"307","line":89,"column":94,"nodeType":"308","messageId":"309","endLine":89,"endColumn":96},{"ruleId":"339","severity":1,"message":"340","line":137,"column":59,"nodeType":"341","messageId":"342","endLine":137,"endColumn":60},{"ruleId":"301","severity":1,"message":"343","line":71,"column":19,"nodeType":"303","messageId":"304","endLine":71,"endColumn":30},{"ruleId":"301","severity":1,"message":"344","line":120,"column":12,"nodeType":"303","messageId":"304","endLine":120,"endColumn":20},{"ruleId":"301","severity":1,"message":"345","line":4,"column":31,"nodeType":"303","messageId":"304","endLine":4,"endColumn":50},{"ruleId":"301","severity":1,"message":"346","line":4,"column":52,"nodeType":"303","messageId":"304","endLine":4,"endColumn":69},{"ruleId":"301","severity":1,"message":"347","line":10,"column":8,"nodeType":"303","messageId":"304","endLine":10,"endColumn":20},{"ruleId":"301","severity":1,"message":"348","line":14,"column":8,"nodeType":"303","messageId":"304","endLine":14,"endColumn":32},{"ruleId":"301","severity":1,"message":"349","line":15,"column":8,"nodeType":"303","messageId":"304","endLine":15,"endColumn":30},{"ruleId":"301","severity":1,"message":"350","line":43,"column":11,"nodeType":"303","messageId":"304","endLine":43,"endColumn":23},{"ruleId":"301","severity":1,"message":"351","line":1,"column":17,"nodeType":"303","messageId":"304","endLine":1,"endColumn":25},{"ruleId":"301","severity":1,"message":"351","line":1,"column":17,"nodeType":"303","messageId":"304","endLine":1,"endColumn":25},{"ruleId":"301","severity":1,"message":"352","line":1,"column":27,"nodeType":"303","messageId":"304","endLine":1,"endColumn":36},{"ruleId":"301","severity":1,"message":"353","line":6,"column":8,"nodeType":"303","messageId":"304","endLine":6,"endColumn":22},{"ruleId":"301","severity":1,"message":"354","line":7,"column":8,"nodeType":"303","messageId":"304","endLine":7,"endColumn":25},{"ruleId":"301","severity":1,"message":"355","line":8,"column":10,"nodeType":"303","messageId":"304","endLine":8,"endColumn":29},{"ruleId":"301","severity":1,"message":"345","line":8,"column":31,"nodeType":"303","messageId":"304","endLine":8,"endColumn":50},{"ruleId":"301","severity":1,"message":"356","line":8,"column":71,"nodeType":"303","messageId":"304","endLine":8,"endColumn":81},{"ruleId":"301","severity":1,"message":"357","line":8,"column":83,"nodeType":"303","messageId":"304","endLine":8,"endColumn":95},{"ruleId":"301","severity":1,"message":"358","line":9,"column":10,"nodeType":"303","messageId":"304","endLine":9,"endColumn":23},{"ruleId":"301","severity":1,"message":"351","line":1,"column":17,"nodeType":"303","messageId":"304","endLine":1,"endColumn":25},{"ruleId":"301","severity":1,"message":"351","line":1,"column":17,"nodeType":"303","messageId":"304","endLine":1,"endColumn":25},{"ruleId":"301","severity":1,"message":"351","line":1,"column":17,"nodeType":"303","messageId":"304","endLine":1,"endColumn":25},{"ruleId":"306","severity":1,"message":"307","line":23,"column":22,"nodeType":"308","messageId":"309","endLine":23,"endColumn":24},{"ruleId":"306","severity":1,"message":"307","line":23,"column":41,"nodeType":"308","messageId":"309","endLine":23,"endColumn":43},{"ruleId":"301","severity":1,"message":"353","line":7,"column":8,"nodeType":"303","messageId":"304","endLine":7,"endColumn":22},{"ruleId":"301","severity":1,"message":"354","line":8,"column":8,"nodeType":"303","messageId":"304","endLine":8,"endColumn":25},{"ruleId":"301","severity":1,"message":"359","line":9,"column":8,"nodeType":"303","messageId":"304","endLine":9,"endColumn":21},{"ruleId":"301","severity":1,"message":"355","line":10,"column":10,"nodeType":"303","messageId":"304","endLine":10,"endColumn":29},{"ruleId":"301","severity":1,"message":"345","line":10,"column":31,"nodeType":"303","messageId":"304","endLine":10,"endColumn":50},{"ruleId":"301","severity":1,"message":"356","line":10,"column":71,"nodeType":"303","messageId":"304","endLine":10,"endColumn":81},{"ruleId":"301","severity":1,"message":"357","line":10,"column":83,"nodeType":"303","messageId":"304","endLine":10,"endColumn":95},{"ruleId":"301","severity":1,"message":"360","line":6,"column":10,"nodeType":"303","messageId":"304","endLine":6,"endColumn":31},{"ruleId":"335","severity":1,"message":"336","line":25,"column":65,"nodeType":"337","messageId":"338","endLine":25,"endColumn":67},{"ruleId":"339","severity":1,"message":"340","line":27,"column":35,"nodeType":"341","messageId":"342","endLine":27,"endColumn":36},{"ruleId":"306","severity":1,"message":"307","line":35,"column":26,"nodeType":"308","messageId":"309","endLine":35,"endColumn":28},{"ruleId":"339","severity":1,"message":"340","line":73,"column":42,"nodeType":"341","messageId":"342","endLine":73,"endColumn":43},{"ruleId":"306","severity":1,"message":"307","line":84,"column":26,"nodeType":"308","messageId":"309","endLine":84,"endColumn":28},{"ruleId":"339","severity":1,"message":"340","line":121,"column":43,"nodeType":"341","messageId":"342","endLine":121,"endColumn":44},{"ruleId":"306","severity":1,"message":"307","line":133,"column":26,"nodeType":"308","messageId":"309","endLine":133,"endColumn":28},{"ruleId":"301","severity":1,"message":"361","line":5,"column":8,"nodeType":"303","messageId":"304","endLine":5,"endColumn":21},"no-native-reassign",["362"],"no-negated-in-lhs",["363"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["364"],["365"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'CloudDone' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'currentEvents'. Either include it or remove the dependency array.",["366"],"'usernameValid' is assigned a value but never used.","'ChangeusernameValid' is assigned a value but never used.","'emailValid' is assigned a value but never used.","'ChangeemailValid' is assigned a value but never used.","'passwordLen' is assigned a value but never used.","'ChangepasswordLen' is assigned a value but never used.","'passwordLetter' is assigned a value but never used.","'ChangepasswordLetter' is assigned a value but never used.","'passwordNumber' is assigned a value but never used.","'ChangepasswordNumber' is assigned a value but never used.","'passwordSpecial' is assigned a value but never used.","'ChangepasswordSpecial' is assigned a value but never used.","'confirmPasswordMatched' is assigned a value but never used.","'ChangeconfirmPasswordMatched' is assigned a value but never used.","'signUpValid' is assigned a value but never used.","'ChangesignUpValid' is assigned a value but never used.","'IconStyle' is assigned a value but never used.","'userNameDisplay' is assigned a value but never used.","'UserInput' is defined but never used.","'Popover' is defined but never used.","'message' is defined but never used.","'Text' is assigned a value but never used.","'ChangeMonths' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'ChangeURLPH' is assigned a value but never used.","'EditTime' is assigned a value but never used.","'CheckCircleOutlined' is defined but never used.","'CheckCircleFilled' is defined but never used.","'SubmitButton' is defined but never used.","'RadioButtonUncheckedIcon' is defined but never used.","'RadioButtonCheckedIcon' is defined but never used.","'ShowDateStle' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'VisibilityIcon' is defined but never used.","'VisibilityOffIcon' is defined but never used.","'CloseCircleOutlined' is defined but never used.","'EditFilled' is defined but never used.","'EditOutlined' is defined but never used.","'createEventId' is defined but never used.","'DateRangeIcon' is defined but never used.","'ControlCameraOutlined' is defined but never used.","'ColorLensIcon' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"367","fix":"368"},{"desc":"367","fix":"369"},{"desc":"370","fix":"371"},"Update the dependencies array to be: [history]",{"range":"372","text":"373"},{"range":"374","text":"373"},"Update the dependencies array to be: [currentEvents]",{"range":"375","text":"376"},[498,500],"[history]",[493,495],[2033,2035],"[currentEvents]"]