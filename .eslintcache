[{"/Users/mero/projects/notesk/src/index.js":"1","/Users/mero/projects/notesk/src/App.js":"2","/Users/mero/projects/notesk/src/serviceWorker.js":"3","/Users/mero/projects/notesk/src/Routes/Calendar/Calendar.js":"4","/Users/mero/projects/notesk/src/Routes/Signup/Signup.js":"5","/Users/mero/projects/notesk/src/Routes/Login/Login.js":"6","/Users/mero/projects/notesk/src/Routes/Notes/Notes.js":"7","/Users/mero/projects/notesk/src/Routes/Calendar/CalendarCollection.js":"8","/Users/mero/projects/notesk/src/API/API.js":"9","/Users/mero/projects/notesk/src/Routes/Signup/SignupForm.js":"10","/Users/mero/projects/notesk/src/UI/UserInput.js":"11","/Users/mero/projects/notesk/src/UI/NavBar.js":"12","/Users/mero/projects/notesk/src/UI/Imag.js":"13","/Users/mero/projects/notesk/src/UI/Footer.js":"14","/Users/mero/projects/notesk/src/Routes/Login/LoginForm.js":"15","/Users/mero/projects/notesk/src/UI/Button.js":"16","/Users/mero/projects/notesk/src/Routes/Notes/Note/Note.js":"17","/Users/mero/projects/notesk/src/Routes/Notes/CreateNote/CreateNote.js":"18","/Users/mero/projects/notesk/src/Routes/Calendar/CalendarForm.js":"19","/Users/mero/projects/notesk/src/UI/Modal.js":"20","/Users/mero/projects/notesk/src/UI/Switch.js":"21","/Users/mero/projects/notesk/src/UI/UserIcon.js":"22","/Users/mero/projects/notesk/src/Routes/Calendar/ScheduleForm/Schedule.js":"23","/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/EvenForm.js":"24","/Users/mero/projects/notesk/src/UI/TextArea.js":"25","/Users/mero/projects/notesk/src/Routes/Calendar/event-utils.js":"26","/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/EditEventForm.js":"27","/Users/mero/projects/notesk/src/Routes/Calendar/ScheduleForm/Containers/TextInputContainer.js":"28","/Users/mero/projects/notesk/src/Routes/Calendar/ScheduleForm/Containers/DaysContainer.js":"29","/Users/mero/projects/notesk/src/Routes/Calendar/ScheduleForm/Containers/SubmitButton.js":"30","/Users/mero/projects/notesk/src/Routes/Calendar/ScheduleForm/Containers/Date-TimeContainer.js":"31","/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/Bottons/DeleteButton.js":"32","/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/Bottons/EditButton.js":"33","/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/Bottons/submitChanges.js":"34","/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/Containers/TextInputContainer.js":"35","/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/Containers/Date-TimeContainer.js":"36","/Users/mero/projects/notesk/src/Routes/Calendar/DataCollection/TimeSelected.js":"37","/Users/mero/projects/notesk/src/Routes/Calendar/DataCollection/RepeatedDaysSelected.js":"38","/Users/mero/projects/notesk/src/Routes/Calendar/DataCollection/DateSelected.js":"39","/Users/mero/projects/notesk/src/UI/Select.js":"40","/Users/mero/projects/notesk/src/UI/logo.js":"41","/Users/mero/projects/notesk/src/Routes/Calendar/ScheduleForm/Containers/DisplayContainer.js":"42","/Users/mero/projects/notesk/src/Routes/Calendar/DataCollection/DisplaySelected.js":"43","/Users/mero/projects/notesk/src/Routes/Calendar/DataCollection/OptionsForm.js":"44","/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/Containers/DisplayContainer.js":"45","/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/HoverTitle.js":"46","/Users/mero/projects/notesk/src/Routes/Calendar/DataCollection/LangSelection.js":"47","/Users/mero/projects/notesk/src/WeatherApp/WeatherStack.js":"48","/Users/mero/projects/notesk/src/WeatherApp/GeoCoding.js":"49","/Users/mero/projects/notesk/src/UI/WeatherIcon.js":"50"},{"size":481,"mtime":1614537204644,"results":"51","hashOfConfig":"52"},{"size":2597,"mtime":1616444922787,"results":"53","hashOfConfig":"52"},{"size":5086,"mtime":1614537204644,"results":"54","hashOfConfig":"52"},{"size":2230,"mtime":1616443854893,"results":"55","hashOfConfig":"52"},{"size":1024,"mtime":1616112654286,"results":"56","hashOfConfig":"52"},{"size":965,"mtime":1616112654286,"results":"57","hashOfConfig":"52"},{"size":6066,"mtime":1616443130816,"results":"58","hashOfConfig":"52"},{"size":3775,"mtime":1616445308112,"results":"59","hashOfConfig":"52"},{"size":5239,"mtime":1616445670489,"results":"60","hashOfConfig":"52"},{"size":22724,"mtime":1616444396803,"results":"61","hashOfConfig":"52"},{"size":4264,"mtime":1615686143413,"results":"62","hashOfConfig":"52"},{"size":11891,"mtime":1616445009486,"results":"63","hashOfConfig":"52"},{"size":436,"mtime":1614973270090,"results":"64","hashOfConfig":"52"},{"size":521,"mtime":1614537204642,"results":"65","hashOfConfig":"52"},{"size":7556,"mtime":1616445216297,"results":"66","hashOfConfig":"52"},{"size":3017,"mtime":1616428834815,"results":"67","hashOfConfig":"52"},{"size":9183,"mtime":1615932929141,"results":"68","hashOfConfig":"52"},{"size":8432,"mtime":1615911510398,"results":"69","hashOfConfig":"52"},{"size":11176,"mtime":1616445247691,"results":"70","hashOfConfig":"52"},{"size":3663,"mtime":1615693045262,"results":"71","hashOfConfig":"52"},{"size":5056,"mtime":1616431406955,"results":"72","hashOfConfig":"52"},{"size":931,"mtime":1615731646837,"results":"73","hashOfConfig":"52"},{"size":12971,"mtime":1616116056584,"results":"74","hashOfConfig":"52"},{"size":6804,"mtime":1615665818609,"results":"75","hashOfConfig":"52"},{"size":3178,"mtime":1615573662788,"results":"76","hashOfConfig":"52"},{"size":85,"mtime":1615663799939,"results":"77","hashOfConfig":"52"},{"size":11816,"mtime":1616445380678,"results":"78","hashOfConfig":"52"},{"size":4671,"mtime":1616445382011,"results":"79","hashOfConfig":"52"},{"size":1127,"mtime":1614974508820,"results":"80","hashOfConfig":"52"},{"size":3196,"mtime":1616445381977,"results":"81","hashOfConfig":"52"},{"size":9984,"mtime":1616445381977,"results":"82","hashOfConfig":"52"},{"size":1293,"mtime":1615911655091,"results":"83","hashOfConfig":"52"},{"size":880,"mtime":1616445408990,"results":"84","hashOfConfig":"52"},{"size":3595,"mtime":1616116056584,"results":"85","hashOfConfig":"52"},{"size":5351,"mtime":1614974508819,"results":"86","hashOfConfig":"52"},{"size":13192,"mtime":1616116056584,"results":"87","hashOfConfig":"52"},{"size":4255,"mtime":1616445423301,"results":"88","hashOfConfig":"52"},{"size":3374,"mtime":1615655515514,"results":"89","hashOfConfig":"52"},{"size":6425,"mtime":1615655160833,"results":"90","hashOfConfig":"52"},{"size":3416,"mtime":1616114686659,"results":"91","hashOfConfig":"52"},{"size":301,"mtime":1616445068095,"results":"92","hashOfConfig":"52"},{"size":1113,"mtime":1616445381977,"results":"93","hashOfConfig":"52"},{"size":1333,"mtime":1615656828003,"results":"94","hashOfConfig":"52"},{"size":4361,"mtime":1616116297406,"results":"95","hashOfConfig":"52"},{"size":1127,"mtime":1615657364653,"results":"96","hashOfConfig":"52"},{"size":2757,"mtime":1615669544688,"results":"97","hashOfConfig":"52"},{"size":1290,"mtime":1616114686659,"results":"98","hashOfConfig":"52"},{"size":931,"mtime":1616445670489,"results":"99","hashOfConfig":"52"},{"size":895,"mtime":1616421574828,"results":"100","hashOfConfig":"52"},{"size":396,"mtime":1616443736770,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"7nz38j",{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"104"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"104"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"104"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"104"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"104"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"104"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"104"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"104"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"104"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"104"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"104"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"104"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mero/projects/notesk/src/index.js",[],["215","216"],"/Users/mero/projects/notesk/src/App.js",[],"/Users/mero/projects/notesk/src/serviceWorker.js",[],"/Users/mero/projects/notesk/src/Routes/Calendar/Calendar.js",[],"/Users/mero/projects/notesk/src/Routes/Signup/Signup.js",["217"],"import React, {useEffect} from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Nav from \"../../UI/NavBar\";\nimport SignupForm from \"./SignupForm\"; \nimport Imag from \"../../UI/Imag\"; \nimport API from \"../../API/API\";\n\n\nconst Signup = (props) => {\n  let history = useHistory()\n  useEffect( () => {\n    async function CheckingIsLoggedIn() {\n      const isLoggedIn = await API.isLoggedIn();\n      if (isLoggedIn) {\n        history.push(\"/\");\n      }\n    }\n\n    CheckingIsLoggedIn()\n  } , []) \n\n  return (\n    <div>\n      <Nav ColorChanged={props.colorchanged} \n        RecieveColor={props.Color} \n        showLoginButton={true}\n        showSignUpButton={false}\n        showLogOutButton={false}\n        CallingPage={\"Signin\"}\n        username={null}\n      />\n      <Imag/>  \n      <SignupForm \n        IsLocation={props.Location}\n        ColorChanged={props.colorchanged} \n        RecieveColor={props.Color}\n      />\n    </div>\n  );\n};\n\nexport default Signup;\n","/Users/mero/projects/notesk/src/Routes/Login/Login.js",["218"],"import React, {useEffect} from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Nav from \"../../UI/NavBar\";\nimport LoginForm from \"./LoginForm\";\nimport Imag from \"../../UI/Imag\"; \nimport API from \"../../API/API\";\n\nconst Login = (props) => {\n  let history = useHistory()\n  useEffect( () => {\n    async function CheckingIsLoggedIn() {\n      const isLoggedIn = await API.isLoggedIn(()=>{});\n      if (isLoggedIn) {\n        history.push(\"/\");\n      }\n    }\n\n    CheckingIsLoggedIn()\n  } , []) \n\n  return (\n    <div>\n      <Nav \n        ColorChanged={props.colorchanged} \n        RecieveColor={props.Color} \n        CallingPage={\"Signup\"}\n        showLoginButton={false}\n        showSignUpButton={true}\n        showLogOutButton={false}\n        username={null}\n      />\n      <Imag/>  \n      <LoginForm ColorChanged={props.colorchanged} RecieveColor={props.Color}/>\n    </div>\n  );\n};\n\nexport default Login;\n","/Users/mero/projects/notesk/src/Routes/Notes/Notes.js",["219","220","221","222"],"/Users/mero/projects/notesk/src/Routes/Calendar/CalendarCollection.js",["223","224","225"],"/Users/mero/projects/notesk/src/API/API.js",["226","227"],"/Users/mero/projects/notesk/src/Routes/Signup/SignupForm.js",["228","229","230","231","232","233","234","235"],"/Users/mero/projects/notesk/src/UI/UserInput.js",[],"/Users/mero/projects/notesk/src/UI/NavBar.js",["236","237","238","239","240"],"/Users/mero/projects/notesk/src/UI/Imag.js",[],"/Users/mero/projects/notesk/src/UI/Footer.js",[],"/Users/mero/projects/notesk/src/Routes/Login/LoginForm.js",["241","242","243","244"],"/Users/mero/projects/notesk/src/UI/Button.js",[],"/Users/mero/projects/notesk/src/Routes/Notes/Note/Note.js",[],"/Users/mero/projects/notesk/src/Routes/Notes/CreateNote/CreateNote.js",["245"],"import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { PlusCircleFilled, CheckCircleFilled} from '@ant-design/icons'\r\nimport FadeIn from 'react-fade-in';\r\nimport UserInput from '../../../UI/UserInput';\r\nimport TextArea from '../../../UI/TextArea';\r\nimport NoteContainer from '../../../UI/Modal';\r\nimport { SentimentVeryDissatisfied, Title, ImportContacts ,SentimentVerySatisfied} from '@material-ui/icons';\r\nimport API from \"../../../API/API\";\r\n\r\nconst AddNote = styled.div`\r\n    font-size :30px;\r\n    color: #f5ba13;\r\n    position: absolute;\r\n    right: 0px;\r\n    bottom: -15px;\r\n    width: 36px;\r\n    height: 36px;\r\n`\r\nconst InfoContainer = styled.div`\r\n    width: 455px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    margin: 4px;\r\n    `\r\nconst CreateNote = (props) => {\r\n    const IconColor = { color : props.RecieveColor.IconC }\r\n    const [isExpanded, setExpanded] = useState(false);\r\n    const [isSubmit, setSubmit] = useState(false); \r\n    const [CurrentNote, setNote] = useState({title: \"\",content: \"\", id: \"\"}); \r\n    const [CurrentPlaceHolde, setPlaceHolder]= useState({titlePH: \"Title\" , contentPH: \"Take a note ...\"})\r\n    const [isHover, SetHover] = useState(true);\r\n    const [TargetLength, ChangeTargetLength] = useState(\"\")\r\n    const OnHovering = () => {SetHover(!isHover)}\r\n    const subNote = async (event) =>  {\r\n        event.preventDefault();\r\n        setSubmit(true);\r\n        if (CurrentNote.title === \"\" && CurrentNote.content === \"\" )\r\n        {   \r\n        return( <FadeIn>{\r\n            setPlaceHolder({ titlePH: \"Please Enter A Title ....(-_-)!\", contentPH: \"Please Enter some Content ...(-_-)!\"}) \r\n            && isIconUserInput() && isIconTextArea()}\r\n        </FadeIn> )\r\n        } \r\n        else  if (CurrentNote.title === \"\" )\r\n        {  \r\n        return( <FadeIn>{\r\n            setPlaceHolder({titlePH: \"Please Enter A Title ....(-_-)\"}) \r\n            && isIconUserInput()}\r\n        </FadeIn>)\r\n                \r\n        } else if (CurrentNote.content === \"\" )\r\n        {\r\n        return( <FadeIn>{\r\n            setPlaceHolder({contentPH: \"Please Enter some Content ...(-_-)!\"}) \r\n            && isIconTextArea()}\r\n        </FadeIn>)\r\n        }else\r\n        {\r\n            const isLoggedIn = await API.isLoggedIn(()=>{});\r\n            if(isLoggedIn){\r\n                return API.CreateNote(CurrentNote.title, CurrentNote.content, (note)=>{\r\n                    setNote({note})\r\n                    props.AddedNote(note)\r\n                    setNote({\r\n                        title: \"\",\r\n                        content: \"\",\r\n                        id: \"\"\r\n                    })\r\n                    setPlaceHolder({\r\n                        titlePH: \"Title\" , \r\n                        contentPH: \"Take a note ...\"\r\n                    })\r\n                    props.TitleLitterNumber(TargetLength)\r\n                    ChangeTargetLength(\"\")\r\n                    setSubmit(false)\r\n                } ) \r\n            }\r\n            props.AddedNote(CurrentNote)\r\n            setNote({\r\n                title: \"\",\r\n                content: \"\",\r\n                id: \"\"\r\n            })\r\n            setPlaceHolder({\r\n                titlePH: \"Title\" , \r\n                contentPH: \"Take a note ...\"\r\n            })\r\n            props.TitleLitterNumber(TargetLength)\r\n            ChangeTargetLength(\"\")\r\n            setSubmit(false)\r\n        }  \r\n        \r\n    }\r\n    const isIconUserInput = () => \r\n    (!isSubmit ? \r\n        (CurrentNote.title === \"\" ? <SentimentVerySatisfied style={IconColor}/> : <Title style={IconColor}/>) \r\n        : (CurrentNote.title === \"\" ? <SentimentVeryDissatisfied style={IconColor}/> : <Title style={IconColor}/>))\r\n    const isIconTextArea = () => \r\n    (!isSubmit ? \r\n        (CurrentNote.content === \"\" ? <SentimentVerySatisfied style={IconColor}/> : <ImportContacts style={IconColor}/>) \r\n        : (CurrentNote.content === \"\" ? <SentimentVeryDissatisfied style={IconColor}/> : <ImportContacts style={IconColor}/>))\r\n    \r\n    const expand = () => {setExpanded(true)}\r\n\r\n    /******************************************************* Title *************************************************************************/\r\n    const handlerChangeTitle = (event) => {\r\n        ChangeTargetLength(event.target.value.length)\r\n        const {name , value} = event.target ;\r\n        setNote(prevNote => { return {...prevNote, [name]: value};});\r\n    }\r\n    const TitleValue = <InfoContainer>\r\n            <FadeIn><TextArea\r\n                rows={(TargetLength >= 40 ) ? 2 : 1}\r\n                maxLength={\"30\"}\r\n                name=\"title\"\r\n                inputType={\"text\"}\r\n                widthValue={\"421px\"}\r\n                paddingVale={\"4px\"}\r\n                outlineValue={\"none\"}\r\n                marginBottomValue={\"5px\"}\r\n                fontSizeValue={\"1.2em\"}\r\n                fontFamilyValue={\"inherit\"}\r\n                IsCalledValue={\"FOCUS\"} \r\n                borderRadiusValue= {\"7px\"}\r\n                BorderValue={\"solid\"}\r\n                borderWidthValue=\"thin\"\r\n                marginRightValue={\"10px\"}\r\n                onClickValue={expand}\r\n                onchangeValue={handlerChangeTitle}\r\n                InputValue={CurrentNote.title}\r\n                PlaceholderValue={CurrentPlaceHolde.titlePH}\r\n                backGroundColorValue={props.RecieveColor.UserInputBGC}\r\n                FontColorValue={props.RecieveColor.UserInputFC}\r\n                PlaceHolderColorValue={props.RecieveColor.UserInputPHC}\r\n                borderColorValue={props.RecieveColor.BorderColor}\r\n            /></FadeIn>\r\n            <FadeIn>{ isIconUserInput()}</FadeIn>\r\n        </InfoContainer>\r\n    \r\n    /*************************************************** Content *****************************************************************************/\r\n    const handlerChangeContent = (event) => {\r\n        const {name , value} = event.target ;\r\n        setNote(prevNote => { return {...prevNote, [name]: value};});\r\n    }\r\n    const ContentValue = isExpanded && \r\n        <InfoContainer>\r\n            <FadeIn><TextArea\r\n                InputValue={CurrentNote.content}\r\n                name=\"content\"\r\n                PlaceholderValue={CurrentPlaceHolde.contentPH}\r\n                rows={isExpanded ? 3 : 1}\r\n                onchangeValue={handlerChangeContent}\r\n                widthValue={\"421px\"}\r\n                paddingVale={\"4px\"}\r\n                outlineValue={\"none\"}\r\n                fontSizeValue={\"1.2em\"}\r\n                fontFamilyValue={\"inherit\"}\r\n                resizeValue={\"vertical\"}\r\n                IsCalledValue={\"FOCUS\"}\r\n                borderRadiusValue= {\"7px\"}\r\n                backGroundColorValue={props.RecieveColor.TextAreaBGC}\r\n                FontColorValue={props.RecieveColor.TextAreaFC}\r\n                PlaceHolderColorValue={props.RecieveColor.TextAreaPHC}\r\n                borderColorValue={props.RecieveColor.BorderColor}\r\n                BorderValue={\"solid\"}\r\n                borderWidthValue=\"thin\"\r\n                marginRightValue={\"10px\"}\r\n            /> </FadeIn>\r\n            <FadeIn>{isIconTextArea()}</FadeIn>\r\n        </InfoContainer>\r\n\r\n    /*************************************************** Button *****************************************************************************/\r\n    const ButtonValue = isExpanded && \r\n        <AddNote onPointerEnter={OnHovering} onMouseLeave={OnHovering}>\r\n            <FadeIn>{isHover ? <PlusCircleFilled /> :  <CheckCircleFilled onClick={subNote}/>}</FadeIn>\r\n        </AddNote>\r\n    \r\n    /*************************************************** Create Note *****************************************************************************/\r\n    const CreateTheNote = <FadeIn>\r\n            <NoteContainer\r\n                position= {\"relative\"}\r\n                width= {\"480px\"}\r\n                margin= {\"30px auto 20px auto\"}\r\n                padding= {\"15px\"}\r\n                boxShadowValue= {\"0 1px 5px rgb(138, 137, 137)\"}\r\n                borderRadiusValue= {\"7px\"}\r\n                resizeValue={\"both\"}\r\n                backGroundColorValue={props.RecieveColor.NotekBGC}\r\n                >\r\n                {TitleValue}\r\n                {ContentValue}\r\n                {ButtonValue}\r\n            </NoteContainer>\r\n        </FadeIn>\r\n\r\n    return(CreateTheNote)\r\n}\r\n\r\nexport default CreateNote;\r\n","/Users/mero/projects/notesk/src/Routes/Calendar/CalendarForm.js",["246","247","248","249","250","251","252"],"/Users/mero/projects/notesk/src/UI/Modal.js",[],"/Users/mero/projects/notesk/src/UI/Switch.js",[],"/Users/mero/projects/notesk/src/UI/UserIcon.js",[],"/Users/mero/projects/notesk/src/Routes/Calendar/ScheduleForm/Schedule.js",["253","254","255"],"import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport NoteContainer from \"../../../UI/Modal\"; \nimport FadeIn from \"react-fade-in\";\nimport {TitleContainer,DescriptionContainer,URLContainer} from \"./Containers/TextInputContainer\";\nimport {CalenderContianer,TimerContainer} from \"./Containers/Date-TimeContainer\";\nimport DisplayContainer from \"./Containers/DisplayContainer\";\nimport RDContainer from \"./Containers/DaysContainer\";\nimport SubmitButton from \"./Containers/SubmitButton\";\nimport { CloseCircleOutlined, CloseOutlined, CheckOutlined } from \"@ant-design/icons\"; \nimport DateRangeIcon from '@material-ui/icons/DateRange';\nimport AddAlertIcon from '@material-ui/icons/AddAlert';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\n\nconst EachateContainer = styled.div`\n    width: 400px;\n    display: flex;\n    flex-direction: row;\n    justify-content: ${props => props.JustifyContentCalue};\n    margin: 4px;\n`\nconst InfoContainer = styled.div`\n    width: 470px;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: flex-start;\n    margin: 4px;\n    margin-bottom: 10px;\n` \n\nconst Schedule = (props) => {\n    //All Component Color Stle\n    const IconColor = { \n        color : props.ScheduleColor.IconC, \n        fontSize:\"24px\", \n        marginLeft:\"10px\"\n    }\n    //Visable and unvisable color style \n    const VisibilityStle = {\n        marginRight: \"4px\", \n        marginLeft:\"4px\",\n        marginTop:\"6px\" , \n        fontSize: \"21px\", \n        color : props.ScheduleColor.IconC\n    }\n    const InValidStyle = {\n        color : \"red\", \n        fontSize:\"12px\", \n        marginRight:\"3px\", \n        marginLeft:\"37px\"\n    }\n    const ValidStyle = {\n        color : \"Green\", \n        fontSize:\"12px\", \n        marginRight:\"3px\", \n        marginLeft:\"37px\"\n    }\n    //Close ICion Area\n    const CloseIcon = \n    (<CloseCircleOutlined\n        onClick={()=> props.CallingCalendar(false)} \n        style={{marginRight: \"4px\", marginLeft: \"95%\", marginBottom: \"15px\",\n            fontSize: \"26px\", color: props.ScheduleColor.IconC}} // send the color list from the parent App file \n    />)\n\n    /*************************************************** Title Area *****************************************************************************/\n    const [getTitle, ChangeTitle] = useState(\"\");\n    const [TitlePH, ChangeTitlePH] = useState(\"Title ...\");\n    const [ShowTitleMessage, ChangeTitleMessage] = useState(false)\n    var TitleMessage = \"Please Add Title\"\n    const isTitleMessage = <InfoContainer>\n        <CloseOutlined style={InValidStyle}/>\n        <span style={{\n            color:\"red\", \n            textAlign: \"center\",  \n            fontSize: \"12px\",\n            fontFamily: \"Arial\"\n        }}\n        >{TitleMessage}</span>\n        </InfoContainer>\n    const Title = <TitleContainer\n            MaxLength={\"45\"}\n            SubmitTitle={(value) => ChangeTitle(value)} //this is to return input value of the title and then send it to submit model\n            SubmitTitlePlaceHolder={TitlePH} //this is to send the placeholder for the title area\n            ScheduleColor={props.ScheduleColor}  // send the color list from the parent App file \n        />  \n\n    /*************************************************** Description Area *****************************************************************************/\n    const [getDescription, ChangeDescription] = useState(\"\");\n    const [DescriptionPH, ChangeDescriptionPH] = useState(\"Description ...\");\n    const [ShowDescriptionMessage, ChangeDescriptionMessage] = useState(false)\n    var DescriptionMessage = \"Please Add Description\"\n    const isDescriptionMessage = <InfoContainer>\n        <CloseOutlined style={InValidStyle}/>\n        <span style={{\n            color:\"red\", \n            textAlign: \"center\",  \n            fontSize: \"12px\",\n            fontFamily: \"Arial\"\n        }}\n        >{DescriptionMessage}</span>\n        </InfoContainer>\n    const Description = (\n        <DescriptionContainer\n        SubmitDescription={(value) => ChangeDescription(value)}\n        SubmitDescriptionPlaceHolder={DescriptionPH}\n        ScheduleColor={props.ScheduleColor}\n        />\n    );\n\n    /*************************************************** URL Area *****************************************************************************/\n    const [getURL, ChangeURL] = useState();\n    const [URLPH, ChangeURLPH] = useState(\"Optional Attached Link For Description ...\");\n    const URL = (\n        <URLContainer\n        URLOption={(value) => ChangeURL(value)}\n        SubmitURLPH={URLPH}\n        ScheduleColor={props.ScheduleColor}\n        />\n    );\n\n    /*************************************************** the data or repeated days *****************************************************************************/\n    const [isShowTime, ChangeisShowTime] = useState(true) //to show the option to change the Time that the user selected\n    const ShowData = <div onClick={()=>ChangeisShowTime(!isShowTime)}>\n        {isShowTime ?  <RadioButtonUncheckedIcon style={VisibilityStle} /> : <RadioButtonCheckedIcon style={VisibilityStle} /> }\n    </div>\n    const isData = <EachateContainer>\n            <DateRangeIcon style={IconColor}/>   \n            <span style={{paddingTop: \"4px\" ,fontSize: \"1em\", marginLeft: \"50px\"}}>Selected Data of Event</span>\n        </EachateContainer>\n    const isRepeated = <EachateContainer>\n            <AddAlertIcon style={IconColor}/>   \n            <span style={{paddingTop: \"4px\" ,fontSize: \"1em\", marginLeft: \"20px\"}}>Select days of repeated Event and its Time</span>\n        </EachateContainer>\n    const IcionArea = <EachateContainer> \n            {ShowData}\n            {isShowTime ? isData  :isRepeated }\n        </EachateContainer>\n\n    // Data From and To\n    const [getFormDate, ChangeFormDate] = useState(); //this is the data that will be send to submit model to be added to the event list \n    const [getToDate, ChangeToDate] = useState();  //this is the data that will be send to submit model to be added to the event list \n    \n    const StartDate= props.SendSelectedSD //This is the selected data in calendar\n    const EndDate= props.SendSelectedED//This is the selected data in calendar  \n    const Data = ( !isShowTime ? null :\n        <CalenderContianer\n        SendSD={StartDate} //This is to send back the selected started data\n        SendED={EndDate} //This is to send back the selected ended data\n        GetFromDate={(value) => ChangeFormDate(value)} //Returning the selected data that the user chose \n        GetToDate={(value) => ChangeToDate(value)} //Returning the selected data that the user chose \n        ScheduleColor={props.ScheduleColor} // send the color list from the parent App file  \n        /> \n    );\n\n    /*************************************************** time Area *****************************************************************************/\n    const [StartHours, ChangeStartHour] = useState(); //have returned starting hour if time is needed\n    const [StartMinuts, ChangeStartMinuts] = useState(); //have returned starting minut if time is needed \n    const [EndHours, ChangeEndHour] = useState(); //have returned Ending hour if time is needed\n    const [EndMinuts, ChangeEndMinuts] = useState(); //have returned Ending minut if time is needed \n    const [TimeClicked, ChangeTimeClicked] = useState() //this to make sure that time is included or not and show the repeated days model\n    const [CheckETValidation, ChangeInvalidET] = useState(true)\n    const [STClicked, ChangeSTClicked] = useState(false)\n    const [ETClicked, ChangeETClicked] = useState(false)\n    const Time = (\n        <TimerContainer\n            ETValidationValue={CheckETValidation} // Pass down validation TIme \n            FromHourSelected={(value) => ChangeStartHour(value)} // return starting hour if time is needed\n            FromMinutsSelected={(value) => ChangeStartMinuts(value)} // return starting minut if time is needed \n            ToHourSelected={(value) => ChangeEndHour(value)} // return Ending hour if time is needed\n            ToMinutsSelected={(value) => ChangeEndMinuts(value)} // return Ending minut if time is needed \n            ScheduleColor={props.ScheduleColor} // send the color list from the parent App file  \n            isTime={(value) => ChangeTimeClicked(value)}\n            STCValue={(value) => ChangeSTClicked(value)} //starting time if clicked \n            ETCValue={(value) => ChangeETClicked(value)} //starting time if clicked \n        />\n        );\n        \n    /*************************************************** rebeated days Area *****************************************************************************/\n    const [GetRepeatedDays, ChangeRepeatedDays] = useState()\n    const RepeatedDays =( isShowTime ? null :<RDContainer\n        ScheduleColor={props.ScheduleColor} // send the color list from the parent App file  \n        SubmitNumberOfRP={(value) => ChangeRepeatedDays(value)} //returning the value of repeated days \n        />\n    );\n\n    /*************************************************** Display Options Area *****************************************************************************/\n    const [GetDiplayOption , ChangeDiplayOption] = useState()\n    const DiplayOption =<DisplayContainer\n        ScheduleColor={props.ScheduleColor} // send the color list from the parent App file  \n        SubmitDisplayOption={(value) => ChangeDiplayOption(value)} //returning the value of repeated days \n        /> \n\n    /*************************************************** Submit Buton  Area *****************************************************************************/\n\n    const Submit = (\n      <SubmitButton\n        isCallingCalendar={(value) => props.CallingCalendar(value)} //return the close value to return to calender from the submit model\n        isTitle={getTitle} //the Title value\n        TitleMessage={(value) => ChangeTitleMessage(value)} // to show error if empty title\n        CheckTitlePH={(value) => ChangeTitlePH(value)} //this is to change the title place holder if there is no title\n        isDescription={getDescription} //the Description value\n        DescriptionMessage={(value) => ChangeDescriptionMessage(value)} // to show error if empty description\n        CheckDescriptionPH={(value) => ChangeDescriptionPH(value)} //this is to change the description placeholder if there is no placeholder\n        isURL={getURL} //the URL value\n        isStartingDate={isShowTime ? (STClicked ? (getFormDate + \"T\" +StartHours+\":\"+StartMinuts+\":00\") : (getFormDate + \"T12:00:00\") ) : undefined} //the value of the Starting data\n        isEndingData={isShowTime ? (ETClicked ? (getToDate + \"T\" +StartHours+\":\"+StartMinuts+\":00\") : (getToDate + \"T12:30:00\") ) : undefined} //the value of Ending data\n        //The starting and ending time only works with repeated days \n        isStartingTime={!isShowTime  ? (TimeClicked ?('12:00:00') :(StartHours+\":\"+StartMinuts+\":00\")) : undefined} //Choose Starting Time of the repeated Event\n        isEndingTime={!isShowTime ? (TimeClicked ?('12:30:00') :(EndHours+\":\"+EndMinuts+\":00\")) : undefined} //Choose Ending Time of the repeated Event\n        isRepeatedDays={!isShowTime ? GetRepeatedDays : undefined} //Values of Repeated Days\n        isDisplayOption= {GetDiplayOption} //the value of the Display Option\n        isEvent={props.submitEventValues} //returning the new event to the array of objects\n        CheckingETValidation={(value)=>ChangeInvalidET(value)}\n        RepeatOrData={isShowTime} // to check the time if it is on repeated days or just a noraml day \n      />\n    );\n\n    /*************************************************** Submit Form *****************************************************************************/\n    const ScheduleForm = (\n        <FadeIn>\n            <NoteContainer\n                position={\"relative\"}\n                width={\"520px\"}\n                margin={\"30px auto 20px auto\"}\n                padding={\"15px\"}\n                boxShadowValue={\"0 1px 5px rgb(138, 137, 137)\"}\n                borderRadiusValue={\"7px\"}\n                resizeValue={\"both\"}\n                backGroundColorValue={props.ScheduleColor.NotekBGC} //// send the color list from the parent App file \n                FontColorValue={props.ScheduleColor.NoteFC} //// send the color list from the parent App file \n                >\n            {CloseIcon}\n            {Title} \n            {ShowTitleMessage ? isTitleMessage : null}\n            {Description}\n            {ShowDescriptionMessage ? isDescriptionMessage : null}\n            {URL}\n            {IcionArea}\n            {Data}\n            {Time} \n            {RepeatedDays}\n            {DiplayOption}\n            {Submit}\n            </NoteContainer> \n        </FadeIn>\n    );\n\n  return ScheduleForm;\n};\n\nexport default Schedule;\n","/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/EvenForm.js",[],"/Users/mero/projects/notesk/src/UI/TextArea.js",[],"/Users/mero/projects/notesk/src/Routes/Calendar/event-utils.js",[],"/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/EditEventForm.js",["256"],"/Users/mero/projects/notesk/src/Routes/Calendar/ScheduleForm/Containers/TextInputContainer.js",[],"/Users/mero/projects/notesk/src/Routes/Calendar/ScheduleForm/Containers/DaysContainer.js",[],"/Users/mero/projects/notesk/src/Routes/Calendar/ScheduleForm/Containers/SubmitButton.js",["257","258"],"import React, { useState, useEffect } from \"react\";\nimport FadeIn from \"react-fade-in\";\nimport { LoginOutlined } from \"@ant-design/icons\";\nimport Button from \"../../../../UI/Button\";\nimport { createEventId } from \"../../event-utils\";\nimport API from \"../../../../API/API\";\n\nconst SubmitButton = (props) => {\n  const ButtonIconColor = {\n    fontSize: \"20px\",\n    marginRight: \"9px\",\n    marginTop: \"4px\",\n  };   \n  \n  var CreateEvent = {\n    id: createEventId(),\n    title: props.isTitle,\n    description: props.isDescription,\n    Url: props.isURL,\n    start: props.isStartingDate,\n    end: props.isEndingData,\n    startTime: props.isStartingTime,\n    endTime: props.isEndingTime,\n    daysOfWeek: props.isRepeatedDays,\n    display: props.isDisplayOption  \n  };\n  //this is for validation that the ending time is after the starting time \n  const SDTHourValidation = props.RepeatOrData ? props.isStartingDate.toString().slice(11, 13) : props.isStartingTime.toString().slice(0, 2)\n  const SDTValue = parseInt(SDTHourValidation, 10)\n  const EDTHourValidation = props.RepeatOrData ? props.isEndingData.toString().slice(11, 13) : props.isEndingTime.toString().slice(0, 2)\n  const EDTValue = parseInt(EDTHourValidation, 10)\n  const SDTMinValidation = props.RepeatOrData ? props.isStartingDate.toString().slice(14, 16) : props.isStartingTime.toString().slice(3, 5)\n  const SDTMinValue = parseInt(SDTMinValidation, 10)\n  const EDTMinValidation = props.RepeatOrData ? props.isEndingData.toString().slice(14, 16) : props.isEndingTime.toString().slice(3, 5)\n  const EDTMinValue = parseInt(EDTMinValidation, 10)\n\n  const SubmitEvent = async () => { \n    const isLoggedIn = await API.isLoggedIn(()=>{});\n\n    if (EDTValue < SDTValue) { props.CheckingETValidation(false)}\n    else if (EDTValue === SDTValue && EDTMinValue < SDTMinValue) { props.CheckingETValidation(false)}\n    else if( props.isTitle === \"\" && props.isDescription === \"\"){props.TitleMessage(true);props.DescriptionMessage(true);} \n    else if (props.isTitle === \"\" ) {props.TitleMessage(true) } \n    else if (props.isDescription === \"\") {props.TitleMessage(false)}\n    else {\n      if(isLoggedIn){\n        return  API.CreateEvents(\n          CreateEvent.title, \n          CreateEvent.description, \n          CreateEvent.Url, \n          CreateEvent.start, \n          CreateEvent.end, \n          (Event) => {\n            CreateEvent=Event //changing the create event before sending it to the front end \n            props.isEvent((oldarr) => [...oldarr, CreateEvent])\n            props.isCallingCalendar(false) \n          })\n      }\n      props.isEvent((oldarr) => [...oldarr, CreateEvent])\n      props.isCallingCalendar(false) \n    }\n    };\n\n  const SubmitButton = (\n    <FadeIn>\n      <Button\n        width={\"120px\"}\n        marginBottomValue={\"10px\"}\n        marginLeftValue={\"35%\"}\n        fontSizeValue={\"20px\"}\n        borderRadiusValue={\"15px\"}\n        IsCalledValue={\"hover\"}\n        BorderValue=\"solid\"\n        borderWidthValue=\"thin\"\n        paddingInputValue=\"2px\"\n        onClick={SubmitEvent}\n        text={\"Submit\"}\n        icon={<LoginOutlined style={ButtonIconColor} />}\n      />\n    </FadeIn>\n  );\n\n\n  return SubmitButton;\n};\n\nexport default SubmitButton;\n","/Users/mero/projects/notesk/src/Routes/Calendar/ScheduleForm/Containers/Date-TimeContainer.js",["259","260"],"import React, { useState } from \"react\";\nimport styled from \"styled-components\"; \nimport FadeIn  from 'react-fade-in'; \nimport { CalendarOutlined , ClockCircleOutlined} from \"@ant-design/icons\"; \nimport TimeSelected from '../../DataCollection/TimeSelected'; \nimport { CheckOutlined, CloseOutlined, CheckCircleFilled } from \"@ant-design/icons\"; \nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\n\nconst InfoContainer = styled.div`\n    width: 440px;\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    margin: 4px;\n    margin-bottom: 14px;\n`\nconst EachateContainer = styled.div`\n    width: 400px;\n    display: flex;\n    flex-direction: row;\n    justify-content: ${props => props.JustifyContentCalue};\n    margin: 4px;\n    margin-left: ${props => props.MarginLeft ? props.MarginLeft : null }\n`\nconst DateContainer = styled.div`\n    width: 400px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n`\nconst CalenderContianer = (props) => {\n    //All Component Color Stle\n    const IconColor = { \n        color : props.ScheduleColor.IconC, \n        fontSize:\"25px\", \n        marginRight:\"15px\", \n        marginTop:\"4px\" \n    }\n    \n    // This is a togole to change the state of the disabled and to change the icion as well \n    const InconArea = <div style={{display: \"flex\", flexDirection: \"column\", justifyContent: \"flex-start\"}}>\n            <FadeIn><CalendarOutlined style={IconColor}/> </FadeIn> \n        </div>\n\n    //This is for the layout for Year Month Days \n    const InfoArea = <EachateContainer JustifyContentCalue={\"space-between\" }>\n            {<FadeIn><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginLeft: \"150px\"}}>Selected Data</span></FadeIn>}\n        </EachateContainer>\n\n    //Starting Data Area\n    const StartingData = <EachateContainer JustifyContentCalue={ \"\"}>\n            <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}>From</span></FadeIn>\n            { <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"1px\", color:props.ScheduleColor.IconC}}>{props.SendSD}</span></FadeIn> }\n        </EachateContainer>\n    \n    // End Data Area\n    const EndingingData = <EachateContainer JustifyContentCalue={ \"\"}>\n            <FadeIn><span style={{  padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"25px\"}}>To</span></FadeIn>\n            { <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"1px\", color:props.ScheduleColor.IconC }}>{props.SendED}</span></FadeIn> }\n        </EachateContainer>\n    \n    //This is the returned Date to the calendar\n    const calendar = <InfoContainer>\n            {InconArea}\n            <DateContainer>\n                {InfoArea}\n                {StartingData}\n                {EndingingData}\n            </DateContainer>\n        </InfoContainer>\n\n    //To recieve a prop that will change the value from and to inside the schedule form to the value of From/to Date that has been created here  \n    props.GetFromDate(props.SendSD) //Return either the selected data from the calendar form or the changed data by the user\n    props.GetToDate(props.SendED) //Return either the selected data from the calendar form or the changed data by the user\n    \n    return(calendar)\n}\n\nconst TimerContainer = (props) => {\n    //All Component Color Stle\n    const IconColor = { \n        color : props.ScheduleColor.IconC, \n        fontSize:\"25px\", \n        marginRight:\"15px\", \n        marginTop:\"4px\"\n    }\n    //DateStyle and unDateStyle color style \n    const ShowDateStle = {\n        marginRight: \"4px\", \n        marginLeft:\"51px\",\n        marginTop:\"7px\" , \n        fontSize: \"18px\", \n        color : props.ScheduleColor.IconC\n    }\n    //Visable and unvisable color style \n    const VisibilityStle = {\n        marginRight: \"4px\", \n        marginLeft:\"4px\",\n        marginTop:\"7px\" , \n        fontSize: \"18px\", \n        color : props.ScheduleColor.IconC\n    }\n    const InValidStyle = {\n        color : \"red\", \n        fontSize:\"17px\",  \n        marginLeft: \"55px\",\n        marginRight: \"5px\",\n    }\n    const ValidStyle = {\n        color : \"#22e822\", \n        fontSize:\"17px\",  \n        marginLeft: \"55px\",\n        marginRight: \"5px\",\n    }\n\n    \n    const [isShowTime, ChangeisShowTime] = useState(true) //to show the option to change the Time that the user selected\n    //this is the part where we change the icon based on clicking the div \n    const ShowData = <FadeIn>\n        {isShowTime ?  null : \n            <CheckCircleFilled \n                onClick={()=>ChangeisShowTime(true)}\n                style={VisibilityStle} />} \n        </FadeIn>\n    const IcionArea = <div style={{display: \"flex\", flexDirection: \"column\", justifyContent: \"flex-start\"}}>\n            <FadeIn><ClockCircleOutlined style={IconColor}/>  </FadeIn>\n            <FadeIn>{ShowData}</FadeIn>\n        </div>\n    const isDefulatTime = \n        <DateContainer>\n            <FadeIn>\n                <EachateContainer>\n                {isShowTime ? <RadioButtonUncheckedIcon onClick={()=>ChangeisShowTime(false)} style={ShowDateStle}/> : null}  \n                    <span style={{paddingTop: \"6px\" ,fontSize: \"1em\", marginLeft: \"5px\"}}>By defualt the time set to 12 am </span> \n                </EachateContainer>\n            </FadeIn>\n            <FadeIn><span style={{paddingBottom: \"4px\" ,fontSize: \"1em\", marginLeft: \"60px\"}}>Click the Circle to choose certain time</span></FadeIn>\n        </DateContainer>\n\n    //This is for the layout for Hour Minuts Day system\n    const InfoArea = (isShowTime ? \n        isDefulatTime\n        :\n        <EachateContainer JustifyContentCalue={\"space-between\" }>\n                    <FadeIn ><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}> </span></FadeIn> \n                    <FadeIn ><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}>{\"Hour\"}</span></FadeIn> \n                    <FadeIn ><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}>{\"Minuts\"}</span></FadeIn> \n                    <FadeIn ><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}>{\"AM / PM\"}</span></FadeIn> \n        </EachateContainer>\n    );\n    \n    //collection of stating time for event\n    const [StartHoursValue, ChangeStartHourValue ]= useState() //save the Starting Hour\n    const [StartMinutsValue, ChangeStartMinutsValue ]= useState() //save the starting Minuts\n    const [StartDayValue, ChangeStartDayValue ]= useState() //save starting if it is AM or PM\n    const [STimeClicked, ChangeSTimeClicked]= useState(false)\n    props.STCValue(STimeClicked)\n\n    const StartingTime = isShowTime ? null :  \n        <EachateContainer JustifyContentCalue={\"space-between\" }>\n            <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"5px\"}}>Start</span></FadeIn>\n            <TimeSelected \n                name={\"StartingTime\"}\n                ChangeSTimeClicked={(value) => ChangeSTimeClicked(value)}\n                submitHourValue={(value) => ChangeStartHourValue(value)}\n                submitMinutsValue={(value) => ChangeStartMinutsValue(value)}\n                submitDayValue={(value) => ChangeStartDayValue(value)}\n                RecievedColor={props.ScheduleColor}\n                />\n        </EachateContainer>\n    \n    \n    //collection of ending time for event\n    const [EndHoursValue, ChangeEndHourValue ]= useState() //save the Ending Hour\n    const [EndMinutsValue, ChangeEndMinutsValue ]= useState() //save the Ending Minuts\n    const [EndDayValue, ChangeEndDayValue ]= useState() //save Ending if it is AM or PM\n    const [ETimeClicked, ChangeETimeClicked]= useState(false)\n    props.ETCValue(ETimeClicked)\n\n    const inValidET= props.ETValidationValue //this is for only if the ending time is not bigger than starting time \n    var inValidEndingTime = inValidET ? null : \"Please Change the Time value to be valid\"\n    const inValidEndInput =  <InfoContainer>\n            {inValidET ? null : <FadeIn><CloseOutlined style={InValidStyle}/></FadeIn>}\n            <FadeIn><span style={{\n                color: inValidET ? \"#22e822\" : \"red\", \n                textAlign: \"center\",  \n                fontSize: \"17px\",\n                fontFamily: \"Arial\"\n            }}\n            >{inValidEndingTime}</span></FadeIn>\n        </InfoContainer> \n    const EndingTime = isShowTime ? null :<DateContainer>\n            <EachateContainer  MarginLeft={\"10px\"}  JustifyContentCalue={\"space-between\" }>\n                <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"5px\"}}>End</span></FadeIn>\n                <TimeSelected \n                    name={\"EndingTime\"}\n                    ChangeETimeClicked={(value) => ChangeETimeClicked(value)}\n                    submitHourValue={(value) => ChangeEndHourValue(value)}\n                    submitMinutsValue={(value) => ChangeEndMinutsValue(value)}\n                    submitDayValue={(value) => ChangeEndDayValue(value)}\n                    RecievedColor={props.ScheduleColor}\n                    />\n            </EachateContainer> \n            {inValidEndInput}\n        </DateContainer>\n\n \n    const time = (\n      <InfoContainer>\n        {IcionArea}\n        <DateContainer>\n          {InfoArea}\n          {StartingTime}\n          {EndingTime}\n        </DateContainer>\n      </InfoContainer>\n    );\n\n    props.FromHourSelected(STimeClicked ? (StartDayValue === \"PM\" ? String(parseInt(StartHoursValue,10) + 12) : StartHoursValue): \"12\") //this where we convert the returned hour from 12 hour system to 24 hour system \n    props.FromMinutsSelected(STimeClicked ? StartMinutsValue : \"00\")\n    props.ToHourSelected(STimeClicked ? (EndDayValue === \"PM\" ? String(parseInt(EndHoursValue,10) + 12) : EndHoursValue) : \"12\") //this where we convert the returned hour To 12 hour system to 24 hour system \n    props.ToMinutsSelected(STimeClicked ? EndMinutsValue : \"00\");\n    props.isTime(isShowTime) \n    return (time)\n}\n\nexport  {CalenderContianer, TimerContainer};","/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/Bottons/DeleteButton.js",["261"],"import React, { useState } from \"react\";\nimport FadeIn from \"react-fade-in\";\nimport { DeleteFilled } from \"@ant-design/icons\";\nimport Button from \"../../../../UI/Button\";  \nimport API from \"../../../../API/API\";\n\nconst DeleteButton = (props) => {\n  const ButtonIconColor = {\n    color: props.ColorChange.IconC,\n    fontSize: \"20px\",\n    marginRight: \"9px\",\n    marginTop: \"4px\",\n  };   \n  \nconst DeleteButton = async () => { \n    const id = props.IDofClickedEvent //the Event id\n    const Delete = props.EventsInfoList  //copy the Events list\n    const isLoggedIn = await API.isLoggedIn();\n    if (isLoggedIn){\n      API.DeleteEvents(id)\n    }\n    props.ReturnNewEvents(Delete.filter(Event => Event._id !== id))\n    props.CloseModel(true)\n  };\n\n  const SubmitDeleteButton = (\n    <FadeIn>\n      <Button\n        width={\"120px\"}\n        marginBottomValue={\"10px\"}\n        marginLeftValue={\"10%\"}\n        fontSizeValue={\"20px\"}\n        borderRadiusValue={\"15px\"}\n        IsCalledValue={\"hover\"}\n        BorderValue=\"solid\"\n        borderWidthValue=\"thin\"\n        paddingInputValue=\"2px\"\n        onClick={DeleteButton}\n        text={\"Delete\"}\n        icon={<DeleteFilled style={ButtonIconColor} />}\n      />\n    </FadeIn>\n  );\n\n\n  return SubmitDeleteButton;\n};\n\nexport default DeleteButton;\n","/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/Bottons/EditButton.js",[],"/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/Bottons/submitChanges.js",["262","263","264"],"import React, { useState } from \"react\";\nimport FadeIn from \"react-fade-in\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport Button from \"../../../../UI/Button\";\nimport API from \"../../../../API/API\";\n\nconst submitChanges = (props) => {\n  const ButtonIconColor = {\n    color: props.ColorChange.IconC,\n    fontSize: \"20px\",\n    marginRight: \"9px\",\n    marginTop: \"4px\",\n  }  \n\n  // this will delete the old event and send the new one\n  const SubmitTheNewEvent = async () => { \n      const isLoggedIn = await API.isLoggedIn();\n      const ClickedEvent = props.PassEventsInfoList; //copy the Events list\n      const id = props.TheIdOfClickedEvent; //the Event id\n      let newEvent;\n      let indexOfEvent;\n      ClickedEvent.forEach((event, index) => {\n        if (event.id == id || event._id == id) {\n            newEvent = {...event};\n            indexOfEvent = index;\n          }\n        });\n\n      const newNotes = [...ClickedEvent]; \n      newEvent = {\n        ...newEvent,\n        id: props.TheIdOfClickedEvent,\n        title: props.isTitle,\n        description: props.isDescription,\n        Url: props.isURL,\n        start: props.isStartingDate,\n        end: props.isEndingData,\n        startTime: props.isStartingTime,\n        endTime: props.isEndingTime,\n        daysOfWeek: props.isRepeatedDays,\n        display: props.isDisplayOption,\n      };\n      newNotes[indexOfEvent] = newEvent\n      props.ReturnNewEvents(newNotes); \n      if(isLoggedIn){\n          API.UpdateEvents(\n            id,\n            props.isTitle,\n            props.isDescription,\n            props.isURL,\n            props.isStartingDate,\n            props.isEndingData,\n            props.isStartingTime,\n            props.isEndingTime,\n            props.isRepeatedDays,\n            props.isDisplayOption\n          )\n        }\n\n      props.isCloseModel(true);\n  };\n\n  const SubmitButton = <FadeIn>\n      <Button\n        width={\"130px\"}\n        marginBottomValue={\"10px\"}\n        marginLeftValue={\"160px\"}\n        fontSizeValue={\"20px\"}\n        borderRadiusValue={\"15px\"}\n        IsCalledValue={\"hover\"}\n        BorderValue=\"solid\"\n        borderWidthValue=\"thin\"\n        paddingInputValue=\"2px\"\n        onClick={SubmitTheNewEvent}\n        text={\"Submit\"}\n        icon={<SendOutlined style={ButtonIconColor}/>}\n      />\n    </FadeIn>\n\n  return SubmitButton;\n};\n\nexport default submitChanges;\n","/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/Containers/TextInputContainer.js",[],"/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/Containers/Date-TimeContainer.js",["265","266","267","268","269","270","271"],"import React, { useState } from \"react\";\nimport styled from \"styled-components\"; \nimport FadeIn  from 'react-fade-in'; \nimport { CalendarOutlined , ClockCircleOutlined} from \"@ant-design/icons\"; \nimport TimeSelected from '../../DataCollection/TimeSelected';\nimport DateSelected from '../../DataCollection/DateSelected';\nimport VisibilityIcon from '@material-ui/icons/Visibility'\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport DateRangeIcon from '@material-ui/icons/DateRange';\nimport { CloseCircleOutlined, CheckCircleOutlined, CheckCircleFilled, EditFilled, EditOutlined } from \"@ant-design/icons\";\nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\n\nconst InfoContainer = styled.div`\n    width: 440px;\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    margin: 4px;\n    margin-bottom: 14px;\n`\nconst EachateContainer = styled.div`\n    width: 400px;\n    display: flex;\n    flex-direction: row;\n    justify-content: ${props => props.JustifyContentCalue};\n    margin: 4px;\n    margin-left: ${props => props.MarginLeft ? props.MarginLeft : null }\n`\nconst DateContainer = styled.div`\n    width: 400px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n`\nconst CalenderContianer = (props) => {\n    //DateStyle and unDateStyle color style \n    const ShowDateStle = {\n        marginRight: \"4px\", \n        marginLeft:\"51px\",\n        marginTop:\"7px\" , \n        fontSize: \"18px\", \n        color : props.ScheduleColor.IconC\n    }\n    //All Component Color Stle\n    const IconColor = { \n        color : props.ScheduleColor.IconC, \n        fontSize:\"25px\", \n        marginRight:\"15px\", \n        marginTop:\"4px\" \n    }\n    \n    // This is a togole to change the state of the disabled and to change the icion as well \n    const InconArea = <div style={{display: \"flex\", flexDirection: \"column\", justifyContent: \"flex-start\"}}>\n            <FadeIn><CalendarOutlined style={IconColor}/> </FadeIn> \n        </div>\n\n    //This is for the layout for Year Month Days  \n    const [isSelectedDate, ChangeSelectedDate]= useState(true)\n    props.GetIsSelectedDate(isSelectedDate)\n    const ChangeSelectedData= isSelectedDate ?  \n        <RadioButtonUncheckedIcon \n            onClick={()=>ChangeSelectedDate(false)}\n            style={ShowDateStle}\n        /> \n        : \n        <CheckCircleFilled \n            onClick={()=>ChangeSelectedDate(true)}\n            style={ShowDateStle} \n        />\n    //This is to switch between The selected date and the date that the user want to change \n    const isData = <EachateContainer> \n            {ChangeSelectedData}\n           { isSelectedDate ? \n                <span style={{paddingTop: \"7px\" ,fontSize: \"1em\", marginLeft: \"5px\"}}> Chick to Change Selected Date of Event</span>\n                :\n                <span style={{paddingTop: \"7px\" ,fontSize: \"1em\", marginLeft: \"5px\"}}> Chick to Retun to Selected Date of Event</span>}\n        </EachateContainer>\n    //Starting Data Area\n    const RecieveFromDate = props.PassIsStartedYear + \"-\" + props.PassIsStartedMonth + \"-\" + props.PassIsStartedDay\n    const [fromData, ChangeFromDate] = useState(\"\") \n    const StartingData = <EachateContainer JustifyContentCalue={ \"\"}>\n            <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}>From</span></FadeIn>\n            { isSelectedDate ? <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"1px\", color:props.ScheduleColor.IconC}}>{props.SendSD}</span></FadeIn> \n                :\n                <DateSelected\n                //These are used to send these data to DataSlected to be used for Year, Month, Day \n                ReturnFrom=\"From\"\n                ReturnClickedFromDay={props.PassIsStartedDay} //passing the sliced date from Edit Event Form \n                ReturnClickedFromMonth={props.PassIsStartedMonth}  //passing the sliced date from Edit Event Form \n                ReturnClickedFromYear={props.PassIsStartedYear} //passing the sliced date from Edit Event Form \n                name=\"start\"\n                //The incoming dating is used to chagne the format of the date and then send that number to submission button\n                submitDateValue={(value) => ChangeFromDate(value)} \n                RecievedColor={props.ScheduleColor}\n                />\n            }\n        </EachateContainer>\n    \n    // End Data Area\n    const RecieveToDate = props.PassIsEndedYear + \"-\" + props.PassIsEndedMonth + \"-\" + props.PassIsEndedDay\n    const [ToData, ChangeToDate] = useState(\"\")\n    const EndingingData = <EachateContainer JustifyContentCalue={ \"\"}>\n            <FadeIn><span style={{  padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"25px\"}}>To</span></FadeIn>\n            { isSelectedDate ? <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"1px\", color:props.ScheduleColor.IconC }}>{props.SendED}</span></FadeIn> \n                :\n                <DateSelected\n                //These are used to send these data to DataSlected to be used for Year, Month, Day \n                ReturnFrom=\"To\"\n                ReturnClickedToDay={props.PassIsEndedDay}  //passing the sliced date from Edit Event Form \n                ReturnClickedToMonth={props.PassIsEndedMonth}   //passing the sliced date from Edit Event Form \n                ReturnClickedToYear={props.PassIsEndedYear}  //passing the sliced date from Edit Event Form \n                name=\"end\"\n                //The incoming dating is used to chagne the format of the date and then send that number to submission button\n                submitDateValue={(value) => ChangeToDate(value)} \n                RecievedColor={props.ScheduleColor}\n            />\n            }\n        </EachateContainer>\n    \n    //This is the returned Date to the calendar\n    const calendar = <InfoContainer>\n            {InconArea}\n            <DateContainer> \n                {isData}\n                {StartingData}\n                {EndingingData}\n            </DateContainer>\n        </InfoContainer>\n\n    //To recieve a prop that will change the value from and to inside the schedule form to the value of From/to Date that has been created here  \n    props.GetFromDate(isSelectedDate ? RecieveFromDate : fromData); //Return either the selected data from the calendar form or the changed data by the user\n    props.GetToDate(isSelectedDate ? RecieveToDate : ToData); //Return either the selected data from the calendar form or the changed data by the user\n    \n    return(calendar)\n}\n\nconst TimerContainer = (props) => {\n    //All Component Color Stle\n    const IconColor = { \n        color : props.ScheduleColor.IconC, \n        fontSize:\"25px\", \n        marginRight:\"15px\", \n        marginTop:\"4px\"\n    }\n    //DateStyle and unDateStyle color style \n    const ShowDateStle = {\n        marginRight: \"4px\", \n        marginLeft:\"51px\",\n        marginTop:\"7px\" , \n        fontSize: \"18px\", \n        color : props.ScheduleColor.IconC\n    }\n    //Visable and unvisable color style \n    const VisibilityStle = {\n        marginRight: \"4px\", \n        marginLeft:\"4px\",\n        marginTop:\"7px\" , \n        fontSize: \"18px\", \n        color : props.ScheduleColor.IconC\n    }\n\n    \n    const [isShowTime, ChangeisShowTime] = useState(true) //to show the option to change the Time that the user selected\n    //this is the part where we change the icon based on clicking the div \n    const ShowData = <FadeIn>\n        {isShowTime ?  null : \n            <CheckCircleFilled \n                onClick={()=>ChangeisShowTime(true)}\n                style={VisibilityStle} />} \n        </FadeIn>\n    const IcionArea = <div style={{display: \"flex\", flexDirection: \"column\", justifyContent: \"flex-start\"}}>\n            <FadeIn><ClockCircleOutlined style={IconColor}/>  </FadeIn>\n            <FadeIn>{ShowData}</FadeIn>\n        </div>\n    const isDefulatTime = \n        <DateContainer>\n            <FadeIn>\n                <EachateContainer>\n                    {isShowTime ? <RadioButtonUncheckedIcon onClick={()=>ChangeisShowTime(false)} style={ShowDateStle}/> : null} \n                    <span style={{paddingTop: \"6px\" ,fontSize: \"1em\", marginLeft: \"5px\"}}>By defualt the time set to 12 pm </span> \n                </EachateContainer>\n            </FadeIn>\n            <FadeIn><span style={{paddingBottom: \"4px\" ,fontSize: \"1em\", marginLeft: \"60px\"}}>Click the Circle to choose certain time</span></FadeIn>\n        </DateContainer>\n\n        //This is for the layout for Hour Minuts Day system\n        const InfoArea = (isShowTime ? \n            isDefulatTime\n            :\n            <EachateContainer JustifyContentCalue={\"space-between\" }>\n                        <FadeIn ><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}> </span></FadeIn> \n                        <FadeIn ><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}>{\"Hour\"}</span></FadeIn> \n                        <FadeIn ><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}>{\"Minuts\"}</span></FadeIn> \n                        <FadeIn ><span style={{ padding: \"1px\" ,paddingTop: \"1px\" , fontSize: \"1.2em\", marginRight: \"1px\"}}>{\"AM / PM\"}</span></FadeIn> \n            </EachateContainer>\n        );\n\n    //collection of stating time for event\n    const [StartHoursValue, ChangeStartHourValue ]= useState() //save the Starting Hour\n    const [StartMinutsValue, ChangeStartMinutsValue ]= useState() //save the starting Minuts\n    const [StartDayValue, ChangeStartDayValue ]= useState() //save starting if it is AM or PM\n    const StartingTime = isShowTime ? null : <EachateContainer JustifyContentCalue={\"space-between\" }>\n            <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"5px\"}}>Start</span></FadeIn>\n            <TimeSelected \n                submitHourValue={(value) => ChangeStartHourValue(value)}\n                submitMinutsValue={(value) => ChangeStartMinutsValue(value)}\n                submitDayValue={(value) => ChangeStartDayValue(value)}\n                RecievedColor={props.ScheduleColor}\n                //this is to disable the values that are inside and it is going to DataSelected\n                DisabledisClicked={isShowTime} \n                />\n        </EachateContainer>\n    \n    //collection of ending time for event\n    const [EndHoursValue, ChangeEndHourValue ]= useState() //save the Ending Hour\n    const [EndMinutsValue, ChangeEndMinutsValue ]= useState() //save the Ending Minuts\n    const [EndDayValue, ChangeEndDayValue ]= useState() //save Ending if it is AM or PM\n    const EndingTime = isShowTime ? null : <EachateContainer  MarginLeft={\"10px\"}  JustifyContentCalue={\"space-between\" }>\n            <FadeIn><span style={{ padding: \"4px\" , fontSize: \"1.2em\", marginRight: \"5px\"}}>End</span></FadeIn>\n            <TimeSelected \n                submitHourValue={(value) => ChangeEndHourValue(value)}\n                submitMinutsValue={(value) => ChangeEndMinutsValue(value)}\n                submitDayValue={(value) => ChangeEndDayValue(value)}\n                RecievedColor={props.ScheduleColor}\n                //this is to disable the values that are inside and it is going to DataSelected\n                DisabledisClicked={isShowTime} \n                />\n        </EachateContainer>\n \n    const time = (\n      <InfoContainer>\n        {IcionArea}\n        <DateContainer> \n            {InfoArea}\n          {StartingTime}\n          {EndingTime}\n        </DateContainer>\n      </InfoContainer>\n    );\n\n    props.FromHourSelected(StartDayValue === \"PM\" ? String(parseInt(StartHoursValue,10) + 12) : StartHoursValue) //this where we convert the returned hour from 12 hour system to 24 hour system \n    props.FromMinutsSelected(StartMinutsValue)\n    props.ToHourSelected(EndDayValue === \"PM\" ? String(parseInt(EndHoursValue,10) + 12) : EndHoursValue) //this where we convert the returned hour To 12 hour system to 24 hour system \n    props.ToMinutsSelected(EndMinutsValue);\n    props.isTime(isShowTime) \n    return (time)\n}\n\nexport  {CalenderContianer, TimerContainer};","/Users/mero/projects/notesk/src/Routes/Calendar/DataCollection/TimeSelected.js",[],"/Users/mero/projects/notesk/src/Routes/Calendar/DataCollection/RepeatedDaysSelected.js",["272"],"import React, { useState } from \"react\";\nimport FadeIn  from 'react-fade-in';\nimport Inputdata from '../../../UI/UserInput';\nimport { createEventId } from \"../event-utils\";\n\n\nconst RepeatDaySelected = (props) => {\n    const [NumberOfRepeatedDays,ChangeNumberOfRepeatedDays] = useState([]) \n    const [Days,changeDays] = useState({\n        Sunday: {id: \"0\", value: false},\n        Monday: {id: \"1\", value: false},\n        Tuesday: {id: \"2\", value: false},\n        Wednesday: {id: \"3\", value: false},\n        Thursday: {id: \"4\", value: false},\n        Friday: {id: \"5\", value: false},\n        Saturday: {id: \"6\", value: false}\n    })\n    const ChoosenDay = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'] \n    const handleRepeatedDays = (e) => {\n        const newDays = {...Days}\n        const onchangeValue = e.target.value\n        newDays[onchangeValue].value = !newDays[onchangeValue].value\n        changeDays(newDays)\n        //Returning the value of id of each day if it is clicked \n        ChangeNumberOfRepeatedDays(Object.values(Days).map(item => {\n            if (item.value) return item.id\n        }).filter(item => item))\n    }\n    \n    const RepeatedDayContainer = (DayValue,OnChangeInputValue) => {\n        return [<Inputdata \n            key={NumberOfRepeatedDays.id + createEventId()}\n            inputType={\"checkbox\"}\n            name=\"title\"\n            widthValue={\"20px\"}\n            paddingVale={\"2px\"}\n            outlineValue={\"none\"}\n            fontSizeValue={\"1.2em\"}\n            fontFamilyValue={\"inherit\"}\n            IsCalledValue={\"FOCUS\"} \n            borderRadiusValue= {\"7px\"}\n            backGroundColorValue={ props.RecievedColor.UserInputBGC}\n            FontColorValue={props.RecievedColor.UserInputFC}\n            PlaceHolderColorValue={props.RecievedColor.UserInputPHC}\n            borderColorValue={props.RecievedColor.BorderColor} \n            BorderValue={\"solid\"}\n            borderWidthValue={\"thin\"}\n            marginRightValue={\"5px\"}\n            marginTopValue={\"4px\"}\n            checked={Days[DayValue].value}\n            onchangeValue = {OnChangeInputValue}\n            InputValue = {DayValue}\n            ></Inputdata>,\n            <label key={NumberOfRepeatedDays.id} style={{marginRight: \"10px\"}}>{DayValue}</label>]\n        }\n        \n    const LineOne = [RepeatedDayContainer(ChoosenDay[0],handleRepeatedDays),\n                     RepeatedDayContainer(ChoosenDay[1],handleRepeatedDays),\n                     RepeatedDayContainer(ChoosenDay[2],handleRepeatedDays),\n                     RepeatedDayContainer(ChoosenDay[3],handleRepeatedDays)]\n    const LineTwo = [RepeatedDayContainer(ChoosenDay[4],handleRepeatedDays),\n                     RepeatedDayContainer(ChoosenDay[5],handleRepeatedDays),\n                     RepeatedDayContainer(ChoosenDay[6],handleRepeatedDays)]\n    \n    props.ValueOfRepeatedDays(NumberOfRepeatedDays);\n    return (  \n    <FadeIn>\n        <div style={{display: \"flex\",width: \"50px\", flexDirection: \"row\"}}>\n             {LineOne} \n        </div>\n        <div style={{\n            display: \"flex\",\n            width: \"50px\", \n            flexDirection: \"row\", \n            marginTop: \"10px\", \n            marginLeft: \"70px\", \n            marginBottom: \"8px\"}}\n        >\n             {LineTwo} \n        </div>\n    </FadeIn>\n       )\n}\n\nexport default RepeatDaySelected;","/Users/mero/projects/notesk/src/Routes/Calendar/DataCollection/DateSelected.js",["273","274","275","276","277","278"],"import React, { useState } from \"react\";\nimport FadeIn from \"react-fade-in\";\nimport SelectData from \"../../../UI/Select\";\nimport {\n  NumberOfYearsValue,\n  NumberOfMonthsValue,\n  NumberOfDaysValue,\n} from \"./OptionsForm\";\nimport { createEventId } from \"../event-utils\";\n\nconst DateSelected = (props) => {\n  // This part is changed once the user click on the drop down to see other options\n  const [GetUserChangeDay, ChnageUserChangedDay] = useState(true);\n  /*\n        This part is chicking if the input that the user entered is what is wanted or not \n        Once the select is clicked then it will change to normal dropdown with input number \n    */\n  const [DayValueInput, ChangeDayValue] = useState(\n      GetUserChangeDay\n        ?( props.ReturnFrom === \"From\"\n          ? props.ReturnClickedFromDay\n          : props.ReturnClickedToDay)\n        : \"\"\n    );\n  const [isChangedValueDay, changedValueDay] = useState(false); \n  const handleDays = (e) => (\n    ChangeDayValue(e.target.value), ChnageUserChangedDay(false), changedValueDay(true)\n  );\n  const Days = (\n    <FadeIn>\n      <SelectData\n        key={DayValueInput.id  + createEventId()}\n        InputValue={DayValueInput}\n        inputType={\"text\"}\n        name={props.name == \"start\" ? \"start\" : \"end\"}\n        widthValue={\"112px\"}\n        paddingVale={\"4px\"}\n        outlineValue={\"none\"}\n        fontSizeValue={\"1.2em\"}\n        fontFamilyValue={\"inherit\"}\n        IsCalledValue={props.DisabledisClicked ? \"\" : \"FOCUS\"}\n        borderRadiusValue={\"7px\"}\n        backGroundColorValue={props.RecievedColor.UserInputBGC}\n        FontColorValue={props.RecievedColor.UserInputFC}\n        PlaceHolderColorValue={props.RecievedColor.UserInputPHC}\n        borderColorValue={props.RecievedColor.BorderColor}\n        BorderValue={\"solid\"}\n        borderWidthValue={\"thin\"}\n        marginRightValue={\"15px\"}\n        onchangeValue={handleDays}\n      >\n        {\n          <NumberOfDaysValue/>\n        }\n      </SelectData>\n    </FadeIn>\n  );\n   \n  // This part is changed once the user click on the drop down to see other options\n  const [GetUserChangeMonth, ChnageUserChangedMonth] = useState(true);\n  /*\n  This part is chicking if the input that the user entered is what is wanted or not \n  Once the select is clicked then it will change to normal dropdown with input number \n  */\n const[MonthValueInput, ChangeMonthValueInput] = useState(\n   GetUserChangeMonth\n    ? (props.ReturnFrom === \"From\"\n        ? props.ReturnClickedFromMonth\n        : props.ReturnClickedToMonth)\n        : \"\")\n  const [isChangedValueMonth, changedValueMonth] = useState(false); \n  const handleMonths = (e) => (\n    ChangeMonthValueInput(e.target.value),\n    ChnageUserChangedMonth(false),\n    changedValueMonth(true)\n    )\n    \n  const Months = (\n    <FadeIn>\n      <SelectData\n        key={MonthValueInput + createEventId()}\n        InputValue={MonthValueInput}\n        inputType={\"text\"}\n        name={props.name == \"start\" ? \"start\" : \"end\"}\n        widthValue={\"112px\"}\n        paddingVale={\"4px\"}\n        outlineValue={\"none\"}\n        fontSizeValue={\"1.2em\"}\n        fontFamilyValue={\"inherit\"}\n        IsCalledValue={props.DisabledisClicked ? \"\" : \"FOCUS\"}\n        borderRadiusValue={\"7px\"}\n        backGroundColorValue={props.RecievedColor.UserInputBGC}\n        FontColorValue={props.RecievedColor.UserInputFC}\n        PlaceHolderColorValue={props.RecievedColor.UserInputPHC}\n        borderColorValue={props.RecievedColor.BorderColor}\n        BorderValue={\"solid\"}\n        borderWidthValue={\"thin\"}\n        marginRightValue={\"15px\"}\n        onchangeValue={handleMonths}\n      >\n        {<NumberOfMonthsValue />}\n      </SelectData>\n    </FadeIn>\n  );\n  \n  //This part is changed once the user click on the drop down to see other options\n  const [GetUserChangeYear, ChnageUserChangedYear] = useState(true);\n  /*\n        This part is chicking if the input that the user entered is what is wanted or not \n        Once the select is clicked then it will change to normal dropdown with input number \n    */\n  const [YearsValueInput, ChangeYearsValueInput] = useState(\n    GetUserChangeYear\n      ?( props.ReturnFrom === \"From\"\n        ? props.ReturnClickedFromYear\n        : props.ReturnClickedToYear)\n      : \"\"\n    );\n  const [isChangedValueYear, changedValueYear]= useState(false)\n  const handleYears = (e) => (\n    ChangeYearsValueInput(e.target.value) , \n    ChnageUserChangedYear(false),\n    changedValueYear(true)\n    )\n  const Years = (\n    <FadeIn>\n      <SelectData\n        key={YearsValueInput + createEventId()}\n        InputValue={YearsValueInput}\n        value=\"as\"\n        PlaceholderValue=\"asdfas\"\n        inputType={\"text\"}\n        name={props.name == \"start\" ? \"start\" : \"end\"}\n        widthValue={\"112px\"}\n        paddingVale={\"4px\"}\n        outlineValue={\"none\"}\n        fontSizeValue={\"1.2em\"}\n        fontFamilyValue={\"inherit\"}\n        IsCalledValue={\"FOCUS\"}\n        borderRadiusValue={\"7px\"}\n        backGroundColorValue={props.RecievedColor.UserInputBGC}\n        FontColorValue={props.RecievedColor.UserInputFC}\n        PlaceHolderColorValue={props.RecievedColor.UserInputPHC}\n        borderColorValue={props.RecievedColor.BorderColor}\n        BorderValue={\"solid\"}\n        borderWidthValue={\"thin\"}\n        marginRightValue={\"15px\"}\n        onchangeValue={handleYears}\n      >\n        {\n          <NumberOfYearsValue/>\n        }\n      </SelectData>\n    </FadeIn>\n  );\n  \n  //this is submitted to DropDownContainer\n  const ReturnYear = (isChangedValueYear ? YearsValueInput : \n                      (props.ReturnFrom === \"From\"\n                        ? \n                        props.ReturnClickedFromYear\n                        : \n                        props.ReturnClickedToYear))\n  const ReturnMonth = (isChangedValueMonth ? MonthValueInput : \n                      (props.ReturnFrom === \"From\"\n                        ? \n                        props.ReturnClickedFromMonth\n                        : \n                        props.ReturnClickedToMonth))\n  const ReturnDay = (isChangedValueDay ? DayValueInput : \n                      (props.ReturnFrom === \"From\"\n                        ? \n                        props.ReturnClickedFromDay\n                        : \n                        props.ReturnClickedToDay))\n  props.submitDateValue(ReturnYear + \"-\" + ReturnMonth + \"-\" + ReturnDay);\n\n  return [Years, Months, Days];\n};\n\nexport default DateSelected;\n","/Users/mero/projects/notesk/src/UI/Select.js",[],"/Users/mero/projects/notesk/src/UI/logo.js",[],"/Users/mero/projects/notesk/src/Routes/Calendar/ScheduleForm/Containers/DisplayContainer.js",["279"],"import React, {useState} from \"react\";\nimport styled from \"styled-components\"; \nimport FadeIn  from 'react-fade-in'; \nimport {BgColorsOutlined} from \"@ant-design/icons\"; \nimport ColorLensIcon from '@material-ui/icons/ColorLens';\nimport DisplaySelected from '../../DataCollection/DisplaySelected';\n\n\nconst InfoContainer = styled.div`\n    width: 440px;\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    margin: 4px;\n    margin-bottom: 10px;\n`\n\nconst DisplayContainer = (props) => {\n    \n    const [GetDisplayOption, CHnageDisplayOption] = useState()\n    props.SubmitDisplayOption(GetDisplayOption)\n    const FontColor = <InfoContainer>\n                <FadeIn>\n                    <BgColorsOutlined style={{fontSize:\"32px\",color : props.ScheduleColor.IconC,marginRight:\"9px\",marginTop:\"4px\"}}/>\n                </FadeIn>\n                <FadeIn>\n                    <DisplaySelected \n                        ValueOfDisplayOption={(value) => CHnageDisplayOption(value)}\n                        RecievedColor={props.ScheduleColor}\n                    />\n                </FadeIn>\n    </InfoContainer>\n\n    return(FontColor)\n}\nexport default DisplayContainer;","/Users/mero/projects/notesk/src/Routes/Calendar/DataCollection/DisplaySelected.js",[],"/Users/mero/projects/notesk/src/Routes/Calendar/DataCollection/OptionsForm.js",[],"/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/Containers/DisplayContainer.js",[],"/Users/mero/projects/notesk/src/Routes/Calendar/EditForm/HoverTitle.js",[],"/Users/mero/projects/notesk/src/Routes/Calendar/DataCollection/LangSelection.js",[],"/Users/mero/projects/notesk/src/WeatherApp/WeatherStack.js",[],"/Users/mero/projects/notesk/src/WeatherApp/GeoCoding.js",[],"/Users/mero/projects/notesk/src/UI/WeatherIcon.js",[],{"ruleId":"280","replacedBy":"281"},{"ruleId":"282","replacedBy":"283"},{"ruleId":"284","severity":1,"message":"285","line":20,"column":7,"nodeType":"286","endLine":20,"endColumn":9,"suggestions":"287"},{"ruleId":"284","severity":1,"message":"285","line":19,"column":7,"nodeType":"286","endLine":19,"endColumn":9,"suggestions":"288"},{"ruleId":"289","severity":1,"message":"290","line":76,"column":53,"nodeType":"291","messageId":"292","endLine":76,"endColumn":55},{"ruleId":"289","severity":1,"message":"290","line":77,"column":56,"nodeType":"291","messageId":"292","endLine":77,"endColumn":58},{"ruleId":"289","severity":1,"message":"290","line":92,"column":53,"nodeType":"291","messageId":"292","endLine":92,"endColumn":55},{"ruleId":"289","severity":1,"message":"290","line":93,"column":55,"nodeType":"291","messageId":"292","endLine":93,"endColumn":57},{"ruleId":"293","severity":1,"message":"294","line":29,"column":7,"nodeType":"295","messageId":"292","endLine":29,"endColumn":18},{"ruleId":"293","severity":1,"message":"296","line":41,"column":7,"nodeType":"295","messageId":"292","endLine":41,"endColumn":16},{"ruleId":"284","severity":1,"message":"297","line":57,"column":7,"nodeType":"286","endLine":57,"endColumn":9,"suggestions":"298"},{"ruleId":"299","severity":1,"message":"300","line":2,"column":7,"nodeType":"301","messageId":"302","endLine":2,"endColumn":15},{"ruleId":"299","severity":1,"message":"303","line":3,"column":7,"nodeType":"301","messageId":"302","endLine":3,"endColumn":14},{"ruleId":"304","severity":1,"message":"305","line":104,"column":65,"nodeType":"306","messageId":"307","endLine":104,"endColumn":66},{"ruleId":"304","severity":1,"message":"305","line":127,"column":64,"nodeType":"306","messageId":"307","endLine":127,"endColumn":65},{"ruleId":"304","severity":1,"message":"305","line":159,"column":64,"nodeType":"306","messageId":"307","endLine":159,"endColumn":65},{"ruleId":"308","severity":1,"message":"309","line":238,"column":9,"nodeType":"301","messageId":"310","endLine":238,"endColumn":30},{"ruleId":"304","severity":1,"message":"305","line":362,"column":59,"nodeType":"306","messageId":"307","endLine":362,"endColumn":60},{"ruleId":"304","severity":1,"message":"305","line":385,"column":60,"nodeType":"306","messageId":"307","endLine":385,"endColumn":61},{"ruleId":"304","severity":1,"message":"305","line":408,"column":56,"nodeType":"306","messageId":"307","endLine":408,"endColumn":57},{"ruleId":"304","severity":1,"message":"305","line":433,"column":59,"nodeType":"306","messageId":"307","endLine":433,"endColumn":60},{"ruleId":"304","severity":1,"message":"305","line":103,"column":54,"nodeType":"306","messageId":"307","endLine":103,"endColumn":55},{"ruleId":"304","severity":1,"message":"305","line":118,"column":59,"nodeType":"306","messageId":"307","endLine":118,"endColumn":60},{"ruleId":"304","severity":1,"message":"305","line":123,"column":60,"nodeType":"306","messageId":"307","endLine":123,"endColumn":61},{"ruleId":"289","severity":1,"message":"290","line":224,"column":48,"nodeType":"291","messageId":"292","endLine":224,"endColumn":50},{"ruleId":"311","severity":1,"message":"312","line":286,"column":15,"nodeType":"313","endLine":286,"endColumn":54},{"ruleId":"289","severity":1,"message":"290","line":137,"column":23,"nodeType":"291","messageId":"292","endLine":137,"endColumn":25},{"ruleId":"289","severity":1,"message":"290","line":137,"column":46,"nodeType":"291","messageId":"292","endLine":137,"endColumn":48},{"ruleId":"289","severity":1,"message":"290","line":140,"column":31,"nodeType":"291","messageId":"292","endLine":140,"endColumn":33},{"ruleId":"289","severity":1,"message":"290","line":142,"column":33,"nodeType":"291","messageId":"292","endLine":142,"endColumn":35},{"ruleId":"299","severity":1,"message":"314","line":5,"column":8,"nodeType":"301","messageId":"302","endLine":5,"endColumn":17},{"ruleId":"299","severity":1,"message":"315","line":57,"column":31,"nodeType":"301","messageId":"302","endLine":57,"endColumn":43},{"ruleId":"316","severity":1,"message":"317","line":91,"column":76,"nodeType":"318","messageId":"319","endLine":91,"endColumn":78},{"ruleId":"289","severity":1,"message":"290","line":91,"column":96,"nodeType":"291","messageId":"292","endLine":91,"endColumn":98},{"ruleId":"316","severity":1,"message":"317","line":99,"column":74,"nodeType":"318","messageId":"319","endLine":99,"endColumn":76},{"ruleId":"289","severity":1,"message":"290","line":99,"column":94,"nodeType":"291","messageId":"292","endLine":99,"endColumn":96},{"ruleId":"304","severity":1,"message":"305","line":140,"column":56,"nodeType":"306","messageId":"307","endLine":140,"endColumn":57},{"ruleId":"304","severity":1,"message":"305","line":146,"column":57,"nodeType":"306","messageId":"307","endLine":146,"endColumn":58},{"ruleId":"299","severity":1,"message":"320","line":10,"column":46,"nodeType":"301","messageId":"302","endLine":10,"endColumn":59},{"ruleId":"299","severity":1,"message":"321","line":54,"column":11,"nodeType":"301","messageId":"302","endLine":54,"endColumn":21},{"ruleId":"299","severity":1,"message":"322","line":115,"column":19,"nodeType":"301","messageId":"302","endLine":115,"endColumn":30},{"ruleId":"299","severity":1,"message":"323","line":40,"column":11,"nodeType":"301","messageId":"302","endLine":40,"endColumn":23},{"ruleId":"299","severity":1,"message":"324","line":1,"column":17,"nodeType":"301","messageId":"302","endLine":1,"endColumn":25},{"ruleId":"299","severity":1,"message":"325","line":1,"column":27,"nodeType":"301","messageId":"302","endLine":1,"endColumn":36},{"ruleId":"299","severity":1,"message":"320","line":6,"column":10,"nodeType":"301","messageId":"302","endLine":6,"endColumn":23},{"ruleId":"299","severity":1,"message":"321","line":109,"column":11,"nodeType":"301","messageId":"302","endLine":109,"endColumn":21},{"ruleId":"299","severity":1,"message":"324","line":1,"column":17,"nodeType":"301","messageId":"302","endLine":1,"endColumn":25},{"ruleId":"299","severity":1,"message":"324","line":1,"column":17,"nodeType":"301","messageId":"302","endLine":1,"endColumn":25},{"ruleId":"289","severity":1,"message":"290","line":23,"column":22,"nodeType":"291","messageId":"292","endLine":23,"endColumn":24},{"ruleId":"289","severity":1,"message":"290","line":23,"column":41,"nodeType":"291","messageId":"292","endLine":23,"endColumn":43},{"ruleId":"299","severity":1,"message":"326","line":7,"column":8,"nodeType":"301","messageId":"302","endLine":7,"endColumn":22},{"ruleId":"299","severity":1,"message":"327","line":8,"column":8,"nodeType":"301","messageId":"302","endLine":8,"endColumn":25},{"ruleId":"299","severity":1,"message":"328","line":9,"column":8,"nodeType":"301","messageId":"302","endLine":9,"endColumn":21},{"ruleId":"299","severity":1,"message":"329","line":10,"column":10,"nodeType":"301","messageId":"302","endLine":10,"endColumn":29},{"ruleId":"299","severity":1,"message":"330","line":10,"column":31,"nodeType":"301","messageId":"302","endLine":10,"endColumn":50},{"ruleId":"299","severity":1,"message":"331","line":10,"column":71,"nodeType":"301","messageId":"302","endLine":10,"endColumn":81},{"ruleId":"299","severity":1,"message":"332","line":10,"column":83,"nodeType":"301","messageId":"302","endLine":10,"endColumn":95},{"ruleId":"316","severity":1,"message":"317","line":25,"column":65,"nodeType":"318","messageId":"319","endLine":25,"endColumn":67},{"ruleId":"304","severity":1,"message":"305","line":27,"column":35,"nodeType":"306","messageId":"307","endLine":27,"endColumn":36},{"ruleId":"289","severity":1,"message":"290","line":35,"column":26,"nodeType":"291","messageId":"292","endLine":35,"endColumn":28},{"ruleId":"304","severity":1,"message":"305","line":73,"column":42,"nodeType":"306","messageId":"307","endLine":73,"endColumn":43},{"ruleId":"289","severity":1,"message":"290","line":84,"column":26,"nodeType":"291","messageId":"292","endLine":84,"endColumn":28},{"ruleId":"304","severity":1,"message":"305","line":121,"column":43,"nodeType":"306","messageId":"307","endLine":121,"endColumn":44},{"ruleId":"289","severity":1,"message":"290","line":133,"column":26,"nodeType":"291","messageId":"292","endLine":133,"endColumn":28},{"ruleId":"299","severity":1,"message":"333","line":5,"column":8,"nodeType":"301","messageId":"302","endLine":5,"endColumn":21},"no-native-reassign",["334"],"no-negated-in-lhs",["335"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["336"],["337"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-dupe-keys","Duplicate key 'description'.","ObjectExpression","Duplicate key 'textColor'.","React Hook useEffect has a missing dependency: 'currentEvents'. Either include it or remove the dependency array.",["338"],"no-unused-vars","'foreCast' is assigned a value but never used.","Identifier","unusedVar","'GeoCode' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-redeclare","'PassWordLengthMessage' is already defined.","redeclared","react/jsx-pascal-case","Imported JSX component Weather_Icon must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","'UserInput' is defined but never used.","'ChangeMonths' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'CheckOutlined' is defined but never used.","'ValidStyle' is assigned a value but never used.","'ChangeURLPH' is assigned a value but never used.","'ShowDateStle' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'VisibilityIcon' is defined but never used.","'VisibilityOffIcon' is defined but never used.","'DateRangeIcon' is defined but never used.","'CloseCircleOutlined' is defined but never used.","'CheckCircleOutlined' is defined but never used.","'EditFilled' is defined but never used.","'EditOutlined' is defined but never used.","'ColorLensIcon' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"339","fix":"340"},{"desc":"339","fix":"341"},{"desc":"342","fix":"343"},"Update the dependencies array to be: [history]",{"range":"344","text":"345"},{"range":"346","text":"345"},"Update the dependencies array to be: [currentEvents]",{"range":"347","text":"348"},[498,500],"[history]",[499,501],[1760,1762],"[currentEvents]"]